{"powerup": {"content": "<h2>Introduction</h2>\n<p>Welcome to Understanding Computers and the Internet! So glad you could make it. Let's begin with a story. There's a good chance you're sitting at or near a computer right now, whether that be a laptop, tablet, or smartphone. At some point during the day, you hit the power button on one of those devices and watched as the screen lit up and your computer came to life. Pressing that button kicked off something known as the <strong>boot process</strong>, which wakes up all the hardware components that make up your computer and starts up all of the software programs necessary to bring up your desktop.</p>\n<p>First, all of your computer's <strong>hardware</strong>, the physical components that make up your machine, has to kick into gear. Many of your computer's hardware components are connected to the <strong>motherboard</strong>, also known as a logic board, which is an expandable circuit board that manages communication among your system's various parts. Here's a photo of a motherboard from a 2007 Acer desktop computer.</p>\n<p><img src=\"/static/img/1-motherboard-desktop.png\" style=\"width: 800px\" alt=\"Desktop motherboard\" /></p>\n<h2>First Steps</h2>\n<p>Alright, so how does that thing work? It's 9am (why are you awake this early?), and you just pressed the power button on your desktop computer at work. This sends a signal to the computer's <strong>power supply</strong>, which plugs directly into an electrical outlet and manages the electric voltage that is sent to the components of your machine. In order to keep your machine from overheating, the power supply is typically equipped with a number of fans that circulate air throughout your computer. The power supply connects to the motherboard via the power connector shown at the top-left of the above motherboard picture as a means of channeling power from your outlet to your computer.</p>\n<p>Once your computer has power, a piece of software called the <strong>BIOS</strong>, or basic input output system, starts up. The BIOS contains the instructions that the computer needs to follow in order to start up. These instructions are stored on a separate chip on the motherboard, and the BIOS plays a crucial role in the process of powering on. Without the BIOS's instructions, your computer would have power but wouldn't know what to do with it! On a Mac, this software is called <strong>EFI</strong>, or extensible firmware interface, but it plays the same role. On the above picture, the BIOS chip is located in the top-right of the motherboard.</p>\n<p>First, your BIOS (or EFI) reads a few system settings from the <strong>CMOS</strong>, or complementary metal-oxide semiconductor. How's that for an impressive-sounding acronym? The CMOS stores a small bit of information, such as the current date and time, that is needed by the BIOS in order to begin the startup process. So that data on the CMOS isn't lost if the computer loses power, it has its own lithium battery, not unlike the one that might be found in a watch. The CMOS battery can be find near the middle of the above motherboard.</p>\n<p>Next, the BIOS ensures that the computer's video card is operational, so that it can output information to the computer's display. Your computer's graphics card is responsible for handling computations relating to coloring in the pixels that make up your computer's display, and the graphics card may connect to the motherboard using a <strong>PCI slot</strong>. The motherboard above has three PCI slots located near the bottom-right of the board, which serve the purpose of allowing additional hardware to connect to the motherboard. In addition to graphics cards, sound cards, video cards, and additional ports, for example, can be added to the motherboard via PCI slots. The adjacent <strong>PCI express</strong>, or PCIe, slots are used for the same purpose, but compared to PCI, PCIe is a newer and faster standard. Modern graphics cards typically connect to the motherboard using <strong>AGP</strong>, or accelerated graphics port, which is simply a higher-performance port designed with graphics cards in mind. AGP slots, though not shown on the above motherboard, are very similar in shape to PCI and PCIe slots. Some modern processors have graphics capabilities built right in, else your computer might have a graphics card built by companies like NVIDIA and ATI.</p>\n<p>Once video is good to go, the BIOS performs a series of power on self tests, or a <strong>POSTs</strong> for short, to make sure all of your computer's hardware is functioning correctly. Unfortunately, the tendency to refer to these as \"POST tests\" makes this one of those acronyms like \"ATM machine,\" which of course stands for \"automated transaction machine machine\" and \"PIN number,\" or \"personal identification number number.\" The POST first makes sure that the system's <strong>RAM</strong>, or random-access memory, is totally readable and writeable. RAM is your computer's short-term memory, which is used by programs to temporarily store data. Typically, a new computer will have between two and four <strong>gigabytes</strong> of RAM, but much more on that soon! This data will typically become inaccessible once those programs finish running and once the computer loses power. RAM is attached to the motherboard via the memory slots at the top-left of the motherboard. These slots look similar to the PCI slots we saw earlier, but they're a bit longer and thinner.</p>\n<h2>Peripherals</h2>\n<p>Next, the POST checks for any <strong>peripherals</strong> attached to the computer, which could include the keyboard, mouse, flash drives, or printers. The ports that allow additional hardware to be plugged into your computer can be found in the three columns at the bottom of this motherboard. The rightmost column of ports on this picture are used for both audio out (e.g, speakers) and audio in (e.g., a microphone). Here, the additional audio jacks allow the computer to handle both a microphone and an additional digital line in/out. Next to the audio jacks appears to be an <strong>Ethernet</strong> port, which is used to connect your computer to the Internet via a modem or router. In that same column and the one next to it, we have a good amount of <strong>USB</strong>, or universal serial bus, ports. Today, USB is among the more popular ways of connecting consumer electronics to your computer. For example, digital cameras, smartphones, and printers are all usually connected to your computer using a USB cable. However, USB cables come in a few different shapes, shown below. Many modern printers use a USB A to B cable, which has a type A connector on one end and a type B connector on the other. Micro USB to A cables, on the other hand, are commonly used in smartphone chargers. Because cables can have two different types of connectors, many computers simply have slots for USB A, and device-makers supply cables with at least one type A connector.</p>\n<p><img src=\"/static/img/1-usb.jpg\" style=\"width: 400px\" alt=\"USB cables\" /></p>\n<p>Farther to the left, it looks like we have a few more slots other hardware can plug into. On the left is a parallel port, serial port, and VGA port. While the larger parallel port and smaller serial port have largely fallen out of use in consumer electronics, <strong>VGA</strong> ports are commonly used to connect an external display to your computer. You may also have heard of <strong>DVI</strong> and <strong>HDMI</strong> as means of connecting monitors to your computer. While VGA utilizes an analog signal, both DVI and HDMI are digital, which can result in faster data transfer and a higher-quality picture. HDMI has become the default connector for most televisions, Blu-Ray players, and video game consoles, as it is designed specifically with high-definition video in mind and has the ability to transfer both audio and video using a single cable. VGA and DVI, on the other hand, require a separate cable in order to transfer audio between devices. Because VGA uses an analog signal while DVI and HDMI use digital signals, it's generally expensive to convert a VGA to DVI or HDMI. Though you'll find plenty of cheap adapters online, they won't necessarily work unless your computer supports both analog and digital output! Unlike PCs, which typically have ports for DVI or HDMI cables, Mac computers tend to use a DisplayPort or Mini-DisplayPort connector to attach external displays. While (expensive!) Apple displays have cables that will plug directly into a Mac computer, you'll probably have to buy a Mini-DisplayPort to VGA or DVI adapter if you want to use a non-Apple display. I guess there's a reason they're the most valuable company in the world right now...</p>\n<p><img alt=\"Video cables\" src=\"/static/img/1-video-cables.jpg\" /></p>\n<p>All the way to the left are two <strong>PS/2 ports</strong>, which used to be used to attach your keyboard and mouse to the computer. Though they look identical, the ports used for keyboards and mice are not interchangeable, so you can't plug your keyboard into a mouse port. That being said, USB ports have largely superseded PS/2 ports, and almost any keyboard or mouse you buy today will have a USB connector.</p>\n<p>As a reference, check out <a href=\"http://linuxologist.com/01general/back-to-basics-identify-your-computer-ports/\">this handy guide</a>, which shows what these various ports look like and what they're used for!</p>\n<p>While shopping for cables, and HDMI cables in particular, you may be tempted to buy the most expensive, \"highest-quality\" cable you can possibly find. However, HDMI cables are notoriously overpriced. Unlike older analog cables, there's no way to improve the quality of data transferred digitally, no matter what cable companies tell you. As we'll soon see, digital cables transfer data using only 0s and 1s, and there's no way to make a 0 any \"better.\" Either something is a zero or it's not; there's no in between like there is with an audio signal! When hooking up your home entertainment system, you won't get better performance out of a cable that costs $100 compared to a cable that costs $10. For the same price as some of the cables you can find in electronics stores, you could <a href=\"http://www.mint.com/blog/trends/the-rip1/\">hook up your TV using pure 14-carat gold</a>. To be clear, I wouldn't recommend doing that either. When purchasing new electronics, it's easy to be fooled by confirmation bias, just like the people interviewed in the below video!</p>\n<iframe width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/rdIWKytq_q4\" frameborder=\"0\"> </iframe>\n\n<h2>Software</h2>\n<p>Okay, rant over. Back to powering on your computer again. Once the POST process has completed and the BIOS has verified that all attached hardware components are working correctly, it can start loading your <strong>operating system</strong>, which is probably a version Windows, OS X, or Linux (e.g., Fedora, Ubuntu, etc.). The operating system's code is stored on your computer's <strong>hard drive</strong>, which is its primary form of storage. If RAM is your computer's short-term memory, then the hard drive is where all those embarrassing memories from middle school get stored. Unlike RAM, data on the hard drive will not be lost when your computer loses power (phew!). The amount of space on a hard drive is also much larger than the amount of space in RAM; while RAM is typically 2&ndash;4 gigabytes, a hard drive is usually several hundreds of gigabytes in size. Your computer's hard drive connects to the motherboard via the <strong>SATA</strong> connectors and <strong>IDE</strong> (also known as <strong>PATA</strong>) connectors, found at the top of this picture. Your computer's hard drive might be a traditional <strong>hard disk drive</strong> with moving parts or a cutting-edge <strong>solid-state drive</strong>, and its not uncommon for computers to have multiple hard drives, for higher performance or backup purposes.</p>\n<p>The first part of the operating system to be loaded is the <strong>kernel</strong>. The kernel is among the lowest-level pieces of software in the operating system, as its job is to serve as a bridge between your computer's hardware and the other software that might be running on the computer. By the way, when we refer to <strong>software</strong>, we are now referring to intangible computer programs that are capable of running on your computer's hardware. The execution of software is handled by the <strong>CPU</strong>, also known as a processor. The CPU is the brains of your machine, as it's responsible for putting the \"compute\" in \"computer\" by performing the logic of software programs. Your CPU performs thousands of computations every second, which we measure in <strong>gigahertz</strong>. Today, popular CPU brands include Intel and AMD. In the above motherboard, the CPU is located in the big empty space towards the left side of the board. From the picture, we can see that the CPU attaches to the motherboard using hundreds of tiny pins underneath the chip. After using your laptop for a while or perhaps while watching an HD movie, you may have heard the sound of a fan spinning. The CPU tends to generate large amounts of heat, so it is typically mounted in the motherboard using a <strong>heat sink</strong>, which can cool the CPU using a thermal adhesive, fan, or even a water-based cooling mechanism. Below is a heat sink for an AMD CPU that uses a fan for additional cooling.</p>\n<p><img src=\"/static/img/1-heatsink.jpg\" alt=\"Heat sink\" style=\"width: 500px\" /></p>\n<p>While the kernel takes care of interfacing with hardware, the operating system is also tasked with managing the software running on your computer. When you run a piece of software like Microsoft Word or Google Chrome, the operating system takes care of executing those processes, ensuring that they can access your computer's memory when they need to, and allowing them to read and write files to the hard drive. Because you'll often have multiple programs running at once, the operating system is also responsible for multitasking and doing its best to keep your computer safe from malicious attackers. Really then, the operating system is a piece of software that allows you to run other software. Meta, right?</p>\n<p>While your computer is booting up, you may see some text displayed by your BIOS that describes how to change BIOS settings. Depending on your BIOS, pressing keys like F2, F9, or F10 will pause the normal boot process and instead bring you to a text-based interface where you can view the hardware that the BIOS determined was present in your computer during POST. Through this interface, you may also be able to view and change CMOS settings, update your BIOS's software, and, as shown below, change the order of the boot sequence. As we saw, while the BIOS normally looks on the hard drive for the operating system, you can configure your BIOS (as shown below) to instead look first at the DVD drive or flash drive, which can be helpful in diagnosing problems with your hard drive.</p>\n<p><img alt=\"BIOS screen\" src=\"/static/img/1-bios.gif\" /></p>\n<h2>Motherboard Organization</h2>\n<p>Because laptops are much thinner and lighter than desktop computers, laptop motherboards are typically much more compact. Below is a photo of the motherboard inside of a Macbook Air, which is marketed as one of the thinnest laptops on the market. Believe it or not, all of the parts crucial to the computer's operation are contained in this much smaller piece of hardware! A lot of the Macbook Air's size and weight actually comes from its comparatively massive batteries. However, while components like RAM and the hard drive can easily be added and removed from the above desktop motherboard, many components below are soldered to the motherboard, which makes them pretty difficult to replace.</p>\n<p><img alt=\"Laptop motherboard\" src=\"/static/img/1-motherboard-laptop.jpg\" style=\"width: 700px\" /></p>\n<p>Let's take a step back now and look at the motherboard at a higher level. We can essentially divide the functions of the motherboard in half (not literally, though... that'd be an expensive mistake). First, we have the components that frequently interface with the CPU, which include the CPU itself, RAM, and graphics card. This part of the motherboard is called the <strong>northbridge</strong>, and it's job is to coordinate the transfer of data between these hardware components. While in older motherboards the northbridge was a physical, separate chip on the board, many modern processors have this functionality already built in. Then, we have the <strong>southbridge</strong> that handles interfacing with the other components we've described, like USB and PCI peripherals as well as the PATA or SATA hard drive. The southbridge connects to the northbridge in order to serve (appropriately) as a bridge between the CPU and less-frequently-accessed hardware connected to your computer. On systems in which the northbridge is simply built into the CPU itself, the southbridge connects directly to the processor. Visually, your motherboard is laid out like this:</p>\n<p><img alt=\"Motherboard schema\" src=\"/static/img/1-schema.png\" /></p>\n<h2>The Keyboard</h2>\n<p>Before we finish up, let's briefly take a closer look at two of your computer's most important peripherals: the keyboard and the mouse/trackpad. Both of these devices could be consider little computers in and of themselves. Underneath your keyboard is a <strong>key matrix</strong>, which is a large grid of circuits, one underneath each key. When a key is pressed, it completes a circuit and allows a tiny amount of current to flow through the the keyboard's processor, which tells it that a key has been pressed. The keyboard's tiny processor then looks up which key was pressed in its <strong>read-only memory</strong>, or ROM, which contains a mapping from these circuit locations to actual characters. Then, using the USB (or PS/2) cable connecting the keyboard to the motherboard, the character that was pressed is sent to the CPU, which is ready to receive signals from the keyboard at any time. Below is a picture of the inside of a keyboard. Believe it or not, this isn't a subway map; each of those sun-looking things is directly underneath a key on the keyboard.</p>\n<p><img alt=\"Keyboard key matrix\" src=\"/static/img/1-keymatrix.jpg\" style=\"width: 800px\" /></p>\n<h2>The Mouse</h2>\n<p>As you might expect, the technology that makes the cursor move around on your screen is a bit more complicated. Older mice operated by tracking the motion of a physical ball on the inside of the mouse. As you can see on the left mouse below, two rollers are used to determine if the mouse was moved along the x- or y-axis. As the ball moves, so too do the rollers, which in turn rotate disks attached to the rollers' edges. Infrared sensors that shoot tiny beams of light are positioned in front of and behind the disks, and tiny holes lining the edges of the disks can either block or allow the light through. The speed with which the beam of light is broken by the rotating disk helps a processor chip on the mouse determine how fast the mouse is moving. The same process can be used to detect the movement of the scroll wheel found on some mice, as the scroll wheel also has spokes whose movement can be tracked using an infrared break beam sensor. This movement data is then encoded and sent along to the CPU via the cable connecting the mouse to the motherboard. Mouse clicks can be detected in a similar manner to keyboard presses, and that data is also sent along to the CPU over the same cable. Videos speak louder than words, so here's an animation of how this process works.</p>\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/74W-QNudReo#t=73\" frameborder=\"0\"> </iframe>\n\n<p>The mouse on the right, called an <strong>optical mouse</strong>, works a bit differently. In order to both improve the accuracy of mice and prevent meddling kids (confession: I was among them) from taking the balls out of mice, modern devices use an LED rather than a physical object to track motion. If you've ever picked up an optical mouse (and hopefully didn't point it at your eye), you've seen a red light emitted from its bottom, right next to a small sensor. The red light produced by the LED will reflect off the mouse's surface, producing a pattern that can be detected by the mouse's sensor. The mouse's on-board chip can determine how quickly the mouse is moving based on how fast this pattern changes, which actually produces much more accurate results than traditional ball mice. Optical mice also have the added benefit of having no moving mechanical parts, which improves the reliabilty of the hardware, as well as the ability to be used on a wider variety of surfaces.</p>\n<p><img alt=\"Ball mouse\" src=\"/static/img/1-ball.jpg\" /> &nbsp; <img alt=\"Optical mouse\" src=\"/static/img/1-optical.jpg\" /></p>\n<p>Alright! Now that we have a pretty good understanding of how all of the different hardware components of your computer work together to bring you <a href=\"http://www.youtube.com/watch?v=C_S5cXbXe-4\">cat videos</a>, let's zoom in on two different aspects of computing: representing data and doing stuff with that data!</p>", "title": "Power Up", "id": "powerup", "tags": ["BIOS", "CMOS", "DVI", "HDMI", "Keyboards", "Mice", "Motherboards", "POST", "Operating Systems", "VGA"], "sequence": 0}, "binary": {"content": "<h2>Introduction</h2>\n<p>You've probably heard that computers are all about zeroes and ones. But... what does that mean? And... why? After all, two and three are pretty great numbers, too! (But don't get me started on seven.)</p>\n<p>Let's say I ask you a question like \"Do you like cats?\" There are two possible answers to this question: yes and no. (Though if you want to be friends, then really \"yes\" is the only possible answer.) We can represent your answer to this question using one <strong>bit</strong>, which is the most basic unit of information in computing. A bit can only have two possible values, which we can think of as \"yes\" or \"no,\" \"on\" or \"off,\" \"true\" or \"false,\" or finally, if you're a computer, \"0\" or \"1\". We can also use a bit to represent, for example, whether a light is on or off, the result of a coin flip, or the sign of a magnet.</p>\n<p>But, answering the question \"How much do you like cats?\" is a <em>bit</em> different (pun fully intended). This question has more than one answer; you could say you kinda like cats, you really love cats, you couldn't live without cats, and so on. You might also think about answering this question on a scale from one to five, a scale from one to ten, etc. Either way, we'll need more than just one bit to represent your love of all things feline, since a 0 or a 1 doesn't cover all of the possible answers to this question.</p>\n<h2>The Decimal System</h2>\n<p>However, before we talk any more about how computers represent numbers, let's quickly review how we as humans are probably used to representing numbers. According to my laptop's keyboard, there are ten different digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9. (We call this the <strong>decimal</strong> system, since there are ten possible digits.) That means that we can represent ten different numbers using only one digit. Of course, we're going to start running into issues when we want to represent the number that is one more than 9. Luckily, we've already solved this problem: one more than 9 is 10. To make the number 10, we created a new space for a second digit, which you may remember as the \"tens place\" from grade school (that is, if you weren't too busy playing with yo-yos like I was). Similarly, we have a hundreds place, thousands place, and so on for larger numbers. When you were first learning to count, you may have used blocks like the below to represent this. A single cube represents the ones place, a column represents the tens place, a rectangle represents the hundreds place, and so on.</p>\n<p><img alt=\"Place value blocks\" src=\"/static/img/1-blocks.jpg\" /></p>\n<p>The fact that we use ones, tens, hundreds, and thousands is no accident. We have 10 different digits to choose from, and 10<sup>0</sup> = 1, 10<sup>1</sup> = 10, 10<sup>2</sup> = 100, and so on. (Remember, when we say something like 10<sup>3</sup>, that's just short for 10 &times; 10 &times; 10, or 1000.) So, these places can be represented with a table like this:</p>\n<table style=\"text-align: center\">\n\n    <tr>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n    </tr>\n\n    <tr>\n\n        <td>10<sup>4</sup></td>\n\n        <td>10<sup>3</sup></td>\n\n        <td>10<sup>2</sup></td>\n\n        <td>10<sup>1</sup></td>\n\n        <td>10<sup>0</sup></td>\n\n    </tr>\n\n</table>\n\n<p>Let's fill in these blanks with some digits:</p>\n<table style=\"text-align: center\">\n\n    <tr>\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>2</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>3</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>4</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>5</strong>&nbsp;&nbsp;</u></td>\n\n    </tr>\n\n    <tr>\n\n        <td>10<sup>4</sup></td>\n\n        <td>10<sup>3</sup></td>\n\n        <td>10<sup>2</sup></td>\n\n        <td>10<sup>1</sup></td>\n\n        <td>10<sup>0</sup></td>\n\n    </tr>\n\n</table>\n\n<p>Now, to figure out what number is represented by those digits, we multiply the digit in the ones place by 1, the digit in the tens place by 10 (and so on), and then add them together. That means that the above number is:</p>\n<p>(1 &times; 10<sup>4</sup>) + (2 &times; 10<sup>3</sup>) + (3 &times; 10<sup>2</sup>) + (4 &times; 10<sup>1</sup>) + (5 &times; 10<sup>0</sup>) =</p>\n<p>10000 + 2000 + 300 + 40 + 5 = 12345</p>\n<p>And there we go, the digits \"12345\" together represent the number \"twelve thousand three hundred forty-five.\"</p>\n<h2>The Binary System</h2>\n<p>Alright, back to those zeros and ones. Remembering <em>ten</em> different digits can be hard work. Heck, I can barely remember my sister's birthday. Let's make one tiny change to the above table. Rather than having places for 10<sup>0</sup>, 10<sup>1</sup>, 10<sup>2</sup>, and so on, let's instead create places for 2<sup>0</sup>, 2<sup>1</sup>, 2<sup>2</sup>, and so on:</p>\n<table style=\"text-align: center\">\n\n    <tr>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>4</sup></td>\n\n        <td>2<sup>3</sup></td>\n\n        <td>2<sup>2</sup></td>\n\n        <td>2<sup>1</sup></td>\n\n        <td>2<sup>0</sup></td>\n\n    </tr>\n\n</table>\n\n<p>This representation is called <strong>binary</strong> (as opposed to decimal). In this world, we'll represent numbers using a ones place, a twos place, a fours place, an eights place, a sixteens place, and so on. Now, rather than using ten digits to represent numbers, we'll only use two: 0 and 1. That means that we can represent each digit in a binary number with one bit. Any number then, can be represented as a collection of bits!</p>\n<p>Let's try counting in binary, starting with 0. The number zero in binary is still 0, phew. Same with the number one, which is just 1 in binary. The number two, on the other hand, is a whole new ball game. Our only choices for digits are 0 and 1, so we can't represent the number two with the digit 2. Using the decimal system, we ran into the same problem when we wanted to represent the number ten, because 9 was the last digit we had avilable. So, we'll do exactly what we did last time: we'll introduce a new place for a digit. Now, we can represent the number two as \"10\" in binary. We now have a 1 in the twos place and a 0 in the ones place, which means the number we're representing is:</p>\n<p>(1 &times; 2) + (0 &times; 1) = 2 + 0 = 2</p>\n<p>Great, let's try a three now. Since we could represent a two using the binary number 10, it doesn't feel like we need to introduce a new slot for a digit yet. Instead, let's try flipping that 0 into a 1, which will give us:</p>\n<p>(1 &times; 2) + (1 &times; 1) = 2 + 1 = 3</p>\n<p>Sweet! If we now want to represent the number four now, it looks like we're going to need another slot for a digit. Because this new place is going to be the fours place, we know that we can represent the number four as \"100,\" since that's what we did the last time we needed to add a new digit. Just to be safe, let's make sure:</p>\n<p>(1 &times; 4) + (0 &times; 2) + (1 &times; 0) = 4</p>\n<p>Let's do one more for good measure. To represent five in binary, we'll want to add one to our representation of 4, which we can do by flipping the last bit. This gives us:</p>\n<p>(1 &times; 4) + (0 &times; 2) + (1 &times; 1) = 5</p>\n<h2>Converting from Decimal to Binary</h2>\n<p>Alright, counting was fun, but let's now try converting a slightly larger binary number into decimal. Our goal now is to figure out what number is represented by 10110. To do so, let's start with a table that tells us what each of the places in a binary number is.</p>\n<table style=\"text-align: center\">\n\n    <tr>\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>0</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>.\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>0</strong>&nbsp;&nbsp;</u></td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>4</sup></td>\n\n        <td>2<sup>3</sup></td>\n\n        <td>2<sup>2</sup></td>\n\n        <td>2<sup>1</sup></td>\n\n        <td>2<sup>0</sup></td>\n\n    </tr>\n\n</table>\n\n<p>To figure out what number these bits represent, let's do the same thing we did before, but rather than using powers of 10, we'll use powers of 2:</p>\n<p>(1 &times; 2<sup>4</sup>) + (0 &times; 2<sup>3</sup>) + (1 &times; 2<sup>2</sup>) + (1 &times; 2<sup>1</sup>) + (0 &times; 2<sup>0</sup>) =</p>\n<p>16 + 0 + 4 + 2 + 0 = 22</p>\n<p>And that's it! The binary number 10110 is the same as the decimal number 22. Sometimes, you might see binary number start with one or more zeroes. You can actually add as many zeroes as you want to the beginning of a binary number without changing its value, since that's the equivalent of adding zero to the number, which won't change much. Instead, this is sometimes done to indicate that a number is indeed expressed using binary and not some other system. A convention like 0b101 (\"b\" for binary here) also makes it more clear that we're referring to the binary number 5, not the decimal number 101.</p>\n<p>For reference, here's a handy dandy chart listing the first few powers of 2, which will be helpful when working with binary numbers.</p>\n<table style=\"font-size: 16px\">\n\n    <tr>\n\n        <td>2<sup>0</sup></td>\n\n        <td> = </td>\n\n        <td>1</td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>1</sup></td>\n\n        <td> = </td>\n\n        <td>2</td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>2</sup></td>\n\n        <td> = </td>\n\n        <td>4</td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>3</sup></td>\n\n        <td> = </td>\n\n        <td>8</td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>4</sup></td>\n\n        <td> = </td>\n\n        <td>16</td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>5</sup></td>\n\n        <td> = </td>\n\n        <td>32</td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>6</sup></td>\n\n        <td> = </td>\n\n        <td>64</td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>7</sup></td>\n\n        <td> = </td>\n\n        <td>128</td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>8</sup></td>\n\n        <td> = </td>\n\n        <td>256</td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>9</sup></td>\n\n        <td> = </td>\n\n        <td>512</td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>10</sup></td>\n\n        <td> = </td>\n\n        <td>1024</td>\n\n    </tr>\n\n</table>\n\n<p>Let's try another one. What's decimal representation of the binary number 01101? First, let's fill in the table:</p>\n<table style=\"text-align: center\">\n\n    <tr>\n\n        <td><u>&nbsp;&nbsp;<strong>0</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>.\n\n        <td><u>&nbsp;&nbsp;<strong>0</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>4</sup></td>\n\n        <td>2<sup>3</sup></td>\n\n        <td>2<sup>2</sup></td>\n\n        <td>2<sup>1</sup></td>\n\n        <td>2<sup>0</sup></td>\n\n    </tr>\n\n</table>\n\n<p>Now, let's add everything up:</p>\n<p>(0 &times; 2<sup>4</sup>) + (1 &times; 2<sup>3</sup>) + (1 &times; 2<sup>2</sup>) + (0 &times; 2<sup>1</sup>) + (1 &times; 2<sup>0</sup>) =</p>\n<p>0 + 8 + 4 + 0 + 1 = 13</p>\n<p>So, 01101 is the lucky number 13!</p>\n<h2>Converting from Binary to Decimal</h2>\n<p>What if we want to go the other way? Let's say we have the decimal number 14, and we want figure out its binary representation. Using the same table, we can work backwards by filling in each space. The process of converting a decimal number to binary is just like making change at a cash register. So that you don't annoy your customers, you always want to make change using as few coins as possible.</p>\n<table style=\"text-align: center\">\n\n    <tr>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>4</sup></td>\n\n        <td>2<sup>3</sup></td>\n\n        <td>2<sup>2</sup></td>\n\n        <td>2<sup>1</sup></td>\n\n        <td>2<sup>0</sup></td>\n\n    </tr>\n\n</table>\n\n<p>Let's start all the way at the left. 2<sup>4</sup> = 16, which is bigger than 14. That means there can't possibly be a 1 there, so we can put a 0 in the first space. If we were making change at a cash register, putting a 1 in the first space case would be like giving someone who was owed 23 cents a quarter, since we'd be giving away more money than necessary.</p>\n<table style=\"text-align: center\">\n\n    <tr>\n\n        <td><u>&nbsp;&nbsp;<strong>0</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>4</sup></td>\n\n        <td>2<sup>3</sup></td>\n\n        <td>2<sup>2</sup></td>\n\n        <td>2<sup>1</sup></td>\n\n        <td>2<sup>0</sup></td>\n\n    </tr>\n\n</table>\n\n<p>Now we'll move to the next space. 2<sup>3</sup> = 8, which is smaller than 14, so we want to put a 1 in the second space. Remember, we want to make change using as few coins as possible, so if at any point we can put a 1 in a space without creating too large a number, we should. If we don't, then we could end up giving our customer five pennies when we could have simply used one nickel (though in binary, we just won't be able to complete our binary conversion!). Now our table looks like this:</p>\n<table style=\"text-align: center\">\n\n    <tr>\n\n        <td><u>&nbsp;&nbsp;<strong>0</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>4</sup></td>\n\n        <td>2<sup>3</sup></td>\n\n        <td>2<sup>2</sup></td>\n\n        <td>2<sup>1</sup></td>\n\n        <td>2<sup>0</sup></td>\n\n    </tr>\n\n</table>\n\n<p>Okay, now we've \"made change\" for 8 out of 14, so we have 6 to go. The next space is a 4, which is less than 6. So, we again want to put a 1 in that space to get:</p>\n<table style=\"text-align: center\">\n\n    <tr>\n\n        <td><u>&nbsp;&nbsp;<strong>0</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u></td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>4</sup></td>\n\n        <td>2<sup>3</sup></td>\n\n        <td>2<sup>2</sup></td>\n\n        <td>2<sup>1</sup></td>\n\n        <td>2<sup>0</sup></td>\n\n    </tr>\n\n</table>\n\n<p>Alrighty, 2 to go. That means the next space, the 2s place, must be a 1, since that would give us the grand total of 14 that we were looking for! We can mark the last remaining space with a 0. Our final table looks like this:</p>\n<table style=\"text-align: center\">\n\n    <tr>\n\n        <td><u>&nbsp;&nbsp;<strong>0</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>1</strong>&nbsp;&nbsp;</u></td>\n\n        <td><u>&nbsp;&nbsp;<strong>0</strong>&nbsp;&nbsp;</u></td>\n\n    </tr>\n\n    <tr>\n\n        <td>2<sup>4</sup></td>\n\n        <td>2<sup>3</sup></td>\n\n        <td>2<sup>2</sup></td>\n\n        <td>2<sup>1</sup></td>\n\n        <td>2<sup>0</sup></td>\n\n    </tr>\n\n</table>\n\n<p>Phew! The binary representation of 14 is 01110.</p>\n<h2>Adding Binary Numbers</h2>\n<p>Now that we can go back and forth between binary and decimal, let's try doing a bit of math. First, let's try adding together two binary numbers: 0011 and 0110. The naive way to go about this might be to convert 0011 to the decimal value 3, 0110 to the decimal value 6, add 6 and 3 to get 9, and finally convert 9 back to the binary value 1001. However, that felt like a lot of unnecessary steps (and kinda like cheating). Instead, we can add together binary values using the same process we've used since grade school for adding together decimal values.</p>\n<table>\n\n    <tr>\n\n        <td></td>\n\n        <td>0</td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n        <td>1</td>\n\n    </tr>\n\n    <tr style=\"border-bottom: 1px solid black\">\n\n        <td>+</td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n        <td>1</td>\n\n        <td>0</td>\n\n    </tr>\n\n</table>\n\n<p>We'll start at the rightmost column. We know that 1 + 0 must be 1, so we can fill in a 1 in our answer.</p>\n<table>\n\n    <tr>\n\n        <td></td>\n\n        <td>0</td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n        <td>1</td>\n\n    </tr>\n\n    <tr style=\"border-bottom: 1px solid black\">\n\n        <td>+</td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n        <td>1</td>\n\n        <td>0</td>\n\n    </tr>\n\n    <tr>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td>1</td>\n\n    </tr>\n\n</table>\n\n<p>Okay, now we have 1 + 1. We know that's equal to the decimal value 2, which is 10 in binary. Just like we do in the normal addition process, we'll want to fill in a 0 here and then carry the 1. Now, we have something that looks like this:</p>\n<table>\n\n    <tr>\n\n        <td></td>\n\n        <td></td>\n\n        <td>1</td>\n\n        <td></td>\n\n        <td></td>\n\n    </tr>\n\n    <tr>\n\n        <td></td>\n\n        <td>0</td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n        <td>1</td>\n\n    </tr>\n\n    <tr style=\"border-bottom: 1px solid black\">\n\n        <td>+</td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n        <td>1</td>\n\n        <td>0</td>\n\n    </tr>\n\n    <tr>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n    </tr>\n\n</table>\n\n<p>Alrighty, taking into account the 1 we just carried, we have the following for the next space:</p>\n<table>\n\n    <tr>\n\n        <td></td>\n\n        <td>1</td>\n\n        <td>1</td>\n\n        <td></td>\n\n        <td></td>\n\n    </tr>\n\n    <tr>\n\n        <td></td>\n\n        <td>0</td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n        <td>1</td>\n\n    </tr>\n\n    <tr style=\"border-bottom: 1px solid black\">\n\n        <td>+</td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n        <td>1</td>\n\n        <td>0</td>\n\n    </tr>\n\n    <tr>\n\n        <td></td>\n\n        <td></td>\n\n        <td>0</td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n    </tr>\n\n</table>\n\n<p>And now, we can finish this off without a hitch:</p>\n<table>\n\n    <tr>\n\n        <td></td>\n\n        <td>1</td>\n\n        <td>1</td>\n\n        <td></td>\n\n        <td></td>\n\n    </tr>\n\n    <tr>\n\n        <td></td>\n\n        <td>0</td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n        <td>1</td>\n\n    </tr>\n\n    <tr style=\"border-bottom: 1px solid black\">\n\n        <td>+</td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n        <td>1</td>\n\n        <td>0</td>\n\n    </tr>\n\n    <tr>\n\n        <td></td>\n\n        <td>1</td>\n\n        <td>0</td>\n\n        <td>0</td>\n\n        <td>1</td>\n\n    </tr>\n\n</table>\n\n<p>As a sanity check, we got: 0011 + 0110 = 1001. In decimal, 1001 is the number 9, which is indeed the number we expected to get!</p>\n<h2>Bitwise Operators</h2>\n<p>Great! We got exactly the answer we were expecting to get: 1001, or 9. Adding sure was fun, so let's try doing something else. Let's say we take that sequence of bits, 01001, and shift every bit one place to the left. Now, we'll get a sequence that looks like 10010. Turns out this is the binary representation of 18, which just so happens to be 9 &times; 2. Coincidence? Let's do the same thing with another random sequence of bits.... 0101001 looks good to me. In decimal, this is the value 41. Let's shift every bit to the left again, which gives us 1010010. This is in fact the number 82, which is again twice our original value.</p>\n<p>It turns out that shifting each bit of a binary number one place to the left is equivalent to doubling the number! If we shift bits to the left <em>n</em> times, then we'll double our number <em>n</em> times. Put another way, shifting bits left <em>n</em> times is the same as multiplying the number by 2<sup><em>n</em></sup>. What about shifting bits in the other direction, to the right? As you might have guessed, this the same as cutting the number in half <em>n</em> times, or dividing by 2<sup><em>n</em></sup>.</p>\n<p>So, why is this useful? As you probably learned in grade school, multiplying two large numbers together is a difficult and time-consuming thing to do. Turns out your computer feels the same way, as multiplication is an \"expensive\" operation for your computer to perform. However, it's pretty easy for computers (and us!) to shift the bits of a binary number to the left or to the right. So, shifting bits can make the process of multiplying large numbers much more efficient!</p>\n<h2>Negative Numbers in Binary</h2>\n<p>All of the numbers we've looked at so far have been greater than zero, or positive. We can, though, use binary to represent negative numbers as well. One approach would be to use the first bit in a binary number to designate whether the number is positive, which is called the <strong>sign-and-magnitude</strong> method. In this representation, 0001 would be a positive 1, while 1001 would be a -1. This works, but there are a few problems with this technique. First, it seems kinda wasteful to dedicate an entire bit just to representing whether or not the number is positive or negative. Second, this representation has multiple ways of expressing zero! For example, both 0000 and 1000 are interpreted as zero, even though -0 doesn't make any sense. That's gonna get pretty confusing! Finally, this representation doesn't allow us to add numbers together, which seems like it might be... a good thing to support. For example, 1001 + 0001 = 1010, which is like saying 1 - 1 = -2. Oops.</p>\n<p>Let's try a different way of representing negative numbers called <strong>two's complement</strong>. This will feel a bit weird at first, but you'll have to trust me on this one. Suppose we want to represent the number -5 using two's complement. We'll start with positive 5, which is simply 0101 in binary. First, we'll flip all of these bits: every 0 will become a 1, and every 1 will become a 0. This gives us 1010. Now, we'll add 1 to this number, which gives us 1011. This is the two's complement representation of 5. To convert back to a decimal, we'll use the exact same process as before, but now, the leftmost place (and only the leftmost place) will be a negative number rather than a positive number. In our example, rather than having an 8s place as we did before, we'll now have a -8s place, followed by the 4s place, 2s place, and 1s place that we're already used to. So, using two's complement, the decimal value of 1011 is:</p>\n<p>(1 &times; -8) + (0 &times; 4) + (1 &times; 2) + (1 &times; 1) = -5.</p>\n<p>Woah! That worked out well. With this representation, which admittedly feels a lot less intuitive, we're able to solve the problems we ran into with sign and magnitude: we're not really wasting a bit anymore, we have only one representation of zero, and addition works again. Let's just make sure quickly: 5 + -5 should be zero, and 1011 + 0101 = 0000 (dropping the last one that we carried). Sweet deal! Don't worry if two's complement is still a bit confusing, as we'll really only be dealing with positive numbers throughout.</p>\n<p>Hopefully jokes like this one now make a bit more sense!</p>\n<p><img alt=\"10 types\" src=\"/static/img/2-types.jpg\" /></p>\n<p>See, didn't that make it all worth it? Aaaaaand for those of you groaning because you've heard that joke a million times already:</p>\n<p><img alt=\"10 types burn\" src=\"/static/img/2-types-burn.gif\" /></p>\n<h2>Character Encodings</h2>\n<p>I dunno about you, but I'm getting tired of numbers. In fact, we probably use letters (and maybe other symbols) more than we use numbers on our computers. But, computers are still all about zeroes and ones, so how can we represent non-numeric values?</p>\n<p>To solve this problem, we can create a <strong>character encoding</strong>, which maps <em>something</em> to letters or symbols. For example, ships utilize a character encoding in which each letter is represented by a different flag. When a ship needs to broadcast a message consisting of English letters, the crew can fly a sequence of flags. Others can then understand this message because there exists a standardized, agreed-upon translation from flag to English letter. In case you're as curious as I was, here's the International Maritime Signal Flag character encoding:</p>\n<p><img alt=\"International Maritime Signal Flags\" src=\"/static/img/2-maritime.gif\" /></p>\n<p>You may also have heard of Morse Code, which is another character encoding. Here, each letter is represented by a series of sounds. Again, this standardized mapping allows us to transmit English messages without actually using any English letters.</p>\n<p><img src=\"/static/img/2-morse.jpg\" style=\"width: 600px\" alt=\"Morse Code\" /></p>\n<h2>ASCII</h2>\n<p>Since flags are a bit impractical for your computer, a character encoding called <strong>US-ASCII</strong> is instead more commonly used by computers. ASCII assigns different numbers to 128 different <strong>characters</strong>, where a character might be a letter, number, or symbol (or in some cases, Mickey Mouse). For example, the character \"A\" is represented by the number 65 in ASCII, and the character \"a\" is represented by the number 97. So, whenever we need to represent the character \"A\" using ASCII, we can simply use the number 65 instead, just like a ship would fly a blue and white flag. From your computer's perspective, then, the sequence of characters \"CS E-1\" could be represented by the sequence of decimal numbers \"67 83 32 69 45 49\", which ultimately will be stored as the sequence of binary numbers \"1000011 1010011 0100000 1000101 0101101 0110001\". Since we've already seen that binary can be used to represent numbers using only zeroes and ones, we can use ASCII to represent letters using zeroes and ones as well. Here's the complete ASCII table:</p>\n<p><img alt=\"ASCII Table\" src=\"/static/img/1-ascii.gif\" /></p>\n<p>By the way, how many bits do we need to represent an ASCII character? Well, we can see that the smallest ASCII value is 0, and the largest ASCII value is 127. In binary, we can represent 127 as 1111111, so we can represent any binary character using only 7 bits. Notice that if we instead wanted to represent just one more character using the number 128, we'd need an additional bit to obtain 10000000. Coincidence? I think not.</p>\n<h2>Unicode</h2>\n<p>The first 32 characters in the ASCII table are reserved for <strong>control sequences</strong>, which back in the day could be used to control physical devices like printers. Not only are those not so relevant any more, but what if we go to jolly old England and inquire as to the price of a spot of tea? The standard ASCII table doesn't have the character &pound;, but luckily, ASCII isn't the only character encoding around. While we also have an extended version of ASCII that is twice the size of US-ASCII, an encoding called <strong>UTF-8</strong> (a form of <strong>unicode</strong>) which contains definitions for 1,112,064 different characters, is much more common. In fact, there's a good chance that any website you're browsing is using UTF-8 (and there's a 100% chance this one is). Among the millions of UTF-8 characters are the \"snowman\" (&#9731;), \"heavy black heart\" (&#10084;), and even the \"neither less than nor greater than\" (&#8824;), not to be confused with the more common \"equal to\" (=). In addition to these clearly necessary characters, UTF-8 does in fact contain definitions for all the basic letters, numbers, and symbols in the ASCII table (I know, boring). But, at the end of the day, that UTF-8 snowman is really just represented as a series of bits that can be translated into a winter wonderland using the agreed-upon standard set by the character encoding.</p>\n<p>As we start using these character encodings to create long messages, we're going to create larger and larger sequences of bits. It makes sense, then, to create units of information larger than a single bit. A sequence of 8 bits is commonly referred to as a <strong>byte</strong>. By the way, the official technical term for a sequence of 4 bits is a <strong>nibble</strong>, ha, ha, ha. Since a byte is still a pretty small piece of information, describing data in terms of <strong>kilobytes</strong> (where 1 kilobyte is about 1000 bytes), <strong>megabytes</strong> (where 1 megabyte is about 1000 kilobytes), and <strong>gigabytes</strong> (where, you guessed it, 1 gigabyte is about 1000 megabytes) has become commonplace. More on that later, though!</p>\n<p>That's it for binary and ASCII! In the next few sections, we'll start to see how your computer uses and stores data.</p>", "title": "Binary, ASCII, and Everything In Bit-ween", "id": "binary", "tags": ["ASCII", "Binary", "Bits", "UTF-8"], "sequence": 1}, "cpu": {"content": "<h2>Introduction</h2>\n<p>Now that you know all about 01100010 01101001 01110100 01110011, let's take a look at how your computer... computes! At the heart of your computer is the <strong>central processing unit</strong>, or <strong>CPU</strong>. The CPU is responsible for executing the instructions that make your computer <em>do</em> things, whether that be printing an important-looking spreadsheet or downloading a cat video. For example, if you click the Google Chrome icon on your desktop, your CPU will be sent instructions that say something like \"Please open up Google Chrome!\" Then, as Chrome is starting up, it will probably load instructions that say something like \"Please go to www.google.com!\" (Or if you're me, a page like <a href=\"http://www.catgifpage.com/\">this</a> is more likely to open up). Though the CPU is what puts the \"compute\" in \"computer,\" it's actually pretty small, measuring a few inches in size. Here are a few modern CPUs that could be found in the computer you're using right now.</p>\n<p><img alt=\"CPUs\" src=\"/static/img/3-cpus.jpg\" /></p>\n<h2>A Quick History Lesson</h2>\n<p>Turns out that computing hardware wasn't always that small. One of the first computers capable of executing stored instructions was EDVAC (Electronic Discrete Variable Automatic Computer), developed in the mid-1940s for the United States Army by the University of Pennsylvania. Weighing almost 9 tons and covering about 500 square feet, EDVAC could add two numbers together in about 850 microseconds.</p>\n<p><img alt=\"EDVAC\" src=\"/static/img/3-edvac.jpg\" /></p>\n<p>Another one of the first stored-instruction computers was also developed on the East Coast. The Harvard Mark I, which still lives partly in the campus's Science Center down, was developed for the United States Navy also in the mid-1940s. The Mark I could execute instructions specified on paper punch cards, and mathematical operations like logarithms took over a minute.</p>\n<p><img alt=\"Harvard Mark I\" src=\"/static/img/3-harvard.jpg\" /></p>\n<h2>Processes</h2>\n<p>The CPU's main job is to handle the execution of <strong>processes</strong>, or instances of programs being executed. For example, when I opened up Apple Keynote to make a presentation, my operating system kicked off a new process for the CPU to run containing some instructions for Keynote. Most operating systems will let you view the processes that are currently executing on your machine; on Windows, you can (infamously) press Ctrl-Alt-Delete to open up the task manager, while on Mac OS X, you can open a program called the Activity Manager, shown below.</p>\n<p><img alt=\"Activity Manager\" src=\"/static/img/3-processes.png\" /></p>\n<p>Each of these rows represents a different process, and we can see how CPU-intensive each process is, how much memory it's consuming, and so on. If your computer starts to slow down, applications like the Task Manager on Windows and Activity Manager on Mac can be useful for identifying which currently-running process is the culprit (as a result of memory or CPU greed). These applications also allow you to <strong>kill</strong>, or shut down, processes that are hanging or no longer responding, to help you regain control of your runaway CPU. Of course, your programs don't particularly like being killed, so only use this feature if you absolutely have to!</p>\n<h2>CPU Instructions</h2>\n<p>CPUs don't understand English sentences like \"open Google Chrome\" (yet, anyway). In reality, the instructions that can be understood by a CPU are much more primitive. What we would consider a simple task (like reading an email) actually requires a huge number of CPU instructions to complete, since each individual instruction is so simple and low-level. So, CPUs will be given sequences of these small instructions that work together to create some larger functionality like displaying a message from your email inbox. For example, reading an email requires your computer to download the email, display its contents, remember that the message has been read, and so on. Then, the task of displaying an email can be broken down even further, as your computer has to figure out what font to use, determine what color the text should be drawn in, and actually display something on your screen. Even at this level, these instructions are still at a much, much more complex than the instructions understood by a CPU; in many cases, a CPU instruction is a task that can't be broken down much further.</p>\n<p>More realistic CPU instructions could include \"add two numbers together,\" \"flip the fourth bit in this 4-byte number,\" or \"determine if these two numbers are equal.\" Doesn't get much simpler than that! But, Angry Birds is in fact really just a very long sequence of super simple instructions like these.</p>\n<p>The list of all the different types of instructions that can be understood by a CPU is called its <strong>instruction set</strong>. Not all CPUs are alike, which means a CPU manufactured by AMD may understand a different set of instructions than a CPU made by Intel does. Similarly, an Intel CPU made today and an Intel CPU made a few years ago may also have different instruction sets. The instructions in a CPU's instruction set can be broken up into three main groups: data, arithmetic, and control flow.</p>\n<ul>\n<li>\n<p><strong>Data</strong> instructions involve retrieving or storing data in the computer's memory. For example, saving a document in Microsoft Word requires a sequence of instructions that involves creating or updating a Word document that you can access later. Similarly, playing a song in iTunes requires a sequence of instructions that somehow opens up a music file. We'll take a much closer look at data in the next section!</p>\n</li>\n<li>\n<p><strong>Arithmetic</strong> instructions are just what they sound like: it's very common for the CPU to perform mathematical operations. The CPU can add, subtract, multiply, and divide, as well as compare numbers and perform operations on the individual bits of a number. Arithmetic CPU instructions aren't particularly fancy; you won't find instructions for derivatives or integrals in your CPU's instruction set. However, your CPU's arithmetic is screaming fast and very accurate.</p>\n</li>\n<li>\n<p><strong>Control flow</strong> instructions help the CPU decide what to do next. For example, a sequence of instructions may contain a built-in fork in the road; based on your computer's current state, the CPU might decide to skip over a few instructions or repeat some instructions. Much more on this topic a bit later, but for now, just remember that some instructions can affect the order in which other instructions are executed!</p>\n</li>\n</ul>\n<p>Each of these instructions is represented with a unique number called an <strong>opcode</strong>, which is short for \"operation code.\" Any additional data used by an opcode are called <strong>operands</strong>. For example, if an arithmetic instruction tells the CPU to add two numbers, the CPU is going to need to know what numbers to add. Since both opcodes and operands are represented with numbers, all of the instructions passed to a CPU can be expressed in binary. In that sense, then, everything your computer does really does boil down to the zeroes and ones we saw earlier.</p>\n<h2>The CPU Pipeline</h2>\n<p>Let's take a look at how the CPU actually goes about executing these instructions. One of the main goals of a CPU is to be as fast as possible, which allows smart people at NASA to land on Mars and people like us to watch as many <a href=\"http://www.youtube.com/watch?v=0Bmhjf0rKe8\">cat videos</a> as we can handle. To do so, the CPU runs each instruction through a <strong>pipeline</strong>, which is just like a factory assembly line. The task of building a car can be completed in a sequence of phases, so an assembly line will typically have a number of separate machines dedicated to performing a single task, whether that be securing a wheel or attaching a super-fly hood ornament. Once a machine completes its job, the car is one step closer to reaching completion, and the machine is ready to perform that same task on the next car to come through the assembly line.</p>\n<p>In our <strike>assembly</strike> CPU pipeline, we'll be executing a single instruction rather than building a car. We have four different machines to help us complete the task (though this is just one general, simple pipeline, and your CPU's pipeline might actually have different phases):</p>\n<ul>\n<li>\n<p><strong>Fetch</strong>. The first thing the CPU needs to do is... figure out what to do! Recall that our CPU will be executing some sequence of tasks. So, the fetch phase of the pipeline is responsible for determining the instruction that actually needs to be executed next.</p>\n</li>\n<li>\n<p><strong>Decode</strong>. Remember, our CPU's instructions are actually given as opcodes and operands that are represented using zeros and ones. The decode phase of the pipeline is responsible for figuring out what those zeroes and ones actually mean. After this phase is complete, the CPU knows exactly what it needs to do to execute the instruction.</p>\n</li>\n<li>\n<p><strong>Execute</strong>. This is the meat and potatoes. The execute phase does just that: runs the requested computation. Here's where your CPU will obediently perform an arithmetic operation, grab something from memory, or whatever else it's asked to do.</p>\n</li>\n<li>\n<p><strong>Writeback</strong>. Our fourth and final stage is where we store the result of the computation. The execute phase just went through all that trouble to perform a computation, so we don't want to just throw that away. So, the writeback phase will write the result to memory somewhere, often in a special location on the CPU itself, so the result of the instruction can be used later. More on memory in the next section!</p>\n</li>\n</ul>\n<p>And that's it! Let's try running an instruction through this pipeline. First, the fetch phase will determine what instruction should be run by the CPU next. Since these instructions will be represented as binary in memory, an instruction could look something like 0000001001010011 (by the way, how many bytes is that?). This doesn't make much sense yet, so next, the decode phase will be run in order to determine what this sequence of bits means. As an example, the CPU could determine that the first 8 bits of this instruction, 00000010, tell the CPU what it should be doing, and the decimal value \"2\" might correspond to the \"add\" instruction. Then, the decode phase could determine that the remaining 8 bits describe two 4-bit numbers that are to be added together, which in this case are 0101 and 0011, or 5 and 3. Now that the decode phase has uncovered the mystery behind our sequence of bits, the execute phase can begin, and the CPU will actually perform the addition and obtain an answer of 8. Finally, the writeback phase will remember that result, so perhaps another instruction can use it later.</p>\n<p>Every instruction that the CPUs runs will have to go through all four of these phases. Because the CPU is constantly running instructions, moving instructions through the CPU pipeline is a cyclic process. Visually, running four instructions through our pipeline looks something like the below, where each block in the diagram represents a single CPU <strong>cycle</strong>.</p>\n<table class=\"pipeline\" style=\"text-align: center\">\n\n    <tr>\n\n        <td></td>\n\n        <td>1</td>\n\n        <td class=\"fetch\">F</td>\n\n        <td class=\"decode\">D</td>\n\n        <td class=\"execute\">E</td>\n\n        <td class=\"writeback\">W</td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n    </tr>\n\n    <tr>\n\n        <td style=\"position: absolute; margin-top: 40px; margin-left: -5px\">Instruction</td>\n\n        <td>2</td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td class=\"fetch\">F</td>\n\n        <td class=\"decode\">D</td>\n\n        <td class=\"execute\">E</td>\n\n        <td class=\"writeback\">W</td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n    </tr>\n\n    <tr>\n\n        <td style=\"color: white\">Instruction</td>\n\n        <td>3</td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td class=\"fetch\">F</td>\n\n        <td class=\"decode\">D</td>\n\n        <td class=\"execute\">E</td>\n\n        <td class=\"writeback\">W</td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n    </tr>\n\n    <tr>\n\n        <td></td>\n\n        <td>4</td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td class=\"fetch\">F</td>\n\n        <td class=\"decode\">D</td>\n\n        <td class=\"execute\">E</td>\n\n        <td class=\"writeback\">W</td>\n\n    </tr>\n\n    <tr>\n\n        <td></td>\n\n        <td></td>\n\n        <td>1</td>\n\n        <td>2</td>\n\n        <td>3</td>\n\n        <td>4</td>\n\n        <td>5</td>\n\n        <td>6</td>\n\n        <td>7</td>\n\n        <td>8</td>\n\n        <td>9</td>\n\n        <td>10</td>\n\n        <td>11</td>\n\n        <td>12</td>\n\n        <td>13</td>\n\n        <td>14</td>\n\n        <td>15</td>\n\n        <td>16</td>\n\n    </tr>\n\n    <tr>\n\n        <td colspan=\"17\">Clock Cycle</td>\n\n    </tr>\n\n</table>\n\n<p>Here, each color represents a different part of the CPU pipeline. It takes one clock cycle to fetch an instruction, one to decode it, one to execute it, and one to write the result. Once the first instruction has completed, the CPU moves on to the second instruction, which goes through the same steps as the first.</p>\n<h2>Parallelism</h2>\n<p>Executing only one instruction at a time doesn't feel very efficient! Once the fetch \"machine\" in the CPU pipeline finishes its job, it sits dormant until the current instruction has made its way through the entire pipeline. If this were a real assembly line, then only one car would ever be present on the assembly line at one time! (And if I were in charge, I'd probably be fired by now.) Because different parts of the CPU handle different parts of the pipeline, we can be more efficient through multi-tasking, or <strong>parallelism</strong>. Rather than waiting for the rest of the pipeline to finish an instruction, the CPU can start fetching the <em>next</em> instruction before the current one completes! That way, the CPU is wasting a lot less time, since no \"machine\" is dormant so long as there are more instructions to process. Our new, more efficient pipeline now looks something lke this:</p>\n<table class=\"pipeline\" style=\"text-align: center\">\n\n    <tr>\n\n        <td></td>\n\n        <td>1</td>\n\n        <td class=\"fetch\">F</td>\n\n        <td class=\"decode\">D</td>\n\n        <td class=\"execute\">E</td>\n\n        <td class=\"writeback\">W</td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n    </tr>\n\n    <tr>\n\n        <td style=\"position: absolute; margin-top: 40px; margin-left: -5px\">Instruction</td>\n\n        <td>2</td>\n\n        <td></td>\n\n        <td class=\"fetch\">F</td>\n\n        <td class=\"decode\">D</td>\n\n        <td class=\"execute\">E</td>\n\n        <td class=\"writeback\">W</td>\n\n        <td></td>\n\n        <td></td>\n\n    </tr>\n\n    <tr>\n\n        <td style=\"color: white\">Instruction</td>\n\n        <td>3</td>\n\n        <td></td>\n\n        <td></td>\n\n        <td class=\"fetch\">F</td>\n\n        <td class=\"decode\">D</td>\n\n        <td class=\"execute\">E</td>\n\n        <td class=\"writeback\">W</td>\n\n        <td></td>\n\n    </tr>\n\n    <tr>\n\n        <td></td>\n\n        <td>4</td>\n\n        <td></td>\n\n        <td></td>\n\n        <td></td>\n\n        <td class=\"fetch\">F</td>\n\n        <td class=\"decode\">D</td>\n\n        <td class=\"execute\">E</td>\n\n        <td class=\"writeback\">W</td>\n\n    </tr>\n\n    <tr>\n\n        <td></td>\n\n        <td></td>\n\n        <td>1</td>\n\n        <td>2</td>\n\n        <td>3</td>\n\n        <td>4</td>\n\n        <td>5</td>\n\n        <td>6</td>\n\n        <td>7</td>\n\n    </tr>\n\n    <tr>\n\n        <td colspan=\"8\">Clock Cycle</td>\n\n    </tr>\n\n</table>\n\n<p>Sweet deal, we're much more efficient now! What once took us 16 cycles to complete now takes only 7 cycles! Not bad at all, if you ask me. So, we were able to make our CPU significantly faster by taking advantage of the fact that we can execute different stages of the pipeline in parallel, or at the same time.</p>\n<h2>Multi-Core Architectures</h2>\n<p>Parallelizing at the instruction level isn't the only way to improve the performance of CPUs. While shopping for a new computer, you may have seen advertisements for <strong>dual-core</strong> or <strong>quad-core</strong> CPUs on new machines. In general, <strong>multi-core</strong> processors combine multiple CPUs into one, so at any given time, a multi-core processor can be executing multiple pipelines at once. When you use your computer, there's a good chance you don't just have one program running at once. For example, right now, I'm listening to music on Spotify, checking email on Chrome, and typing this in a text editor. Each of these programs is probably issuing a different sequence of instructions to my laptop's CPU. If I only had a single core, then each of these separate instruction sets would have to go through the same pipeline, with my CPU figuring out how to execute things in a fair order so all of my programs could run at once. However, with multiple cores, these different sequences of instructions can be sent to different cores, which effectively allows the CPU to do more than one thing at the same time! That means the CPU can more effecively deal with running more than one program at once, which creates a better experience for you as a computer user.</p>\n<p>A dual-core CPU has two cores, which is just like having two CPUs on your machine. Similarly, a quad-core CPU has four cores, while higher performance machines may have hexa-core (6) or octa-core (8) CPUs. Believe it or not, CPUs with 16, 32, and even 64 cores exist as you're reading this right now! However, adding more cores to your CPU won't necessarily make all software perform better. In fact, many computer programs were written before multi-core processors were commonly found in consumer computers. If these programs were written with only a single core in mind, then the existence of other cores won't really help if they're not taken advantage of by the software!</p>\n<h2>A Parallel Problem</h2>\n<p>Let's look at a problem that we can solve more efficiently using parallelism, which allows us to do more than one thing at once. While cleaning my room for the first time in months, I stumbled upon a piggy bank that was full of change. Now, I'd like to know if I have enough money to finance a long-awaited cruise to the Bahamas. If it's just me and my lonesome, then I can plop down on the floor and individually count each coin separately. However, if it looks like there's a lot to count, the first thing I'll probably do is call in some friends to help me. Let's say I find seven friends (which is a lot for me) to help count. We'll try to divy up the coins as evenly as possible among the eight of us, and then we'll all start counting at the same time. Because each individual person has 1/8th of the total number of coins to count, it would take me 8 times longer to count all of the coins by myself.</p>\n<p>Once all the coins have been counted, we have a new problem: we have 8 different people with 8 different counts, but I'm looking for a single total count. So, we need to figure out a way to aggregate everyone's separate totals. The simplest way to do that would be for me to ask each of my friends individually what his or her total is, and add everything together as I go along. But, this sounds like it's going to take a while. While all of my friends were able to count their coins in <em>parallel</em>, I have to add everything up one-by-one in <em>serial</em>.</p>\n<p>That doesn't sound so bad, but let's think about how we can make this faster. One way I can speed up is to grab even more friends to start counting for me. Because everyone is counting at the same time, it makes sense that the more people I get to help me, the faster we can get all of the coins counted. Let's say that I'm so popular that I get as many people to help as I have coins. That means that each person has only one coin to count! Couldn't get much faster than that, right? Well, now it's time for me to add everything up again&mdash;how long will it take me to do that? If each of my friends has only one coin, then I need to count every single one of my friends to get a total, which is no better than simply counting the coins myself!</p>\n<p>Hmmm, looks like we need to come up with a better way of counting everyone's totals. It seems like the main problem with our approach is that I'm counting everything individually, so let's make this a bit more parallel. Rather than having me ask all of my friends what their total is, let's instead have our friends tell each other what their total is. We'll have my 8 friends pair off and add their numbers together, which will give us 4 new totals. In this approach, we can calculate these 4 new totals all at the same time, since each friend is only talking to the other friend in the pair. Now, one friend from each pair can go home, while the other friend from the pair needs to remember the new total. We can repeat this process now, this time going from 4 separate totals to 2 separate totals and sending two friends home. If we do this one more time, then we've figured out the total we originally wanted to count! In our original approach, it would have taken me 8 steps to figure out the total, since I needed to talk to all 8 friends. Now, it only took us 3 steps! Remember, it took one step to go from 8 totals to 4 totals, another step to go from 4 to 2, and a final step to go from 2 to 1. So, it looks like our parallel way of counting everything allowed us to solve the problem in less than half as many steps! Not bad, eh?</p>\n<h2>CPU Performance</h2>\n<p>There isn't one silver bullet when it comes to comparing the performance of two CPUs. A CPU's <strong>clock speed</strong>, nowadays measured in gigahertz (GHz), describes the rate at which the CPU executes instructions. Specifically, the clock speed measures how many cycles the CPU can complete in one second. A higher clock speed means that the CPU can execute more instructions in a single second, so a CPU with a higher clock speed will perform faster than an otherwise identical CPU with a lower clock speed. The clock speed of CPUs has been rising over the past several decades largely due to a trend known as <strong>Moore's Law</strong>, which essentially states that processing power will double every 18 months. Really, Moore's Law refers to the number of transistors (the fundamental electronic components that operate on electrical signals) on integrated circuits (like CPU chips) doubling, but we won't worry too much about the specifics of that.</p>\n<p><img alt=\"Moore's Law\" src=\"/static/img/3-moore.png\" /></p>\n<p>However, other factors also influence the overall performance of a CPU, so simply comparing the clock speeds of two CPUs won't necessarily tell you which is faster. As we've seen, parallelism is an important contributor to the performance of modern processors. So, processors with two or four cores may have better performance than their single-core equivalents. The instruction set of a CPU can also affect its performance. For example, if one processor can complete a task using one instruction that takes another processor five instructions, then naturally, it may be able to complete certain tasks faster even at a lower clock speed. Finally, the size of a CPU's pipeline can affect its performance, as explained in the video below. In this 2001 MacWorld keynote, Apple coined the term \"Megahertz Myth\" to describe the issues surrounding the comparison of two CPUs using only clock speed. The pipeline animation is pretty fancy for the early 2000s.</p>\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/PKF9GOE2q38\" frameborder=\"0\"> </iframe>\n\n<p>Thanks, Steve! 2001 was definitely one of the most technical Apple Keynotes... ever. In honor of Apple's founder and CEO, here's our \"one more thing\": a detailed look into the process of fabricating a CPU, which might be a bit crazier than you expect!</p>\n<iframe width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/UvluuAIiA50\" frameborder=\"0\"> </iframe>\n\n<p>And this concludes our discussion of processors. Next, we'll see how your computer stores the results of all those computations!</p>", "title": "C-3PU: Human Processing Relations", "id": "cpu", "tags": ["Clock Cycles", "CPUs", "Instruction Sets", "Parallelism", "Pipelines"], "sequence": 2}, "memory": {"content": "<h2>Introduction</h2>\n<p>As promised, we'll now take a look at what your CPU does with those millions of computations per second. Just like you have the ability to recall memories, your computer has the ability to store information for both the short and long term. As you might expect, the space reserved for short-term memory is generally smaller and easier to access, while the hardware dedicated to long-term memory is usually larger and more time-consuming to use. We'll begin our exploration of the various types of memory with the smallest and fastest available to the computer and work our way up to the biggest and baddest!</p>\n<h2>Data Size</h2>\n<p>First, though, let's review some terms that describe the size of data. The smallest piece of data we can represent in memory is a single <strong>bit</strong>, which is simply a zero or a one. It's not usually that useful to describe data using such a small unit, so we usually talk about data in terms of <strong>bytes</strong>, where one byte is simply 8 bits. As we saw, one byte is roughly the size of an ASCII character (which is technically 7 bits). Still pretty small, so we can make like the metric system and add some prefixes. One <strong>kilobyte</strong> is equal to 1000 bytes (or more precisely, 1024 bytes, depending on who you ask), and kilobyte is frequently abbreviated as <strong>KB</strong>. A Word document with a couple pages of text (i.e., no images) is between 5-15 kilobytes, that picture of the Harvard Mark I from the previous section is about 130 KB in size, and the text of books like <em>The Adventures of Tom Sawyer</em> and <em>Frankenstein's Monster</em> are just under 500 KB.</p>\n<p>Next up is a <strong>megabyte</strong>, which is the same as 1000 kilobytes and abbreviated as <strong>MB</strong>. A high resolution image will probably come in at a few megabytes, as will MP3s of popular songs. Ke$ha's masterpiece \"We R Who We R\", which is 3 minutes and 25 seconds of pure artistry, measures about 3 megabytes, while everyone's favorite party song, the \"Cha Cha Slide\" by DJ Casper, is about 6 MB at 6 minutes and 19 seconds long. CDs can hold about 700 megabytes of data.</p>\n<p>After a megabyte comes a <strong>gigabyte</strong>, which is equal to 1000 megabytes and abbreviated <strong>GB</strong>. A standard-definition movie downloaded from iTunes is probably around a gigabyte in size, while high-definition Blu-Ray disks can hold about 25 GB. Shopping for a new computer, you'll often see the total storage capacity of hard drives (more on those in a bit) given in terms of gigabytes as well. A <strong>terabyte</strong> (<strong>TB</strong>) is equivalent to 1000 megabytes, and the printed collection of the Library of Congress is roughly 10 TB. After a terabyte is a <strong>petabyte</strong> (<strong>PB</strong>) followed by an <strong>exabyte</strong>; as a point of reference, the text of all words ever spoken by human beings is esimated to come in at a few exabytes.</p>\n<p>To recap:</p>\n<table class=\"table table-bordered\">\n\n    <thead>\n\n        <tr>\n\n            <th>Name</th>\n\n            <th>Abbreviation</th>\n\n            <th>Size in bytes</th>\n\n            <th>Storage example</th>\n\n        </tr>\n\n    </thead>\n\n    <tbody>\n\n        <tr>\n\n            <td>Byte</td>\n\n            <td>B</td>\n\n            <td>8 bits</td>\n\n            <td>Characters of text</td>\n\n        </tr>\n\n        <tr>\n\n            <td>Kilobyte</td>\n\n            <td>KB</td>\n\n            <td>10<sup>3</sup> bytes</td>\n\n            <td>Word document, small image</td>\n\n        </tr>\n\n        <tr>\n\n            <td>Megabyte</td>\n\n            <td>MB</td>\n\n            <td>10<sup>6</sup> bytes</td>\n\n            <td>MP3 song, large image</td>\n\n        </tr>\n\n        <tr>\n\n            <td>Gigabyte</td>\n\n            <td>GB</td>\n\n            <td>10<sup>9</sup> bytes</td>\n\n            <td>Movie, ~350 photos, ~250 songs</td>\n\n        </tr>\n\n        <tr>\n\n            <td>Terabyte</td>\n\n            <td>TB</td>\n\n            <td>10<sup>12</sup> bytes</td>\n\n            <td>~350,000 photos, ~250,000 songs</td>\n\n        </tr>\n\n    </tbody>\n\n</table>\n\n<h2>Registers</h2>\n<p>Just when you thought we were done talking about the CPU, we're going to start there. Turns out that a few different types of memory are actually found directly on the CPU. The smallest and fastest memory on the CPU is found in <strong>registers</strong>. Registers hold extremely small amounts of data, on the order of several bytes. Earlier, when we said that a CPU could add two numbers together, we took for granted where those numbers would be coming from and where the answer would go. That's where registers come in! While the CPU is in the process of adding two numbers together, both numbers are stored in registers, and once the CPU has computed the answer, the result is also stored in a register. Registers are also used to keep track of things like the instruction that is currently being decoded or executed as well as what instruction should be put into the pipeline next. Since registers are so small, there's not much more that could even fit in a CPU register. But, in order for the CPU to quickly perform operations like addition, accessing register data must be extremely fast, so there's a bit of a trade-off between the size of the memory and the speed of the memory. In fact, we'll see this trade-off become a trend throughout this section! The number of registers on a CPU can vary, with some CPUs having just 16 registers and others having as many as 256 registers.</p>\n<h2>RAM</h2>\n<p>Okay, but a few registers that can't hold much more than a 32-bit number don't seem sufficient for playing a several megabyte song or watching a several gigabyte movie. In order to efficiently handle tasks like these, we'll need some short-term memory with a larger capacity. That's where <strong>RAM</strong>, or Random-Access Memory, comes in. RAM is a block of memory that can be used by currently-running process to store larger pieces of data for a longer amount of time. For example, a web browser might need to store what website you're currently browsing, and your email client might need to store all of the emails in your inbox. So, the more RAM you have, the more space you have available for processes to store information. Because all of the currently-running processes on your computer will probably need to utilize RAM for short-term storage, having more RAM in your computer will allow you to run more programs at the same time efficiently. A laptop on today's market will likely have between four and eight gigabytes of RAM, so we're talking <em>much</em> more space than something like a CPU register. In fact, when you see any language that refers to the amount of \"memory\" in a computer, there's a very good chance it's referring to RAM, since RAM is the main source of short-term memory in your computer. Here's what a modern stick of RAM (in this case, with the ability to hold 512 MB) looks like.</p>\n<p><img alt=\"RAM\" src=\"/static/img/4-dram.jpg\" /></p>\n<p>Your laptop probably contains at least a couple sticks of RAM. The CPU has the ability to <em>read</em> values from RAM (i.e., access already-stored data) and <em>write</em> values to RAM (i.e., store new data). We can think about RAM as a really long street with lots of houses. Each house has an <strong>address</strong>, which is simply a unique whole number starting from zero, that is used to identify it. Each one of these houses can store exactly one byte (remember, 8 bits!) of data. So, the total number of houses available to your computer depends on the total size of the available RAM. With 2 GB of RAM, for example, your computer will have about two billion houses, and with 4 GB of RAM, your computer will have about four billion houses. That's one heck of a block party if you ask me. When the CPU needs to read or write information from RAM, it will do so using a memory address. For example, let's say the following represents a portion of RAM; the bits inside each block represent the data stored at each address.</p>\n<table id=\"ram\">\n\n    <tr>\n\n        <td>00110110</td>\n\n        <td>00000000</td>\n\n        <td>00000000</td>\n\n        <td>00000101</td>\n\n        <td>00111001</td>\n\n        <td>10101011</td>\n\n    </tr>\n\n    <tr>\n\n        <td>100</td>\n\n        <td>101</td>\n\n        <td>102</td>\n\n        <td>103</td>\n\n        <td>104</td>\n\n        <td>105</td>\n\n    </tr>\n\n</table>\n\n<p>Because each block can only hold one byte, data that is larger than that will have to be split up into single-byte blocks. Let's say that a 32-bit (aka 4-byte) number has been broken up into chunks and stored at the addresses 101-104. In order to read that number, the CPU will first ask for the data stored at the address 101, where the number starts (i.e., where the leftmost bits are found). Now, it will read the next three boxes, since the CPU knows its looking for a 4-byte number. Putting these four blocks of memory together, we can see that the number stored at the address 101 in RAM is 00000000000000000000010100111001, or 1337.</p>\n<h2>Endian-ness</h2>\n<table id=\"ram\">\n\n    <tr>\n\n        <td>00110110</td>\n\n        <td>00000000</td>\n\n        <td>00000000</td>\n\n        <td>00000101</td>\n\n        <td>00111001</td>\n\n        <td>10101011</td>\n\n    </tr>\n\n    <tr>\n\n        <td>100</td>\n\n        <td>101</td>\n\n        <td>102</td>\n\n        <td>103</td>\n\n        <td>104</td>\n\n        <td>105</td>\n\n    </tr>\n\n</table>\n\n<p>We call this way of representing numbers in RAM&mdash;in which the bytes are read from left to right&mdash;<strong>big-endian</strong>. Here, the most significant byte, or the \"first\" byte of the data, is stored at a lower address than the least significant byte, or the \"last\" byte of the data. It's actually not uncommon for computers to instead use <strong>little-endian</strong> and store bytes \"backwards,\" with more significant bytes stored at <em>higher</em> addresses in memory. In the above example, if we were instead using a little-endian representation and read the same memory addresses (101-104) again, we would instead get the number 00111001000001010000000000000000, or 956,628,992. Notice how we didn't change the order of the bits in each memory slot. Instead, we only changed the order in which the 8-bit (or 1-byte) blocks of data were read: first, we read the sequence of bits from address 104, then the bits from address 103, and so on. Whether data is stored using a big-endian or little-endian representation is up to the CPU!</p>\n<p>The \"Random-Access\" part of RAM refers to the fact that accessing any address in RAM takes the same amount of time. It's no faster, for example, to access the information stored at the address 0 than it is to access the information stored at the address 1048576. As we'll see shortly, this isn't the case with all types of memory.</p>\n<h2>Caching</h2>\n<p>Accessing data stored in RAM is significantly slower than accessing data stored in a CPU register. In fact, the CPU can typically complete a cycle much faster than it can read a value from RAM, so the CPU could waste cycles waiting for a value to be read from RAM. In order to increase efficiency and waste less time, the CPU also utilizes a layer of storage called the <strong>processor cache</strong>. Not only is the cache physically located closer to the CPU, but data stored on the cache can be accessed more quickly than data stored in RAM because of its hardware. In many cases, the CPU will need to use some value from RAM more than once, just like you might listen to a song on repeat. In my case, such a song would likely be something by <a href=\"http://www.youtube.com/watch?v=lAhHNCfA7NI\">Alexandra Stan</a>. Rather than going all the way to RAM multiple times to grab a frequently-accessed value, the CPU might instead place it on the cache after getting the value once from RAM, where it can be fetched much more quickly in the future. Now, the next time the CPU needs that value, your computer can take a much shorter trip to the cache to get it, rather than going all the way to RAM. Caching is actually a pretty common technique in computing in general; when we know that a task is going to take a significant amount of time, we can instead remember already-computed results for some amount of time so we don't need to waste time getting them again. Here's how your computer's memory might be laid out, taking the cache into account.</p>\n<p><img alt=\"Cache structure\" src=\"/static/img/3-cache.gif\" /></p>\n<p>Processor caches are able to hold significantly less data than RAM. As shown in the above diagram, computers typically have several <strong>levels</strong> of caches, each having different sizes and speeds. The <strong>L1 cache</strong> is the smallest, fastest, and closest to the CPU, and the L1 cache typically comprises several (e.g., 32 or 64) kilobytes in size. Next up is the <strong>L2 cache</strong>, which is typically a bit farther away from the CPU and slower to access, but usually holds up to several megabytes (e.g., 4 or 8) of data. Finally, the <strong>L3 cache</strong> is even slower, but can hold even more data. Not all CPUs have all three levels of caches&mdash;some CPUs don't utilize an L1 cache, while others don't have an L3 cache. All that being said, accessing data in the CPU cache is still <em>much</em> faster than accessing data from RAM.</p>\n<p>I love to cook, and the way I (and most people) work in the kitchen isn't all too unlike the CPU cache hierarchy. When I'm cutting vegetables, I usually have a knife in one hand and a vegetable in the other. I only have two hands, so I can't hold much more than that, but the items that are already in my hands are the ones I can use the fastest. Sounds like a CPU register to me. If I'm going to be making a salad, I'll probably put several vegetables on my counter, since I know I'm going to need them all. It takes a little longer to grab a tomato a few inches away from the cutting board than it does for me to grab the knife already in my hand, but it's still pretty fast. I knew I was going to need to use those vegetables, so I placed them on my L1 cache, or my counter. Before I started cooking, I planned out my delicious meal, went to the grocery store, and made sure everything I needed was readily available in my kitchen. It takes me a bit of time to grab something from the fridge if I'm standing at the counter, but I still wouldn't consider that to be too much time at all. So, my kitchen is like my L2 cache. Finally, if I realize I forgot something, I can always head back to the store down the street to pick it up. Compared to a grocery store, my kitchen doesn't have that much space. However, it would take me considerably longer to do so, just like reading data from RAM takes a lot longer than reading from the cache.</p>\n<h2>Hard Drives</h2>\n<p>So far, we've only talked about computers' short-term memory. RAM, though the largest form of storage we've seen so far, typically has a maximum capacity of several gigabytes. However, the tens of gigabytes that make up my music and movie collection (and only when I'm <em>particularly</em> bored will I watch several movies at the same time) need to go somewhere!</p>\n<p>Your computer's <strong>hard drive</strong> is its primary form of long-term storage. Unlike RAM, which holds only a few gigabytes, you'll find that modern hard drives often hold 500, 750, or 1000+ GB. Hard disks, or <strong>HDD</strong>s, are typically 3.5\" in size in desktop computers and 2.5\" in size on laptops. As shown below, a typical hard disk consists of several circular <strong>platters</strong> that don't look all that dissimilar from CDs. Each platter is coated in a thin layer of magnetic material that is used to encode information. A few sections ago, we said that a binary encoding could be used to represent the sign of a magnet, which can be positive (+) or negative (-). It just so happens that this is exactly how a hard disk represents information: a positive magnetic charge could represent a 1, and a negative magnetic charge could represent a 0. I know, it feels like an episode of <a href=\"http://www.youtube.com/watch?v=uOY3yYkAJzs\">LOST</a> with all these subtle references.</p>\n<p><img alt=\"Hard Disk\" src=\"/static/img/4-hdd.png\" /></p>\n<p>The drive's <strong>read-write heads</strong> are responsible for encoding and decoding information on the HDD using magnetism. Separate heads extend above and below each platter, and the space between a platter and its corresponding head is less than the width of a human hair (totaling only several nanometers). So that the platters aren't scratched or damaged, the read-write heads don't actually touch the surface of the platters, but are instead perched precariously above them. The heads are attached to an actuator arm, which allows the heads to move closer to the platters' centers or edges. Meanwhile, a separate motor on the <strong>spindle</strong> rotates the platters at speeds between 4,000 and 15,000 rotations per minute (RPM), with consumer disks typically rotating at 7,200 RPM. Sound ridiculously fast? It is.</p>\n<p>Luckily, the space required to store a positive or negative magnetic charge, or one bit, is extremely small. This means that hard drives are able to cram a huge amount of data into a very small space. However, we weren't always able to pack data so efficiently. Shown below is a hard disk from 1956. (Yes, that entire box.) Its capacity? 5 MB.</p>\n<p><img alt=\"Hard Disk\" src=\"/static/img/4-plane-hdd.jpg\" /></p>\n<h2>Hard Drive Addressing</h2>\n<p>Now, we need some way of giving each bit on the hard drive some kind of address, just like we did with RAM. However, because the number of bits that can be stored on a hard drive is so huge, giving each bit a single unique number might not be the most practical system in the world. Instead, each platter in the hard disk is divided into many concentric rings called <strong>tracks</strong>, along which spaces for magnetized bits can be found. Each track is further subdivided into <strong>sectors</strong>, each of which holds a small, fixed amount of data, typically several hundreds of bytes. A group of adjacent sectors is known as a <strong>cluster</strong>. So, a single file will probably occupy multiple sectors on your hard disk, and your computer is responsible for remembering where files are stored and how much space they consume. Somewhere on your hard drive is some kind of table that describes the physical locations of files, so when the operating system needs to load a file, your hard drive will know which platters, tracks, and sectors to read from.</p>\n<p>How exactly your files are accessed and stored depends on how the hard drive is <strong>formatted</strong>, which determines which <strong>filesystem</strong> is used. Many Windows PCs have hard drives that utilize the proprierary <strong>NTFS</strong> filesystem, while USB thumb drives may be formatted using <strong>FAT</strong>, an older filesystem. While operating systems may support multiple filesystems, you might encounter a device that your computer can't read from or write to. For example, some versions of OS X can read files from an NTFS drive, but can't write any new data. If this happens, then you'll need to format the device, which changes the drive's filesystem and erases any existing data in the process.</p>\n<p>Hard drives are also capable of supporting different types of filesystems at the same time. <strong>Partitioning</strong> your disk into multiple storage units allows you to create the illusion that a single disk is actually divided into several disks. Each of these different units can be formatted differently, which can allow you to install multiple operating systems onto the same disk. Most operating systems have built-in programs to help you partition your hard drive as you please.</p>\n<p>To make this a bit more concrete, let's take a look at NTFS. All NTFS-formatted hard drives contain a special region called the <strong>master file table</strong>, which serves as a database of the drive's contents. Each file on the hard drive has at least one entry in the master file table, or MFT for short, containing information about the file and where the file is located. So, when the operating system wants to open up a file, it can look up its entries in the MFT in order to determine where the file is actually stored on the drive.</p>\n<p>This video nicely (albeit over-excitedly) ties together the various parts of the hard disk and how they interact to read and write data.</p>\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/kdmLvl1n82U\" frameborder=\"0\"> </iframe>\n\n<p>A few factors influence the performance of a hard disk. One, as you may have guessed, is the speed at which the hard disk rotates. As we've seen, a read-write head must by physically over a sector in order to read data from it. So, if it takes less time for the disk to rotate underneath the read-write head to the correct position, then we won't have to wait as long to read data. We call the amount of time it takes for a head to reach its destination the <strong>seek time</strong>. Also important is the hard disk's <strong>data rate</strong>, which describes how quickly data decoded from platters can be sent to the CPU. Older hard drives transferred data using <strong>PATA</strong> cables, which are 18\" in length, have 40-pin connectors, and have maximum data transfer rates of 133 megabytes per second. Nowadays, <strong>SATA</strong> cables, which represent an improvement over the PATA standard, are much more common. SATA cables are several feet in length, have only 7-pin connectors, and have maximum data transfer rates exceeding 600 MB/s. Here, we have a PATA cable on the left and a SATA cable on the right.</p>\n<p><img alt=\"PATA and SATA cables\" src=\"/static/img/4-pata-sata.jpg\" /></p>\n<h2>Solid-State Drives</h2>\n<p>Hard disk drives are becoming decreasingly common in consumer computers. Instead, many new machines utilize <strong>SSD</strong>s, or solid-state drives, as their primary form of storage. While we saw that HDDs relied on the coordination of several parts moving at blazing speeds, SSDs instead have no moving parts. Unfortunately that means the storage and retrieval of data on SSDs won't be particularly mesmerizing to watch, but it does mean that SSDs are, in general, more durable and less likely to break due to mechanical failures. Similarly, SSDs tend to consume less power than HDDs, which could mean better battery life for laptops using SSDs. Solid-state drives are also much faster than hard disk drives, partly because latency due to factors like seek time are no longer an issue. Check out the video below for a performance comparison&mdash;the left laptop has an SSD and the right laptop has an HDD, but the two computers have identical hardware otherwise (CPU, RAM, etc.).</p>\n<iframe width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/j84eEjP-RL4\" frameborder=\"0\"> </iframe>\n\n<p>However, SSDs are generally more expensive than HDDs, so with the same amount of money, you can buy a larger-capacity HDD than you can an SSD. So, those gains in performance, power, and durability come at a cost. Looks like there really is no such thing as a free lunch. But hey, even if your hard drive can hold a terabyte of data, do you really <em>use</em> all of that space? Questions like these are important to ask when purchasing a new computer, as we'll do in the next section!</p>\n<p>As you might expect, an SSD works very differently than an HDD. Most SSDs store data using <strong>NAND flash memory</strong>, which is also used by USB flash drives (aka \"thumb drives\") and camera memory cards. Flash memory stores data in a large grid of cells, each composed of two <strong>transistors</strong> (the control gate and the floating gate), or small electrical components that can allow or block the flow of current. SSDs still use binary to represent data, and in SSD land, a 1 is represented by the flow of current, and a 0 is represented by the blockage of current. Current flows freely through the cells on a blank portion of an SSD drive, which represents a series of 1s. When a write operation is performed, some of those 1s will be flipped to 0s by sending a precise voltage to each cell's <strong>control gate</strong>, one of the two transistors in a cell. This voltage will transfer electrons to the <strong>floating gate</strong>, the other transister in each cell, which gives the cell a positive charge and blocks the flow of current. Reading data, then, is as simple as sending current through a series of cells and determining where flow is blocked, which represents a series of 0s and 1s. This method of storing data does have its drawbacks, though. Each cell can be changed a fixed number of times before it no longer functions, so some effort must be put into ensuring writes distributed across the drive rather than concentrated in a particular section.</p>\n<h2>Virtual Memory</h2>\n<p>Whether your computer has an HDD or an SSD, the hard drive typically has a much larger capacity than RAM. In fact, if you're in a super productive multi-tasking kind of mood, you might start so many programs that the total amount of RAM requested by all of your running processes is larger than the amount of RAM in your computer. However, it wouldn't be so good if your computer simply told you that you couldn't open up one more tab in your web browser because you already used up all the available RAM. In this scenario, your computer will instead utilize <strong>virtual memory</strong> to create the illusion that it actually has more memory available than the total capacity of the installed RAM. Rather than limiting your computer's ephemeral storage to RAM, virtual memory allows data to be written to special files called <strong>swap files</strong> located on the hard drive instead of RAM. The operating system is responsible for deciding when to copy the contents of RAM to a swap file and when to copy data from a swap file into RAM, based on factors like what data is being frequently accessed by the CPU. Because the operating system is in charge of managing virtual memory, individual programs like your email client are under the impression that they have access to their own big block of memory, and they don't need to know that some of their data is stored in RAM while other parts are stored on the hard drive. However, remember that accessing data on a hard drive is much slower than accessing data in RAM, so unfortunately this solution comes with a bit of a performance penalty. The process of constantly copying data to and from swap files is called <strong>thrashing</strong>, which will slow down your computer dramatically.</p>\n<p>The below diagram illustrates how virtual memory works. Physical RAM contains data stored by multiple running programs, but since some data may be stored on swap files, RAM might not contain <em>all</em> of the memory in use by running processes. So, each process has access to a big chunk of memory, some of which might be stored in RAM and some of which might be stored on disk in swap files.</p>\n<p><img alt=\"Virtual Memory\" src=\"/static/img/4-virtual-memory.png\" /></p>\n<h2>The Memory Hierarchy</h2>\n<p>Alrighty, we've now seen several different types of memory and storage. Let's recap how these various types of storage relate to each other. The registers on the CPU are the smallest and fastest, followed by the processor caches like the L1 cache and L2 cache. RAM is both the largest-capacity and slowest-to-access form of short-term memory. HDDs, which consist of platters read using fast-moving heads, and SSDs, which have no moving parts at all, are used for long-term storage, and thus have much higher capacity, but are also much slower to access. Here's a visual representation of a computer's memory hierarchy.</p>\n<p><img alt=\"Memory Hierarchy\" src=\"/static/img/4-hierarchy.jpg\" /></p>\n<p>Finally, let's compare how long it takes for your computer to read and write data from the different storage mechanisms we've seen.</p>\n<table class=\"table table-bordered\">\n\n    <thead>\n\n        <tr>\n\n            <th>Storage type</th>\n\n            <th>Access time</th>\n\n            <th>Relative access time</th>\n\n        </tr>\n\n    </thead>\n\n    <tbody>\n\n        <tr>\n\n            <td>L1 cache</td>\n\n            <td>0.5 ns</td>\n\n            <td>Blink of an eye</td>\n\n        </tr>\n\n        <tr>\n\n            <td>L2 cache</td>\n\n            <td>7 ns</td>\n\n            <td>4 seconds</td>\n\n        </tr>\n\n        <tr>\n\n            <td>1MB from RAM</td>\n\n            <td>0.25 ms</td>\n\n            <td>5 days</td>\n\n        </tr>\n\n        <tr>\n\n            <td>1MB from SSD</td>\n\n            <td>1 ms</td>\n\n            <td>23 days</td>\n\n        </tr>\n\n        <tr>\n\n            <td>HDD seek</td>\n\n            <td>10 ms</td>\n\n            <td>231 days</td>\n\n        </tr>\n\n        <tr>\n\n            <td>1MB from HDD</td>\n\n            <td>20 ms</td>\n\n            <td>1.25 years</td>\n\n        </tr>\n\n    </tbody>\n\n</table>\n\n<p>To put some of these numbers in perspective, here's Admiral Grace Hopper, one of the first ever computer programmers and a pioneer in the field.</p>\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/JEpsKnWZrJ8\" frameborder=\"0\"> </iframe>\n\n<p>Phew! That was a lot of information, but try to commit as much of it as possible to <em>memory</em>! Ha ha ha, I've been waiting all this time to drop that pun on you. We've talked a lot about hardware in the past few sections, so in the next few chapters, let's switch gears a bit and discuss the Internet!</p>", "title": "Thanks for the Memory", "id": "memory", "tags": ["Addressing", "Bytes", "Caching", "Endian-ness", "HDDs", "PATA", "RAM", "Registers", "SATA", "SSDs"], "sequence": 3}, "internet": {"content": "<h2>Introduction</h2>\n<p>Now that we've seen how the hardware innards of your computer work, let's shift gears a bit and discuss everyone's favorite way to procrastinate: the Internet. So... what <em>is</em> the Internet? While it's been described as <a href=\"http://www.gametrailers.com/videos/8nj7ho/internet-is-a-series-of-tubes\">a series of tubes</a>, the Internet is really a huge <strong>network</strong> of connected computers. Using the Internet, your machine can contact some other machine, like the one powering CNN.com, in order to exchange information. Computers that power websites have a special name: <strong>servers</strong>. A server's job is to respond to requests from <strong>clients</strong>; the web servers behind CNN.com, for example, respond to requests from clients (like you!) who navigate to the site's various articles using a web browser. However, there's a pretty good chance that your computer doesn't have a wire running to the computer CNN.com runs on. Or, if it does... then I'm really not sure what to say. Instead, your request to CNN.com will likely be routed through several other machines in order to reach its destination.</p>\n<h2>Tracing a Route through the Internet</h2>\n<p>Every morning, I fire up my favorite web browser (whether that be Chrome, Safari, Firefox, Internet Explorer, or something else) and navigate to CNN.com to get my fix of the day's news. Let's take a look at how my request actually goes from my computer to its destination&mdash;some machine powering CNN.com. To do that, we can open up a terminal and use a program called <code>traceroute</code>, which makes a request to a destination on the Internet and displays some information about how it got there. Here's what happened when I ran it from a computer living in Newark, New Jersey (where Snooki is my dedicated system administrator). Before you ask, yes, I do indeed name my computers after characters from <a href=\"http://en.wikipedia.org/wiki/Star_Fox_(series)\">Star Fox</a>.</p>\n<p><img alt=\"Traceroute to CNN.com\" src=\"/static/img/6-trace-cnn.png\" /></p>\n<p>Alright, looks like my request to CNN.com made a few stops along the way! Since my computer isn't directly connected to a computer owned by CNN, my request naturally has to pass through a few other devices in order to reach its destination. This process isn't unlike taking a long flight to a remote destination; while there might not be a direct connection from your hometown to your destination, there's a good chance you can get there via a few connected intermediate stops. Here, each of those stops, represented by a row in our <code>traceroute</code> output above, is a device called a <strong>router</strong>. In fact, the Internet's core is a huge web of interconnected routers whose purpose in life is to route traffic to the correct destination. In order for my request to travel from my laptop to CNN.com, it will travel through a series of connected routers until eventually it reaches the geographic location of the destination web server. While all of the routers along the way may not know how to get to CNN.com, each does seem to have <em>some</em> idea of how to get there. More specifically, each router has its own <strong>routing table</strong>, which maps ranges of destination addresses to other routers it's connected to. So, when my request for CNN.com reaches a router, that router will use its routing table to determine where my request should be sent next, so it can reach its destination as quickly as possible. Eventually then, my request will be sent to a router that <em>does</em> know how to get to CNN.com, thus completing its flight!</p>\n<p>With this in mind, let's come back to our <code>traceroute</code> output. In the first column, we can see how many \"hops\" it took my request to reach each router. Next, we can see something that looks like an identifier for each device. From this output, it looks like my request started in Newark and then passed through Washington and Atlanta before reaching its final destination. The stars on row 14 simply indicate that a particular router is choosing not to disclose any information about itself, for one reason or another. In the next column, we see each device's <strong>IP address</strong>, or a unique series of numbers, that can be used to contact the router. Much more on those suckers later, don't worry. Finally, we can see how long it took for my request to get from the Jersey Shore boardwalk to one of CNN's computers. Based on this output, it took less than 20 milliseconds for my request to travel all the way to Atlanta, Georgia!</p>\n<h2>Networks</h2>\n<p>We said earlier that the Internet is a big network of connected computers, so let's explore that for a bit. If we wanted to connect two computers together, we might hypothetically connect them with some kind of cable. Back in the day, this wasn't so hypothetical, so a network of just two computers might look something like this:</p>\n<p><img alt=\"Small Network\" src=\"/static/img/6-small-network.png\" /></p>\n<p>That's cute, now my computer has a friend. What happens, though, when my computer becomes popular and gains a few more friends? Pretty quickly we're going to end up with a situation like this:</p>\n<p><img alt=\"Large Network\" src=\"/static/img/6-large-network.png\" /></p>\n<p>Ouch, that already looks like a pretty big mess for a pretty small network. The problem here is that we want any computer in the network to be able to talk to any other computer in the network, creating a setup that is completely connected. If we wanted to add just one computer to this network, we'd need to add <em>four</em> new connections: one to each of the existing computers in the network. It only gets worse as we add even more computers. In fact, if we have <em>n</em> computers in the network, we'll need something like <em>n<sup>2</sup></em> cables to connect them all (to be specific, we'll need <em>(n(n - 1)) / 2</em> connections). Yikes.</p>\n<p>Much to the chagrin of cable manufacturers, let's try something else. Rather than running a wire from every computer to every single other computer, let's connect everything to a router. After all, we saw earlier that our request to CNN.com passed through a few routers on its trip. Now, our network looks something like this:</p>\n<p><img alt=\"LAN\" src=\"/static/img/6-lan.png\" /></p>\n<p>Okay, this looks much more organized! Now, the router acts as a communication hub for our network, and it allows all of the computers on the network to talk to one another. Let's say the computer on the left wants to send a message to the computer on the right. The message will first be sent to the router, and the router will then pass the message along to the computer on the right. By introducing the router as a middleman in the network, we can reduce the number of connections from <em>n<sup>2</sup></em> to <em>n</em>. It just so happens that many modern-day routers also allow devices to connect to the network wirelessly, but they work in exactly the same way.</p>\n<p>This setup, with a number of computers connected to a router (or routers), is called a <strong>LAN</strong>, or local-area network. When we connect multiple LANs together, we get a <strong>WAN</strong>, or wide-area network, which connects computers over a larger geographical area. Where your office building's network would be considered a LAN, the network in your hometown would be a WAN.</p>\n<p><img alt=\"WAN\" src=\"/static/img/6-wan.png\" /></p>\n<p>The entire Internet, then, is just a collection of interconnected WANs! So, if a network is a collection of connected computers, the Internet is a collection of connected networks. It's precisely because the various networks around the globe are interconnected that my request is able to hop along a series of routers in order to reach any destination on the Internet! In fact, the term \"Internet,\" coined in the early 1970s, is a shortening of the term \"Internetwork.\" Companies called <strong>Internet Service Providers</strong>, or ISPs, are responsible for connecting your home network to the rest of the Internet. Large ISPs in the United States include Comcast, Verizon, and Time Warner, whose service (or the service of one of their subsidiary companies) you may use in your own home or workplace! A typical setup might look something like this:</p>\n<p><img alt=\"Internet\" src=\"/static/img/6-internet.png\" /></p>\n<p>Let's walk through this diagram. On the left, we have two different computers connected to a router, creating a LAN. Without anything else in the picture, the router allows these two computers to talk only to each other, so neither is connected to the Internet. Next, the router is connected to a <strong>modem</strong>, which also could be built into the router itself. A modem, short for _mod_ulator-_dem_odulator, is responsible for converting analog and digital signals, allowing data from your computer to be transferring along telephone lines set up by your ISP. So, by connecting a router to an ISP-provided modem, the devices on your home network are able to access the larger network known as the Internet!</p>\n<h2>IP Addresses</h2>\n<p>Let's try tracing another request through the depths of the Internet. Here's the output of <code>traceroute</code> on a different destination, reddit.com. If unfamiliar with reddit, click <a href=\"http://reddit.com\">here</a> to waste the next ten hours of your day. By the way, sites like <a href=\"http://en.dnstools.ch/visual-traceroute.html\">http://en.dnstools.ch/visual-traceroute.html</a> and <a href=\"http://traceroute.monitis.com\">http://traceroute.monitis.com/</a> let you run traceroute right from your browser!</p>\n<p><img alt=\"Traceroute to reddit.com\" src=\"/static/img/6-trace-reddit.png\" /></p>\n<p>This one looks a bit different. Compared to the last time we ran this program, it's perhaps not as obvious where my request went. But, let's take a closer look at the second column again. Turns out that routers are commonly identified using nearby airport abbreviations. A quick Google search shows that \"mmu\" is New Jersey's Morristown Municipal Airport (remember, our request is starting from the Garden State!), \"ewr\" is the Newark Liberty International Airport, and \"nyc\" of course is New York City. Great, we're back in action. Now, take a look at the times between hops 7 and 8. Looks like our time jumped from 1 millisecond to 68 milliseconds! What happened there, are all those Yankees fans slowing down the Internet in New York? While that <em>could</em> be the case, it looks like the next router is located in the United Kingdom, near the London Heathrow Airport (LHR) to be precise! Unsurprisingly, it takes a while for my request to make like Columbus and cross the Atlantic Ocean.</p>\n<p>That was fun, but let's take a closer look at that third column, the four numbers separated by dots. Recall that these numbers form an IP address. A device's IP address, much like your street address, is a unique identifier for a location to which devices on a network can send messages. In order to send me a birthday card, my grandmother might use my home address, just as a computer on the Internet will use another machine's IP address to send it a birthday email. Each number in an IP address, called an <strong>octet</strong>, ranges from 0 to 255. So, how many bits is that? (Spoiler alert: the term \"octet\" is a dead giveaway, but bear with me.) We know that with one bit we can represent all numbers &le; 1, with two bits numbers &le; 3, with three bits numbers &le; 7, and so on. Eventually, we'll find out that we can represent all numbers &le; 255 with exactly 8 bits. So, each octet in an IP address is 8 bits long, which means we have a total of 32 bits to work with. Hopefully that number rings a bell, as 32 bits is equal to one byte!</p>\n<p>Because all IP addresses are simply four numbers between 0&ndash;255, that must mean that we only have a fixed number of them. To figure out how many, let's think about an IP address as a sequence of 32 bits. We know that each of those bits can be either a 0 or a 1, which gives us only two possibilities for each bit. Since there are 32 of them, that means that the total number of unique sequences of 0s and 1s is 2<sup>32</sup>, or 4,294,967,296. At first glance, four billion addresses seems like plenty. (If not, then your intuition is better than mine!) However, the current world population is currently pushing seven billion people. On top of that, I have three different Internet-connected devices into my pocket, which isn't all too uncommon in today's world, and companies like Google have millions of different servers, each needing some kind of IP address. Suddenly, those four billion addresses don't seem like that many.</p>\n<p>As an aside, this isn't the first (or last) time technology has outgrown existing infrastructure. Rumor has it that in 1981 Bill Gates was quoted as saying \"640K of memory ought to be enough for anybody\" to address concerns with memory limitations of an IBM computer. Today, of course, 640 KB of memory isn't enough to open most web browsers, and even our cell phones have several gigabytes of RAM. Similarly, in the Internet's earliest days, thoughts of supporting over 4 billion interconnected devices probably weren't at the front of engineers' minds!</p>\n<h2>IPv6</h2>\n<p>So if we're running out of IP addresses, what can we do? After all, without an IP address, a computer cannot be contacted by other Internet-connected devices. One solution is to simply increase the size of an IP address, in turn increases the total number of available addresses. The 32-bit IP address is a standard known as <strong>IPv4</strong>, which was developed in the early 1980s. Now, a standard known as <strong>IPv6</strong> is starting to gain momentum. While an IPv4 address looks something like 60.254.153.16, an IPv6 address is instead a series of hexadecimal digits like 2001:0db8:85a3:0042:1000:8a2e:0370:7334. Hexadecimal, like binary, simply represents numbers using a different base; while binary uses base 2, hexadecimal uses base 16; since we only have 10 different digits to work with, hexadecimal uses \"a\" to represent the number 10, \"b\" to represent 11, and so on until \"f\" represents 15. Each hexadecimal digit is 4 bits, so IPv6 addresses are 128 bits in length, which creates a total of 2<sup>128</sup> (or 3.4 &times; 10<sup>38</sup>) different addresses. To be precise, IPv6 allows 340,282,366,920,938,463,463,374,607,431,768,211,456 different IP addresses. For an always up-to-date count of how many IPv6 addresses are left in the world, check out <a href=\"http://samsclass.info/ipv6/exhaustion.htm\">this website</a>. Assuming the world's population is about 7 billion people, that means we can have have 4.8 &times; 10<sup>28</sup> different IPv6 addresses <em>per person</em>. That's a whole lot of iPhones! Of course, the people behind IPv4 probably said something similar 30+ years ago...</p>\n<p>The adoption of IPv6 has been slow but steady. June 6, 2012 was dubbed World IPv6 Launch, and major Internet companies were encouraged to finally enable IPv6 support once and for all. The event was even advertised with the tagline \"this time, it's for real.\" About a quarter of the world's top 500 sites have IPv6 enabled, and right now in 2013, about <a href=\"http://www.google.com/ipv6/statistics.html#tab=ipv6-adoption\">1% of Google users connect using IPv6</a>. However, Google does note that the number of IPv6 users has increased by a factor of 2 since last year, which is promising for IPv6 adoption.</p>\n<h2>NAT</h2>\n<p>Making addresses bigger isn't the only way we can combat a dwindling supply of IP addresses. In fact, you probably don't need the laptop sitting on your kitchen table to be directly accessible by any other computer on the Internet (and for security reasons, you might not want this either, but more on that later). Because you don't need to allow any machine on the Internet to connect directly to your computer, there's no need to give it a unique, publicly-accessible IP address. Your computer will indeed need <em>some</em> kind of IP address in order to connect to the Internet (else it would have no way of identifying itself), but that's where a technology called <strong>NAT</strong>, or Network Address Translation, comes in. Using NAT, your computer can instead obtain a <strong>private</strong> IP address, or one that cannot be used by any ole' device on the Internet to reach your computer. So, while public IP addresses are usually unique across the entire Internet, private IP addresses are only unique within a network. That means that your laptop and your neighbor's laptop (on a different network) could actually have the same private IP address. Since private IP addresses aren't unique, though, your neighbor <em>cannot</em> contact your laptop using its private IP address, since the devices are on different networks. Typically, private IP addresses take the form <code>10.x.y.z</code>, <code>172.16.y.z</code>, and <code>192.168.y.z</code>, where <em>x</em>, <em>y</em>, and <em>z</em> are numbers between 0 and 255, which may look familiar if you've ever set up a home wireless network. Using NAT then, only your router has a single public IP address, while all of the devices on the network have private IP addresses that don't take away from the pool of 2<sup>32</sup> IPv4 addresses!</p>\n<p>Of course, this begs the question of how a computer with a private IP address can interact with devices on the Internet at all. After all, if I request information from cnn.com, then I'm probably expecting to receive some kind of response from my favorite news network. However, we saw that CNN can't simply use my laptop's IP address, since it's private and my computer is on a different network. Here's where the \"T\" in NAT kicks in. When my computer with a private IP address makes a request to a public IP address, it has to go through my router first, since that's what's connecting my computer to the Internet via my home network. Though my laptop doesn't have a public IP address, my router sure does. Once my request reaches my router, NAT will modify the request so it looks like it's coming from the router's public IP rather than my computer's private IP address. After this slight modification, the router will happily forward it along to the next stop on its journey to CNN. In some cases, routers will actually have a pool of different IPs to choose from, but the same process applies to routers with just one available IP address.</p>\n<p>Eventually, Wolf Blitzer is going to receive my request and will want to send a response to my computer. Remember, my request looks like it's coming from my router's IP address, which can be accessed by CNN.com because my router's IP address is public. So, CNN.com will go ahead and send its response along to my router's IP address, and after another series of hops, my router will eventually receive today's news from CNN. Now, the router has to forward that response along to the computer that originally made the request, keeping in mind that I could have multiple devices on the same network. The router must therefore maintain an internal table of the private IP addresses of all the devices that are using the router to connect to the Internet, since all are using the same public IP address. Associated with each private IP in this table is a <strong>source port</strong>, which is simply a unique number assigned to each device connected to the router. When the router modifies an outgoing request by changing the source IP address, it also tacks on that device's source port, which then gets sent to CNN. The response from CNN.com will thus also contain the source port attached by NAT, which the router can then use to figure out what device to forward the response to.</p>\n<p>Let's make this process a bit more concrete with an example. I'm running a wireless network at home, and my router has an IP address of 74.125.226.228. Currently, there are three devices connected to the network, and each has its own private IP address. I'm relaxing after a long day, so I make a request from my laptop to 64.208.126.154, which will lead me to reddit.com. My network is using NAT, so here's the state of the world from my router's perspective.</p>\n<p><img alt=\"NAT\" src=\"/static/img/6-nat.png\" /></p>\n<table class=\"table table-bordered\">\n\n    <thead>\n\n        <tr>\n\n            <th>Device</th>\n\n            <th>Private IP</th>\n\n            <th>Public IP</th>\n\n            <th>Source Port</th>\n\n        </tr>\n\n    </thead>\n\n    <tbody>\n\n        <tr>\n\n            <td>Macbook Air</td>\n\n            <td>10.0.0.1</td>\n\n            <td>74.125.26.228</td>\n\n            <td>1000</td>\n\n        </tr>\n\n        <tr>\n\n            <td>iPhone</td>\n\n            <td>10.0.0.2</td>\n\n            <td>74.125.26.228</td>\n\n            <td>1001</td>\n\n        </tr>\n\n        <tr>\n\n            <td>iPad</td>\n\n            <td>10.0.0.3</td>\n\n            <td>74.125.26.228</td>\n\n            <td>1002</td>\n\n        </tr>\n\n    </tbody>\n\n</table>\n\n<p>Okay, looks like my laptop has a private IP of 10.0.0.1. Remember, anything in the form <code>10.x.y.z</code> is a private IP address that isn't world-accessible, so a computer that's not on my network can't simply send information to my laptop. Once my request reaches the router, its source address will change to that of the router, 74.125.26.228 in this case, and the source port, 1000, will be added to the request. Reddit will eventually receive my request and send back a picture of a cat to the IP address included in the request, which is still 74.125.26.228 with a source port of 1000. Because Reddit sent my impending feline friend to my router's IP address, it will eventually end up at the router in my home. Then, my router can look at the source port attached to the response to look up the private IP address the request originated from. Finally, because my laptop is on the same network as my router, the Reddit data will reach my laptop, and I can enjoy a hearty chuckle. This process certainly sounds pretty involved, but recall how few milliseconds it took to reach Reddit in the United Kingdom!</p>\n<h2>Determining IP Addresses</h2>\n<p>We've seen some examples of IP addresses so far, but how did we come up with those numbers? I <em>could</em> just tell you that I'm a really good guesser so you'd be really impressed with me, but I'll be a magician who reveals his tricks just this once. In order to find out the IP address of a website, we can use a special program called <code>host</code>. If we open up a command prompt on a Mac or Linux machine, we can run the following:</p>\n<pre><code>host cnn.com\n</code></pre>\n<p>This should tell us what the IP addresses that point to cnn.com are. You'll notice that all of these addresses are IPv4 addresses, since each is 4 numbers separated by dots. Sure enough, if you type <a href=\"http://157.166.226.26\">157.166.226.26</a> into your web browser's address bar and press Enter, you'll see today's news before long! If we instead type:</p>\n<pre><code>host google.com\n</code></pre>\n<p>We'll see some different output. One of the last IP addresses output by the <code>host</code> program is an IPv6 address. So, it looks like Google is ready for IPv6, while CNN doesn't appear to be embracing the latest and greatest quite yet!</p>\n<h2>DHCP</h2>\n<p>So far, we've taken for granted that a computer connected to the Internet will have an IP address. Let's now take a look at how that number actually gets assigned. As you move among different networks or even if you connect to the same network multiple times, your computer's IP address may change, depending on how the network is configured. This is a bit different than the computers that power websites like CNN.com, which typically have some mechanism for maintaining the same IP address or set of IP addresses. More on that later, though!</p>\n<p><strong>DHCP</strong>, or dynamic host configuration protocol, is commonly used to obtain an IP address on a network. First, a computer that wishes to connect to the network, referred to here as the DHCP client, broadcasts a request to the network with a message that says \"Here I am. I'd like to join.\" Then, a device called the DHCP server (which will eventually be responsible for assigning an IP address to the client) will respond to the client's request, informing the client what its IP address will be. Now, the client knows exactly where it should send future messages during the process of obtaining an IP address, so it won't needlessly send messages to machines that aren't involved in the process. Next, the client will send another message to the DHCP server, this time formally requesting an IP address on the network. Upon receiving this request, the DHCP server will respond and offer the client an IP address on the network. In the meantime, the server will hold that IP address inside, so no other devices can have it until the client responds. Finally, the client will send one last message to the DHCP server, acknowledging that it has received the IP address and has begun using at. At this point, the client is connected and ready to go!</p>\n<p>To recap:</p>\n<ol>\n<li>\n<p>Client broadcasts join request.</p>\n</li>\n<li>\n<p>Server responds with its IP address.</p>\n</li>\n<li>\n<p>Client requests IP address from server.</p>\n</li>\n<li>\n<p>Server responds with IP address for client.</p>\n</li>\n<li>\n<p>Client acknowledges IP address and is connected.</p>\n</li>\n</ol>\n<h2>IP Address Allocation</h2>\n<p>This process assumes, though, that the DHCP server somehow knows which IP addresses it can assign. For example, a DHCP server in North America needs to make sure that it doesn't assign an IP address that is already in use by a device in Europe. To mitigate this issue, different ranges of IP addresses are allocated to different physical regions of the globe. More specifically, different ISPs around the world have been allocated blocks of IP addresses by an organization called the <strong>IANA</strong>, or Internet Assigned Names and Numbers Authority, which is managed by a larger Internet governance body called <strong>ICANN</strong>, or the Internet Corporation for Assigned Names and Numbers. Here's a map created by the author of <a href=\"http://xkcd.com\">XKCD</a>, one of my favorite webcomics.</p>\n<p><img alt=\"Map of the Internet\" src=\"/static/img/6-map.png\" /></p>\n<p>Let's take a closer look. Towards the top of the map, we can see that some organizations have been allocated huge IP ranges. Apple, for example, has all IP addresses in the form <code>17.x.y.z</code>, and MIT has all IP addresses in the form <code>18.x.y.z</code>. The number of IP addresses in those ranges in comparable to the number of IP addresses allocated to entire countries, like Japan's <code>126.x.y.z</code>! One of the perks of being involved early in the Internet's development, I guess. From our earlier <code>traceroute</code> output, we can see that my trusty machine in New Jersey has an IP in one of the many ranges allocated to North America. Finally, if you take a look at the right of the map at the <code>192.x.y.z</code> range, you'll see a small dot that says \"private.\" Sure enough, that's referring to the <code>192.168.y.z</code> range that we saw earlier was reserved for private IP addresses!</p>\n<h2>Connection Speeds</h2>\n<p>It looks like the IP address map spans the entire globe. We saw from our <code>traceroute</code> output earlier, though, that we can contact an IP address all the way on the other side of the world in almost no time at all. The speed with which you can access the Internet will depend on your Internet Service Provider (ISP), since ISPs like Comcast and Verizon are responsible for your connection. Internet speeds are typically measured in Mbps, or megabits per second. I know, I know, that's really confusing. We measured RAM and hard drive capacity in megabytes (with a capital B), but here we are using megabits (with a lowercase b). I'm deeply sorry about that. I don't make the rules; I just enforce them.</p>\n<p>The speed of your Internet connection is typically broken down into two parts: download speed and upload speed. Download speed measures how fast data is transferred from a remote computer to your computer, so it refers to how fast web pages and cat videos will load. Upload speed, on the other hand, measures how fast data is transferred from your computer to a remote computer, so it refers to how fast you can put a new cat video to YouTube. Why the difference? Well, as a typical Internet user, you've probably noticed that you download much more than you upload. Surfing the web requires downloading web pages, images, and videos pretty frequently, while it's probably much less common that you upload a document to a website or attach something to an email. If you're using a browser-based email client than Gmail, then you had to download things like the Gmail logo and web page before you could even attach that file, so there's a pretty good chance that downloading information is more common.</p>\n<p>Let's take a look at some plans offered by two ISPs: Comcast (shown first) and Verizon (shown second).</p>\n<p><img alt=\"Comcast\" src=\"/static/img/6-comcast.png\" /></p>\n<p><br /></p>\n<p><img alt=\"Verizon\" src=\"/static/img/6-verizon.png\" /></p>\n<p>Here, it looks like Comcast speeds in this area are a bit faster, but Verizon is a bit cheaper. Now that we know all about memory, we can put some context to these numbers! Let's say we want to download a 1 GB movie. 1 GB is 1000 MB, which is 8000 Mb. So, on a 3 Mbps Internet connection, downloading that movie will take 8000 / 3 = 2667 seconds, or about 45 minutes. Using the same logic, this movie will take about 22 minutes to download on a 6 Mbps connection, and only about 7 minutes to download on a 20 Mbps connection. Websites like <a href=\"http://www.speedtest.net/\">Speed Test</a> and <a href=\"http://www.whatismyip.com/speed-test/\">What is My IP</a> allow you to actually measure the upload and download speeds of your Internet connection, so you can see what kind of speeds you're actually getting for your monthly payment. However, these sites can sometimes be a bit misleading. For example, your ISP might sometimes <strong>burst</strong> your connection, or temporarily provide much faster speeds; if an ISP like Comcast bursts the first 10 MB of a download, then small downloads (which may be more common) will complete much faster, which could result in your connection \"feeling\" faster.</p>\n<p>There's a good chance that you connect to the Internet using a wireless network at home or at work, which can also affect the speed of your Internet connection. In addition to the speed limit imposed by your ISP, Wi-Fi networks also have their own speed limits. When buying a wireless router, you may have noticed something along the lines of <strong>802.11g</strong> or <strong>802.11n</strong> on the box. That seemingly random sequence of characters actually tells you which Wi-Fi standard the router uses. <strong>802.11n</strong> is the newest recommended standard, which allows for data to be transferred at a maximum of 300 Mbps, while <strong>802.11g</strong> and <strong>802.11a</strong> are a bit older and offer speeds of 54 Mbps. However, these speeds are really just hypothetical maximums, and Wi-Fi networks usually have speeds that are about half of these maximums. So, when purchasing an Internet plan from your local ISP, you probably don't want to pay for an <em>extreme</em> 105 Mbps connection and then hook it up to a router that only uses 20 of those Mbps! On the same note, there's no need to buy a router that uses 802.11n if your laptop only has an 802.11g wireless card, or else it won't be able to take full advantage of your network's speed. In almost all modern laptops, wireless cards are already built in, but you can still purchase USB or PCI wireless cards.</p>\n<p>On your phone or tablet, you might instead use a <strong>3G</strong> or <strong>4G</strong> connection, which are simply other standards that devices can use to connect to the Internet wirelessly. While the 802.11n network in your home is set up via a router with an Ethernet cable, your phone's 3G or 4G connection utilizes a data network set up by a cell phone provider. 3G is a bit of an older standard, while 4G is a new standard being deployed by an increasing number of service providers. As you may have noticed, 3G and 4G speeds are probably a bit slower than your home connection, but the newer 4G standard offers much better speeds compared to 3G. The below is a comparison of 3G and 4G speeds for a few popular service providers, this time using speeds actually measured in the real world.</p>\n<p><img alt=\"3G and 4G speeds\" src=\"/static/img/6-3g-speeds.jpg\" /></p>\n<h2>Firewalls and VPN</h2>\n<p>Let's round out our networking discussion with two terms you may have encountered on your corporate network. First, a <strong>firewall</strong> is a piece of software used to protect a network from malicious connections coming in from the outside world. When a request comes into a network, the firewall will examine it before it reaches any device on the network, and the firewall can block the request from the network based on a set of pre-configured rules. For example, a rule could say \"block requests from the IP 17.0.0.1\" or \"block requests from facebook.com.\" More advanced firewalls may support rules like \"block any request containing the word 'pirate,'\" which could be used to prevent employees from illegally downloading software at work.</p>\n<p>In order to allow employees to work from home, corporations may set up a <strong>VPN</strong>, or virtual private network. Using VPN, you can access resources on a LAN that you're not connected to. By establishing a connection to a VPN server on the desired LAN, VPN allows you to securely communicate with the LAN on a public, potentially insecure network. So, VPN allows organizations to keep their secret information on a private network while still allowing others to access the information when they're not physically connected to the LAN.</p>\n<p>Alrighty, now that we have some networking basics down, let's move a step up from IP addresses! Before you go, though, check out this cinematic masterpiece for a summary of how requests travel through the information superhighway!</p>\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/Ve7_4ot-Dzs\" frameborder=\"0\"> </iframe>", "title": "Project Interweb: Make it Network", "id": "internet", "tags": ["DHCP", "IP Addresses", "IPv6", "ISPs", "Private IPs", "NAT", "Routers"], "sequence": 4}, "domains": {"content": "<h2>Introduction</h2>\n<p>All of our discussion thus far has revolved around the idea of using IP address to contact other machines. However, cnn.com isn't exactly an IPv4 or IPv6 address, but it certainly looks like I can somehow use that sequence of characters to contact another Internet-connected device. Remember, if you know the IP address of CNN.com, you can open it up using a web browser: if you click <a href=\"http://157.166.226.26/\">here</a>, you should be whisked away to CNN's homepage, despite the fact that your web browser's address bar has no references to cnn.com. Of course, remembering the words \"cnn dot com\" is much easier than remembering (and typing) \"one five seven dot one six six dot two two six dot two six,\" so it'd be ideal to not have to waste brain cells on many sequences of 12 digits.</p>\n<h2>DNS</h2>\n<p>The <strong>Domain Name System</strong>, or DNS for short, is a mechanism for giving more convenient and easy-to-remember names to networked devices. DNS is essentially a massive phonebook distributed across thousands of storage locations around the world. Just like the YellowPages that you wish weren't still delivered to your front door, each domain <em>name</em> in the DNS phonebook has an associated IP <em>address</em>. Whenever you try to access a domain name, rather than an IP address, your web browser will use DNS to look up which IP address corresponds to the domain you'd like to access. Once the browser has an IP address, our request can proceed in the manner we saw last time! So, DNS is really just another networking layer that makes life a bit easier for us by creating aliases for numeric IP addresses. However, unlike a printed phonebook, changing entries in DNS is pretty simple and relatively fast (and happens all the time!).</p>\n<p>In the early days of the Internet, the big phonebook of IP addresses was simply a text file called <code>HOSTS.TXT</code>. Developers would routinely copy some authoritative copy of this text file to their own machines, and only then could they then take advantage of all the domains on the Internet. Remnants of this system still remain even on our modern operating systems. On my Mac (or Linux), I can open up a file called <code>/etc/hosts</code> that lists aliases for IP addresses local to my machine. On Windows, this file is located in <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code>, but its contents are the same. On each line, we have an IP address followed by a space and then a domain name. As you might expect, each line is an entry in the phonebook that tells your computer that the given domain name is an alias for the given IP address. Let's try adding a new entry. 74.125.226.196 happens to be an IP address for google.com, so add the following line to the bottom of your hosts file (you may be prompted for your administrator password, since this is a system file):</p>\n<pre><code>74.125.226.196 bing.com\n</code></pre>\n<p>Now, open up a web browser and head to bing.com. Toto, we're not in Redmond anymore. When you added that line to our local hosts file, you effectively created a new entry in the DNS phonebook (only on your machine, though) that says \"bing.com is an alias for the IP address 74.125.226.196.\" So, when your web browser saw \"bing.com,\" it was told that that domain resolved to 74.125.226.196, one of Google's IPs, which led you to Google's homepage. In the same way, google.com or any other domain is simply a readable alias for an IP address.</p>\n<h2>DNS Hierarchy</h2>\n<p>Given the massive size of the Internet, it's probably not the best idea to keep a list of every single domain name on the Internet in a single text file. Not only would it be impractical to keep the billions of people on the Internet up-to-date with the latest version, but if that single file were ever compromised, someone could wreak havoc on the Internet as we know it. For reasons like these, it makes more sense to distribute the mapping of domains to IP addresses across multiple machines, called <strong>DNS servers</strong>. Rather than keep track of the entire domain name space, each DNS server typically maintains only a small subset of all the domains that have been registered on the Internet and their corresponding IP addresses.</p>\n<p>Let's come back to that request to CNN.com we talked about last time and take a look at how your computer <strong>resolves</strong> the domain name \"cnn.com\" to the IP address of a web server. First, my browser will probably check its <strong>cache</strong> of recently-accessed domain names to see if it already knows the IP of cnn.com, perhaps because I've accessed it recently. If the browser doesn't already know the IP address of cnn.com, it will then contact a <strong>cache DNS server</strong> to ask which IP the domain points to. This DNS server is likely managed by my ISP, which remember, is the company responsible for connecting me to the Internet. My computer was informed of the IP addresses of these servers when I first joined the network, since without any DNS servers, I'd be unable to browse any sites without knowing their IP addresses. On a Mac, I can view the IP addresses of these DNS servers (as well as change them if I know the IP addresses of any other DNS servers) in my network settings, as shown below. Alas, I digress. Because lots of people are making requests to the same DNS servers, there's a good chance that a cache DNS server is going to be asked for the IP address of a popular site like \"google.com\" pretty frequently. So, cache DNS servers will remember some number of recently-accessed domains in order to provide answers to clients quickly. But, in the event a cache DNS server doesn't already know the IP address for a domain, then it's going to have to ask some other DNS servers for the answer (and then perhaps remember it for a while).</p>\n<p><img alt=\"DNS Client Settings\" src=\"/static/img/7-dns-servers.png\" /></p>\n<p>If the cache DNS server knows where \"cnn.com\" is, perhaps because another computer on the network made a request to cnn.com a few minutes ago, it will respond immediately with the domain's IP address, and my browser be good to go. But because that makes the story boring, let's assume the first DNS server we contact doesn't know the IP address of cnn.com. Now, perhaps after asking a few nearby DNS servers and getting nowhere, our poor DNS server will go ahead and contact a <strong>root DNS server</strong>. Root DNS servers are located all around the world (click <a href=\"http://root-servers.org/\">here</a> for a complete list) and for a critical part of the Internet's infrastructure. The root DNS server will forward the request along to one of many <strong>TLD DNS server</strong>, responsible for handling all requests for a particular <strong>TLD</strong>. A TLD, or top-level domain, is a domain's suffix, like \".com\" or \".net\". Because I'm looking for the IP address for cnn.com, my request will be sent along to a .com TLD DNS server. While the TLD DNS server doesn't know exactly what the address of cnn.com is (damn!), it does know the right person to ask. The TLD DNS server will proceed to query the <strong>authoritative name server</strong> for cnn.com, which is responsible for maintaining a list of IP addresses for all addresses in a DNS zone, or group of domains. Finally, this server can respond with the IP address for cnn.com, which will finally make its way to my web browser. Phew! All of this before my computer even <em>started</em> to request the daily news!</p>\n<p>Let's take a more concrete look at the process of resolving a domain name with an example. If we head <a href=\"http://www.simpledns.com/lookup-dg.aspx\">here</a>, we can actually see the servers involved in looking up the IP address of the domain name cnn.com. This particular tool doesn't happen to be using any DNS caching servers, so the first request goes straight to a root DNS server. First, my request went to the root DNS server at <code>k.root-servers.net</code>, which has the IP address <code>193.0.14.129</code>. The root DNS server will then send my request to a TLD DNS server responsible for the .com TLD, one of which has the IP address <code>192.52.178.30</code>. Next, the request will be forwarded to an authoritative DNS server for cnn.com, like the DNS server at <code>ns3.timewarner.net</code>, which has the IP address <code>199.7.68.238</code>. Finally, this DNS server will return the IP address for cnn.com, which will make its way back down this hierarchy to my browser.</p>\n<p>To recap, resolving a domain name looks like this:</p>\n<ol>\n<li>\n<p>Browser checks the hosts file and cache. An IP address may be returned.</p>\n</li>\n<li>\n<p>Browser makes a request to a cache DNS server. An IP address may be returned.</p>\n</li>\n<li>\n<p>Cache DNS server makes a request to a root DNS server.</p>\n</li>\n<li>\n<p>Root DNS server makes a request to a TLD DNS server.</p>\n</li>\n<li>\n<p>TLD DNS server makes a request to authoritative name server.</p>\n</li>\n<li>\n<p>Authoritative name server responds with an IP address.</p>\n</li>\n</ol>\n<h2>DNS Hijacking</h2>\n<p>Sometimes, the domain that we typed into our web browser's address bar hasn't been registered by anyone, so it doesn't actually point any IP address. If this is the case, then the gods of the Internet (the individuals governing and writing the standards that describe how devices should operate on the Internet) have decreed that your web browser should display some kind of message letting you know that the domain you're looking for isn't owned by anyone yet. However, it turns out that many ISPs don't exactly listen to to the gods of the Internet. Instead of letting your web browser tell you that a site doesn't exist, an ISP may instead redirect you to a page that looks something like this:</p>\n<p><img alt=\"Comcast DNS Hijack\" src=\"/static/img/7-comcast.png\" /></p>\n<p>Why might your ISP want to do this? $$$! As you can see from this picture, this page you land on could contain advertisements from a number of different companies that paid your ISP to feature their clever adverts. Issues like this are part of a larger debate referred to as <strong>net neutrality</strong>. Essentially, the questions behind net neutrality ask what degree of control your ISP should exercise over your Internet connection. For example, rather than charge you one, flat rate to access the Internet, ISPs could instead create a tiered model where you pay for access to certain sites. As shown in the below (currently) fictional advertisement, you could pay $5/month to access search sites like Google and another $5/month to access news sites like CNN. While ISPs might advocate this kind of pricing scheme, others want the Internet to remain a more free environment where newer, smaller companies aren't put at any disadvantage to tech giants as a result of tiered pricing. Debates like these are currently ongoing in governments around the world, and at least right now, there isn't a straightforward answer!</p>\n<p><img alt=\"Tiered pricing\" src=\"/static/img/7-neutrality.png\" /></p>\n<p>On a similar note, even a distributed system like DNS could still be compromised. If this were to happen, then an attacker could tamper with the IP addresses pointed to by various domains, which would be pretty bad news for aspiring YouTube celebrities everywhere. So, a few years ago, ICANN, the organization responsible for assigning domain names, bestowed upon seven heroes the <a href=\"http://www.popsci.com/technology/article/2010-07/order-seven-cyber-guardians-around-world-now-hold-keys-internet\">keys to the Internet</a>. When all seven individuals, scattered across the globe in the US, UK, Burkina Faso, Trinidad and Tobago, Canada, China, and the Czech Republic, come together as one superpower, the Internet can be rebooted and rid of all evil. You might think I'm joking, but this actually isn't too far from the truth. In fact, <strong>DNSSEC</strong>, or DNS Security, is an emerging standard that seeks to make DNS more secure in general by ensuring that attackers can't forge the IP addresses of websites.</p>\n<h2>DNS Records</h2>\n<p>While the first <code>HOSTS.TXT</code> file simply stored a series of mappings between IP addresses and domain names, modern DNS servers actually store a bit more information. Today, most domains have the equivalent of a spreadsheet associated with them. Here's some of the information that's currently associated with cse1.net.</p>\n<p><img alt=\"DNS Manager\" src=\"/static/img/7-dns-manager.png\" /></p>\n<p>Each row in this table is called a <strong>DNS record</strong>, and it's actually stored in a text file called a <strong>DNS zone file</strong> stored somewhere on my web server. As you can see, the DNS phonebook can have a few different types of entries. Each of these rows also has a <strong>TTL</strong>, or time-to-live, which defines the amount of time that should pass before the record should be refreshed by a DNS server. Here are a few types of DNS records:</p>\n<ul>\n<li>\n<p><strong>SOA record</strong>. The start of Authority record specifies the authoritative information about the zone, including the primary name server.</p>\n</li>\n<li>\n<p><strong>NS records</strong>. Name server records specify additional name servers for the zone. That way, if a particular name server isn't responding, my site can have a few backup plans.</p>\n</li>\n<li>\n<p><strong>MX records</strong>. Mail eXchange records specify how email sent to the domain should be handled. Using MX records, I can set up email addresses using my domain.</p>\n</li>\n<li>\n<p><strong>A records</strong>. A records are the bread and butter, as they specify which IP address the domain points to. When we edited the hosts file a few sections ago, we essentially created an A record for <code>bing.com</code>. Here, we can see that both cse1.net and www.cse1.net point to the same IP address, which effectively makes typing the \"www\" part of the website's address optional.</p>\n</li>\n<li>\n<p><strong>AAAA records</strong>. AAAA records are identical to A records, but AAAA uses IPv6 while A uses IPv4. Remember the difference?</p>\n</li>\n<li>\n<p><strong>CNAME records</strong>. Canonical name records allow domains to be aliased to other domains. Here, <code>mail.cse1.net</code> has been aliased to <code>ghs.google.com</code>, which means that a request to <code>mail.cse1.net</code> will simply be sent to one of Google's servers instead. I could have also looked up the IP address for <code>ghs.google.com</code> and created an A record to accomplish the same thing, but using a CNAME record instead means that Google can go ahead and change the IP address of <code>ghs.google.com</code> at any time, and I won't be affected.</p>\n</li>\n</ul>\n<h2>TLDs</h2>\n<p>Let's come back to TLDs, which we touched on a bit earlier. We saw that every domain is in the form <code>domain.tld</code>, where the TLD, or top-level domain, comes from a list of about 250 suffixes approved by the Internet Assigned Numbers Authority (IANA). Domains also may be divided into separate components called <strong>subdomains</strong>. For example, in the address <code>foo.example.com</code>, we'd say that <code>foo</code> is a subdomain of <code>example.com</code>. Subdomains can be any number of levels deep, so <code>foo.bar.example.com</code> is also a valid domain. Using DNS, I can assign different IP addresses to different subdomains of the same domain name by creating new A records or CNAME records in my DNS zone file. That way, <code>mail.example.com</code> might point to Gmail while <code>files.example.com</code> could point to Dropbox.</p>\n<p>Here's a list of some common TLDs and their intended usages. However, today people often purchase TLDs based on what's available or aesthetically pleasing, as some TLDs have no restrictions on who can purchase them and how they can be used. If I wanted the domain \"example\" but \"example.com\" was already taken, then I might instead purchase \"example.net\" or \"example.org,\" even if I don't intend to use the domain to create a \"network,\" which is the intended usage of the \".net\" TLD! While anyone can buy a \".com,\" \".net,\" or \".org,\" some TLDs cannot simply be purchased by anyone on the Internet.</p>\n<table class=\"table table-bordered\">\n\n    <thead>\n\n        <tr>\n\n            <th>TLD</th>\n\n            <th>Intended Usage</th>\n\n            <th>Open to anyone?</th>\n\n        </tr>\n\n    </thead>\n\n    <tbody>\n\n        <tr>\n\n            <td>.com</td>\n\n            <td>Companies</td>\n\n            <td>Yes</td>\n\n        </tr>\n\n        <tr>\n\n            <td>.edu</td>\n\n            <td>Educational institutions</td>\n\n            <td>No</td>\n\n        </tr>\n\n        <tr>\n\n            <td>.gov</td>\n\n            <td>US government entities</td>\n\n            <td>No</td>\n\n        </tr>\n\n        <tr>\n\n            <td>.info</td>\n\n            <td>Information</td>\n\n            <td>Yes</td>\n\n        </tr>\n\n        <tr>\n\n            <td>.mil</td>\n\n            <td>US military organizations</td>\n\n            <td>No</td>\n\n        </tr>\n\n        <tr>\n\n            <td>.net</td>\n\n            <td>Networks</td>\n\n            <td>Yes</td>\n\n        </tr>\n\n        <tr>\n\n            <td>.org</td>\n\n            <td>Organizations</td>\n\n            <td>Yes</td>\n\n        </tr>\n\n    </tbody>\n\n</table>\n\n<p>The IANA also defines a list of TLDs based on country codes, called <strong>ccTLDs</strong>. While these are meant to give countries their own little piece of the domain namespace, many people take advantage of country codes to create cute domain names. For example, the ccTLD for Libya is \".ly,\" which is used by URL-shortening services like <a href=\"http://bit.ly\">bit.ly</a> and <a href=\"http://owl.ly\">owl.ly</a>. There's also \".me,\" the ccTLD assigned to Montenegro, which is cleverly used by sites like <a href=\"http://about.me\">about.me</a>, which allows you to create your own home page. Even the United States' own ccTLD, \".us,\" has been put to good use by sites like <a href=\"http://del.icio.us\">del.icio.us</a>. I'm also proud to say that my initials are a valid TLD, thanks to <a href=\"http://en.wikipedia.org/wiki/Turkmenistan\">Turkmenistan</a>. However, since ccTLDs are managed by individual countries, real-world politics can sometimes oddly come into play. Recently, a tech startup (then) called <a href=\"http://artsy.net\">Art.sy</a> had to <a href=\"http://www.huffingtonpost.com/2013/01/04/artsy-domain-name-changed-syrian-conflict_n_2408791.html\">change domains</a> because of a conflict in Syria! You don't see that one every day.</p>\n<p>Country code TLDs are nice, but they're still a bit limiting in terms of the domains companies can create. To solve this problem, the IANA is considering introducing a new set of between 100&ndash;3000 TLDs based on an application process. For a cool $185,000, you can apply to create your very own TLD, though the IANA estimates that these new TLDs won't be created until the end of 2013 due to possible trademark concerns. However, if the application for a TLD is granted, then the organization that applied will have full control over who can and can't use the TLD. ICANN's website has an <a href=\"http://gtldresult.icann.org/application-result/applicationstatus/viewstatus\">up-to-date list</a> if you're curious what's already been applied for!</p>\n<p>Purchasing a domain is actually pretty easy (and inexpensive!). To do so, all you need to do is head to a domain name <strong>registrar</strong> like <a href=\"http://www.godaddy.com/\">GoDaddy</a>, <a href=\"http://www.namecheap.com/\">Namecheap</a>, or <a href=\"http://www.networksolutions.com/\">Network Solutions</a>. These companies handle paperwork and interfacing with <strong>ICANN</strong>, the non-profit organization responsible for managing the huge number of registered domain names, among other things. Domains typically cost between $10&ndash;$15 per year to maintain, which I think is a pretty reasonable price for carving out your own little place in the Internet. While some registrars may include some number of email addresses on the domain your purchased, simply buying a domain name is separate from creating a website. After all, we now know that a domain name is simply an alias for some IP address, which by nature has to be attached to some Internet-connected and publically-accessible device! Unfortunately then, hosting a website usually incurs a monthly cost to rent some hardware in addition to the annual fee associated with a domain name, but such is life on the Interwebs. More on hosting your own website later, though!</p>\n<h2>URLs</h2>\n<p>What we see in our web browser's address bar is often much more than simply a domain name. Usually, we locate pages on the Internet using <strong>URLs</strong>, or uniform resource locators. As its name suggests, the goal of a URL is to identify a specific <strong>resource</strong> on the Internet. cnn.com is one website, but it contains many different resources, like the home page, sports page, weather page, and so on. Each news story on CNN (which has a unique URL) can also be considered a resource, and so can the various images that appear on the page, since they too can be accessed via a URL. The word \"resource\" sounds a bit abstract at first, but you can think of a resource as something that you want to access on the Internet, whether that be a video of a cat or a web page of cat facts.</p>\n<p>URLs have a few different pieces, and a canonical URL looks something like this: <code>scheme://username:password@domain.tld:port/path?query_string#fragment_id</code>. Let's take a look at the different parts of a URL.</p>\n<ul>\n<li>\n<p><strong>scheme</strong>. The scheme describes the format in which information will be transferred between your computer and the machine responding to you. A scheme called <strong>HTTP</strong>, which we'll see in much more detail in the next section, is currently hte most common, but you also might run into some URLs using FTP. The scheme is followed by a colon and two slashes.</p>\n</li>\n<li>\n<p><strong>username</strong> and <strong>password</strong>. Using a technology called <strong>basic auth</strong>, some sites that require a login allow you to put your credentials right in the URL. Not all sites support this feature, though, so you can't just put your username/password combo in any URL and expect it to work. A colon separates the username and password, and the password is followed by an @ character.</p>\n</li>\n<li>\n<p><strong>domain</strong>. Next up is the domain, which is simply an easier-to-remember alias for a numerical IP address.</p>\n</li>\n<li>\n<p><strong>tld</strong>. All domains end in a TLD, and a dot separates the domain name from its TLD.</p>\n</li>\n<li>\n<p><strong>port</strong>. When contacting a server, you can also specify a port number to contact a specific service on the server. More on these in the next section! The port is prefixed with a colon.</p>\n</li>\n<li>\n<p><strong>path</strong>. The path identifies which resource on the server you're looking for. Slashes are typically used to create hierarchy among resources.</p>\n</li>\n<li>\n<p><strong>query string</strong>. The query string allows additional information to be sent to the server. Typically, the query string consists of <strong>key-value pairs</strong>, where a single pair associates a value with some identifier for the value. For example, a key-value pair like \"foo=bar\" says that I want to send along the value \"bar\" in the URL, and whoever is responding to my request can access the value with the key \"foo.\" The query string starts with the ? character, and the &amp; character separates key-value pairs.</p>\n</li>\n<li>\n<p><strong>fragment</strong>. The fragment provides some additional information that can be used by the web browser. This information isn't sent along to the server, so it can be used only by the client. The fragment is prefixed with the # character.</p>\n</li>\n</ul>\n<p>More concretely, a URL with all of these parts might be: <code>http://tommy:secret@example.com:80/news/story.html?wolf=blitzer#situation</code>. Let's label the terms we just saw:</p>\n<p><img alt=\"URL\" src=\"/static/img/7-url.png\" /></p>\n<p>You may also have heard the term <strong>URI</strong> used to describe what you type into your web browser's address bar. URIs and URLs are actually different things, though the two terms are commonly conflated. URIs, or uniform resource identifiers, are actually more general than URLs, as they serve simply to <em>identify</em> something, not necessarily <em>locate</em> something. The \"L\" in URL does indeed stand for \"locator,\" and that's because the purpose of a URL is to describe how to find some resource on a network. In doing so, a URL can also serve as a URI for that resource, since we can say that a resource's location identifies it. For example, saying that my name is \"Tommy MacWilliam\" identifies me, but it doesn't give any information about how to locate me. On the other hand, the address \"33 Oxford St., Cambridge, MA, USA, Planet Earth\" both describes the location of a building and identifies it (since there is one building with that address). So, a URL is also a URI, but a URI isn't necessarily a URL. If you head to your local library or bookstore, you can also find an example of something that is a URI but not a URL: ISBN numbers. If unfamiliar (because who reads books anymore anyway?), an ISBN is a unique number assigned to published books; an ISBN for one of my favorite books, <em>Alice's Adventures in Wonderland</em>, is 9780811822749. Formally, this is called a <strong>URN</strong>, or uniform resource name, and is officially expressed as <code>urn:isbn:9780811822749</code>. Again, this ISBN number certainly identifies this great book, but it doesn't tell you where you can go buy it.</p>\n<p>Sounds like URIs are kinda abstract, so let's come back to URLs, which we type into the address bar every day. We said before that an image on a web page or a problem set PDF is a resource, but many URLs don't actually map to a file on disk. A URL that is a part of a web <strong>API</strong>, or application programming interface, could be one example. API is a pretty common buzzword in the tech word today, and an API (in the context of web applications, anyway) is simply a way of exposing information via a standardized structure of URLs. By creating an API, or a set of URLs other people can access, a site can make information available in a more dynamic way than creating actual files on disk. Facebook, for example, has an API that allows you to get information from users' Facebook profiles, and Google has APIs that allow you to access your events on Google Calendar or search YouTube.</p>\n<p>Let's take a look at an example of an API. The MBTA (the organization that runs the Boston subway system, if you're unfamiliar), has a cool API that makes real-time train information available. For example, if we head to <a href=\"http://developer.mbta.com/lib/rthr/red.json\">this URL</a>, we can see a live schedule for the red line. However, this page doesn't look as shiny as a Google Map showing train locations. Instead, this data is formatted in <strong>JSON</strong>, which is a standardized, machine-readable encoding of information. Now, other software developers can use this information to build cool apps! While this URL might point to an actual file called \"red.json\" somewhere on an MBTA server, since the positions of trains are constantly changing, there's a good chance that this URL is more dynamic than simply a static file. A bit later, we'll see how this might actually be implemented!</p>\n<h2>Contacting a Server</h2>\n<p>Alright, let's take a step back and tie together what we've seen in the past couple sections. When we make a request to a web page like CNN, we probably do so using its domain name, cnn.com. So, the first thing your web browser needs to do is figure out the IP address that corresponds to cnn.com. This is where DNS comes in. Your web browser will make a request to the IP address of a DNS server, which may or may not know the IP of cnn.com. If it doesn't, then it will ask a root DNS server, which will then query a TLD DNS server, which will forward the request along to an authoritative name server that knows the IP address for cnn.com. This response will eventually make its way back to your web browser. Now that your web browser has an IP address, it's ready to request some data. However, your computer isn't directly connected to the computer behind that IP address. Instead, the request will be forwarded along to a router on the same network as your computer. This router probably doesn't know where cnn.com is, but it has an entry in its routing table that tells it where the next nearest router is. So, the router will forward the request along to a router that is closer to the final destination, and eventually, your request will reach its final destination!</p>\n<p>We still haven't seen, though, <em>how</em> exactly your request is sent, and how sites like cnn.com know what you're looking for. Before we discuss that, let's take a brief detour through Internet history!</p>", "title": "Eminent Domain Names", "id": "domains", "tags": ["Domain Names", "DNS", "Hosts", "DNS Records", "Net Neutrality", "TLDs", "URLs", "URIs"], "sequence": 5}, "protocols": {"content": "<h2>Introduction</h2>\n<p>The Internet is an extremely heterogenous environment. Not only do a huge variety of devices using different hardware components need to be able to communicate with each other over the Internet, but there's also a good chance that those devices are powered by different operating systems and software. In order for different devices to talk to each other, they need to agree upon some standardized way of communicating. That way, even if networked computers are running different hardware and software, they'll be able to communicate because they're all following the same rules and method of communicating that were established by a formal, explicit <strong>protocol</strong>.</p>\n<h2>Protocols</h2>\n<p>We obey plenty of protocols in our everyday lives. For example, when you meet someone new, you might say hello and extend your hand. Your new friend might then then say hello back to you, grab your hand, and shake it. After a few solid shakes, both of you will release the other's hand, and perhaps you'll begin to talk about the weather. After all, Cambridge <em>is</em> really nice this time of year. Even if you've never met this new person at all, you both obeyed the same standards of behavior. Because society has established the handshake protocol, both you and your friend knew exactly what to do without any additional instruction. This is essentially the goal for networked computers: even if two computers have never communicated before, there needs to be some way of exchanging information in a way that is agnostic to the software running on both devices.</p>\n<p>We've actually already seen a protocol in action. Remember DHCP? Turns out the \"P\" in DHCP indeed stands for \"protocol,\" which is what we'll be focusing on now. In case you forget (heck, I sure did), DHCP is the process through which your computer obtains an IP address so it can communicate on a network. Ideally, we'd like any type of computer to connect to the network, whether that computer be a Mac, a PC, or a mobile phone. However, we've seen that these devices may be running different operating systems, all of which could have their own way of doing things. So, all of these different devices need to agree on some sort of procedures that they'll follow regardless of the software they're running. DHCP is simply an agreed-upon, standardized set of steps that all devices that want to connect to a network will follow.</p>\n<p>We've already seen how DHCP works at a high level, but let's review the protocol's steps.</p>\n<ol>\n<li>\n<p>The client wishing to connect to the network broadcasts a DHCPBROADCAST message to the network in order to locate the network's DHCP servers.</p>\n</li>\n<li>\n<p>A DHCP server receives the broadcast and responds with a DHCPOFFER message, whose purpose is to assign the device an IP address. This message contains an IP for the device to use on the network, the amount of time that IP is valid for, and the IPs of DNS servers on the network that the device should use to resolve domain names, listed in order of preference.</p>\n</li>\n<li>\n<p>After the client receives the DHCPOFFER, it sends the server a DHCPREQUEST message in order to request to use the IP address. This request contains the same IP that was assigned in the DHCPOFFER.</p>\n</li>\n<li>\n<p>Finally, the server responds with a DHCPACK message, which acknowledges that it has received the request and completes the DHCP process.</p>\n</li>\n</ol>\n<p>As you can see, the steps of the DHCP protocol are formal and clearly defined, but they're not designed for any type of hardware or software in particular. Instead, the people writing the software for Macbooks and iPads simply have to follow the steps that DHCP sets out, and their devices will be able to connect to networks.</p>\n<h2>HTTP Requests</h2>\n<p>Alright, now that we have a handle on what protocols are, let's take a look at a protocol you probably use every day. We've talked about accessing data on CNN.com, but we haven't really said anything yet about what a request to CNN or the response from Wolf Blitzer looks like. Just as DHCP defined a set of steps for devices to follow, <strong>HTTP</strong>, or hypertext transfer protocol, defines lays out a process for requesting data from a web page.</p>\n<p>Typically, HTTP communication happens between two devices. Recall that one of these devices is called the <strong>client</strong>, which is the computer that's requesting information from some other computer. These requests usually come from a <strong>web browser</strong>, which is the program that you use to browse the web. Today, popular web browsers include Google Chrome, Mozilla Firefox, Apple Safari, and Microsoft Internet Explorer. On the other end of the request is a <strong>server</strong>, which is simply the name for a computer dedicated to powering a website. Web servers run specialized software that is designed to handle web requests, and modern web servers may use programs like <a href=\"http://www.apache.org/\">Apache</a> and <a href=\"http://nginx.org/\">nginx</a>.</p>\n<p>Let's first take a look at what goes into an HTTP request created by your web browser. Based on the links you click and what you type into the address bar, the web browser will create these HTTP requests behind the scenes, so let's go ahead and take the hood off that process. HTTP requests are written in plain text, so they're easy for us as humans to read and write. Here's what an HTTP request my browser might generate when I head to my Facebook news feed:</p>\n<pre><code>GET /home.php HTTP/1.1\n\nHost: www.facebook.com\n</code></pre>\n<p>This might look a bit cryptic at first, so let's break this down a bit. The first word, \"GET\" is the HTTP <strong>method</strong>, sometimes called the HTTP <strong>verb</strong>, which describes the request as an action. Here, we want to get some data from Facebook's homepage, so it makes sense that we'd want to use an HTTP GET method. HTTP specifies that these methods have to be written in ALL CAPITAL LETTERS, so don't worry, I'm not yelling at you. Next is a single space, which is specified by HTTP and not something that I just added for readability. After the space is something that looks like a URL. This isn't a complete URL, since it's missing a few necessary parts at the beginning, but it does contain the path to the resource we're requesting. Then, after another space, we have the version of HTTP that we're speaking. HTTP version 1.1 happens to be the latest accepted version of HTTP, so we'll simply use that. Now it looks like we pressed the \"Enter\" key, which creates a character called a carriage return, so we started up a new line. On this new line, we'll have a series of key-value pairs. Remember, key-value pairs are ways to pass along additional information using any number of parameters we want. Here, we're only passing one key-value pair, in which we tell the server that the value of \"Host\" is \"www.facebook.com.\" This value is essentially the rest of the URL that we'd like to access. While the path goes in the first line of the HTTP request, the domain that the request should be sent to is passed along as a separate (non-optional) key-value pair. Why did I decide to do that? I didn't! This is something that's been specified by HTTP, so in order for my HTTP request to be valid, I have to follow HTTP's guidelines. I don't make the rules, I just enforce them.</p>\n<p>We can use a program called <code>telnet</code> to send HTTP requests to servers. Telnet should already be installed on Macs, and you can enable it on Windows via <a href=\"http://windows.microsoft.com/en-us/windows-vista/telnet-frequently-asked-questions\">these steps</a>. If we open a Terminal and enter...</p>\n<pre><code>telnet facebook.com 80\n</code></pre>\n<p>...then we should see a prompt where we can start typing an HTTP request. That <code>80</code> is the <strong>port</strong> we'll be connecting to. Back when we looked at NAT, we mentioned that requests had a source port. Many protocols also specify a <strong>destination port</strong> to which requests should be sent. If different protocols are listening for messages on different ports, then we can run many different services on the same machine without running into any confusion! Let's type in that HTTP request that we just saw and press enter. This will send the request to a server at facebook.com.</p>\n<h2>HTTP Responses</h2>\n<p>Once the server receives this request, it has to decide how it should handle it. Based on our request, it looks like the server might have to do something with a file called <code>home.php</code>. Eventually, the server will be ready to send us some data to respond to our request. Not only does HTTP standardize how requests should be made, but it also describes what responses to requests should look like. This response will be divided into two parts: the <strong>headers</strong> and the <strong>body</strong>. First, let's look at the headers, which could look something like this:</p>\n<pre><code>HTTP/1.1 200 OK\n\nDate: Wed, 30 Jan 2013 21:43:11 GMT\n\nServer: Apache/2.2.22 (Fedora)\n\nContent-Length: 2422\n\nContent-Type: text/html; charset=UTF-8\n\nConnection: close\n</code></pre>\n<p>This looks a bit like the request we sent to Facebook, but it isn't quite the same. On the first line, we again have the version of HTTP that we're using to communicate, which is still v1.1 (since there isn't really a reason to use anything else). On the second half of the first line is the HTTP <strong>response code</strong>, also called status codes. The response code tells us whether or not something went wrong with the request. In this this, it looks like everything went well, since we received the code <code>200</code> back, which corresponds to a status of <code>OK</code>. If we instead had made a request to a page that doesn't exist, like <code>http://www.facebook.com/asdf</code>, the first line in our HTTP response would look something like this:</p>\n<pre><code>HTTP/1.1 404 Not Found\n</code></pre>\n<p>Here, we received a different status code: <code>404</code>. HTTP dictates that this response code should be sent when a request is made to a URL that doesn't actually point to a valid resource on the server. So, it's up to the web server to decide whether or not a request was successful and send back the appropriate status code. Here are a few other status codes that you'll commonly encounter on the web. You can also browse a more complete list <a href=\"https://developer.mozilla.org/en-US/docs/HTTP/HTTP_response_codes\">here</a>.</p>\n<table class=\"table table-bordered\">\n\n    <thead>\n\n        <tr>\n\n            <th>Status Code</th>\n\n            <th>Status Text</th>\n\n            <th>Meaning</th>\n\n        </tr>\n\n    </thead>\n\n    <tbody>\n\n        <tr>\n\n            <td>200</td>\n\n            <td>OK</td>\n\n            <td>The request was completed successfully.</td>\n\n        </tr>\n\n        <tr>\n\n            <td>301</td>\n\n            <td>Moved Permanently</td>\n\n            <td>The resource at this URL has moved, so use a different URL in the future.</td>\n\n        </tr>\n\n        <tr>\n\n            <td>302</td>\n\n            <td>Found</td>\n\n            <td>The resource at this URL has moved temporarily.</td>\n\n        </tr>\n\n        <tr>\n\n            <td>400</td>\n\n            <td>Bad Request</td>\n\n            <td>The request didn't follow the rules of HTTP.</td>\n\n        </tr>\n\n        <tr>\n\n            <td>401</td>\n\n            <td>Unauthorized</td>\n\n            <td>You'll need to log in to access the resource at that URL.</td>\n\n        </tr>\n\n        <tr>\n\n            <td>403</td>\n\n            <td>Forbidden</td>\n\n            <td>You are not allowed to access the resource at that URL.</td>\n\n        </tr>\n\n        <tr>\n\n            <td>404</td>\n\n            <td>Not Found</td>\n\n            <td>The resource pointed to by that URL doesn't exist.</td>\n\n        </tr>\n\n        <tr>\n\n            <td>500</td>\n\n            <td>Internal Server Error</td>\n\n            <td>The server has encountered an error and cannot properly respond.</td>\n\n        </tr>\n\n    </tbody>\n\n</table>\n\n<p>As you can see, the first digit of status codes can be used to categorize what the status code means. More broadly, status codes can be broken down into these categories:</p>\n<table class=\"table table-bordered\">\n\n    <thead>\n\n        <tr>\n\n            <th>First Digit of Status Code</th>\n\n            <th>Category</th>\n\n        </tr>\n\n    </thead>\n\n    <tbody>\n\n        <tr>\n\n            <td>1</td>\n\n            <td>Informational</td>\n\n        </tr>\n\n        <tr>\n\n            <td>2</td>\n\n            <td>Success</td>\n\n        </tr>\n\n        <tr>\n\n            <td>3</td>\n\n            <td>Redirection</td>\n\n        </tr>\n\n        <tr>\n\n            <td>4</td>\n\n            <td>Client Error</td>\n\n        </tr>\n\n        <tr>\n\n            <td>5</td>\n\n            <td>Server Error</td>\n\n        </tr>\n\n    </tbody>\n\n</table>\n\n<p>Phew, that was a lot on status codes, so let's move on and come back to them a little later. If we look back at our original HTTP response, we can see that after that first line are again a series of key-value pairs, one per line. However, while we only sent one key-value pair in our request, it looks like we got back a whole bunch of key-value pairs in the response. The first pair is pretty simple: this is simply the date and time at which the request was completed. Next, we have some information about the web server that responded to our request. In this case, it looks like the server is running software called Apache (one of the two examples of software that powers web servers that we saw earlier), whose responsibility is to handle these HTTP requests. In parenthesis, we can see that this server is running <a href=\"http://fedoraproject.org/\">Fedora</a>, a form of Linux, as its operating system. As you might expect, if we instead send an HTTP request (using the same telnet command as before!) that looks something like this...</p>\n<pre><code>GET / HTTP/1.1\n\nHost: www.microsoft.com\n</code></pre>\n<p>...included in the response is a key-value pair that instead looks like this:</p>\n<pre><code>Server: Microsoft-IIS/7.5\n</code></pre>\n<p>Here, this server is running version 7.5 of Microsoft's IIS server software, which is simply an alternative to Apache. Not all servers will include the \"Sever\" key-value pair, since the client doesn't really care about what kind of server responded to the request. As we'll see a bit later, this can actually be a security risk, so it's probably a good idea to tell your server to never send back that key-value pair in response to any request.</p>\n<p>Moving right along, the next two lines of the HTTP response look like they have something to do with the contents of the response. First, we have the <code>Content-Length</code>, which tells us how many bytes long the server's response will be. Here, 2422 bytes is around 2 kilobytes, which isn't a whole lot of data. Then, we have the type of content that is being sent back. Back in our discussion of character encodings and ASCII, we said that in order for computers to be able to interpret bits of data, we needed to somehow specify how they were encoded. Here, we're saying that the data that the browser is about to receive will be encoded using UTF-8, which means that our webpage can include snowmen and love hotels. Thank goodness.</p>\n<p>The <code>Content-Type</code> also tells us that the response will be textual data that represents <strong>HTML</strong>, or hypertext markup language. We'll take a much deeper look at HTML once we get into web development much later, but for now, HTML is simply a language that allows us to express how a web page should be organized. For example, <code>&lt;h1&gt;Hello&lt;h1&gt;</code> is one way we could create a heading that says \"Hello\" using HTML. Here, <code>h1</code> is one of many HTML <strong>tags</strong>, which are used to describe content. We'll call <code>&lt;h1&gt;</code> the <strong>start tag</strong>, which starts up a block of content, and <code>&lt;/h1&gt;</code> the end tag, which closes off a block of content (notice that the end tag will always begin with a <code>/</code>). The text \"Hello,\" which lies between the start and the end tag, is what will ultimately be displayed by your web browser as a heading (since that's what the <code>h1</code> tag denotes). Similarly, if we use the <code>p</code> tag instead, we can create paragraphs of text like this: <code>&lt;p&gt;This is a paragraph&lt;/p&gt;</code>. Web browsers almost always allow you to view the HTML used to create the web page you're currently looking at. On a web page, if you select \"View Source\" from your browser's menu, you'll be taken to a page of text containing the HTML for the website you're reading.</p>\n<p>Alright, almost done. The last of our HTTP headers simply says that once the browser has received the entire response, it can close the connection to the web server, since there won't be any more data sent along until it makes another request. Finally, the HTTP response <strong>body</strong>, which comes after the response headers we just looked at, is the main contents of the response. If we visit Facebook's home page, then the response body will actually contain HTML that can be displayed by your web browser and let you catch up with your high school friends. So, you won't actually see any HTTP headers as you're surfing the web using a web browser, as they're used to provide additional information to the client. Most of the time, what we really care about is the body of the response, since that contains the contents of the web page we're visiting.</p>\n<h2>More on HTTP Requests</h2>\n<p>In the above example, we sent an HTTP request with the goal of getting some data from a server. Often, though, we want to send along some data to the server. For example, when we search something using Google, we need to include some type of search query, or else Google won't have any idea what we're looking for. As we saw before, one way to send data to a web server is through the URL's <strong>query string</strong>, which also holds key-value pairs. So, our HTTP request searching Google for cats could be:</p>\n<pre><code>GET /search?q=cats HTTP/1.1\n\nHost: www.google.com\n</code></pre>\n<p>This looks just like the GET request we made to Facebook, except we have different values for the path and host. When performing a search query, our goal is still to <em>get</em> data from Google's servers, which have some information about cats that we'd like to retrieve. So, as we see above, a GET request is still the right way to ask Google for data. However, sometimes we want to send some new information to a server rather than requesting some existing information. For example, when you log into Gmail, you need to send your email and password to Gmail's server, which isn't so much <em>getting</em> information as <em>posting</em> some new information. So, an HTTP POST request would be more appropriate, which could look something like this:</p>\n<pre><code>POST /login HTTP/1.1\n\nHost: www.gmail.com\n\nContent-Type: application/x-www-form-urlencoded\n\nContent-Length: 35\n\n\n\nusername=tommy&amp;password=supersecret\n</code></pre>\n<p>The first line of this request looks just like our request from before, but our HTTP method is now a POST rather than a GET. The next line, in which we specify the domain of the server we're contacting, is also the same. Now, we have two more key-value pairs that we didn't have before, but they should look familiar. Because a POST request is designed to send data, we once again have to specify what kind of and how much data we're sending. Finally, we have the request <strong>body</strong>, which is just like the response body we saw earlier. You'll notice though, that our request data looks just like a URL query string, even though it's not actually stored in the URL. For this to work, we also had to specify a <code>Content-Type</code> of <code>x-www-form-urlencoded</code> above. While this query string format is only one way of transferring data, it is among the most frequently-used way of including information in the body of a POST request. In fact, if you've ever filled out a form online, there's a good chance that the POST request created by your web browser used this content type to transfer data&mdash;that's where the <code>www-form</code> part comes from!</p>\n<h2>HTTP in the Browser</h2>\n<p>Modern web browsers usually allow you to view the HTTP requests and responses that result from loading a web page. In Google Chrome, clicking the menu at the top-right and selecting Tools &gt; Developer Tools should bring up something like the below:</p>\n<p><img alt=\"Network Tab\" src=\"/static/img/9-network.png\" /></p>\n<p>Looks like simply going to Google's home page generated a lot of network traffic! Some of this should look familiar to you, though. In the leftmost column, we have the name of the resource that was requested. Our first request downloaded the HTML for Google's homepage, which tells the browser what should be displayed. In the next column, we can see that an HTTP GET request was used to get Google's homepage, which makes sense because we're simply requesting data rather than sending any new data. Next, we can see the status code and corresponding text, and since the homepage was downloaded without any issues, we got back a 200 OK status code. The next column is the content type of the response, which we've already said is HTML. Finally, we can see how large the response was in kilobytes, as well as how long it took the browser to download the content. However, based on the above, it looks like our browser used more than just one HTTP request to load google.com. After downloading the HTML for http://www.google.com/, the web browser realized that it didn't have all of the data necessary to fully display the page. For example, it looks like the HTML the browser downloaded contains links to some images, like the Google logo we've all come to know and love. However, those images weren't transferred with the HTML that came with in the HTTP response body, since remember, the response <code>Content-Type</code> said it was only text. So, the web browser actually has to go ahead and make new HTTP requests for each image the web page is trying to display. If we look towards the bottom of the above picture, we can see that the Google logo was transferred via a separate HTTP response, this time with a content type of <code>image/png</code>, or a picture. As we'll see later, a web page's HTML can also tell the browser to download other text-based files that change a web site's appearance or functionality.</p>\n<h2>Data Centers</h2>\n<p>Though the process of communicating over HTTP looks like it simply involves two parties, a client and a server, large sites like CNN and Google probably have a huge number of powerful servers behind their websites in order to deal with high demand. As you've probably noticed, running a large number of programs at the same time on your home computer tends to slow it down, perhaps to the point where you'd rather watch paint dry than wait for your email to send. If thousands of people are hitting a website at the same time, then we don't want all of those requests going to the same computer, since a single machine can't handle them all. In the event a website's servers become overwhelmed with the number of requests coming in, then the loading times for people browsing the site will start to increase. Even large websites suffer from this problem! Twitter, for example, has an amazing infrastructure capable of handling millions of Bieber fans tweeting at once, but during events like the Presidential Inauguration, their servers reach their capacity due to the gigantic number of requests coming in at once. Here are a few recently-released photos from Google's data centers, showing their incredible infrastructure:</p>\n<p><img alt=\"Google 1\" src=\"/static/img/9-google1.jpg\" /></p>\n<p><img alt=\"Google 2\" src=\"/static/img/9-google2.jpg\" /></p>\n<p><img alt=\"Google 3\" src=\"/static/img/9-google3.jpg\" /></p>\n<p>Each of the lit-up rows in those columns is a server powering one of Google's many websites! Crazy, right? Google's data centers are located all over the world so Google can give you as fast an experience as they possibly can. After all, you don't want to have to wait for your request to travel all the way across the ocean every time you search for cat videos! The term <strong>latency</strong> is used to describe the delay that can occur as your request is traveling from point A to point B. Related to latency is <strong>bandwidth</strong>, which describes the maximum amount of data that can travel over a network at once. If your request were a car on a traffic-filled highway at rush hour, then latency describes the speed at which cars are moving, while bandwidth describes how many lanes the highway has.</p>\n<p>Naturally, companies like Google want to mimize both latency and bandwidth. While locating servers as close to you as possible will reduce latency, decreasing the amount of data transferred to your computer will minimize bandwidth. If we head to <a href=\"http://google.com\">http://google.com</a> and then select \"View Source\" from our web browser, we can see the actual data that was transferred from Google's servers. Looks like a big jumbled mess to me! However, this is actually intentional on Google's part: they're removed unnecessary things like whitespace and shorted words to minimize the amount of data that they have to send to your computer. Because these responses are small, each will take less time to reach your computer and reduce the traffic on the highway! (If only that were the case on Fridays at 5pm.) In addition to compressing the textual data that makes up a web page, many sites also combine all of the images on a page into one single image. For example, the home page of <a href=\"http://reddit.com\">reddit</a> contains several different cute alien pictures. However, using the Developer Tools just like before, we can see that only a single image is downloaded, and it looks a little something like this:</p>\n<p><img alt=\"Sprite\" src=\"/static/img/9-sprite.png\" /></p>\n<p>Here, we have a bunch of icons combined into a single image, since it would be pretty wasteful for your browser to have to go and download each one of these small things one-by-one. These may seem like super minor changes, but keep in mind that they really add up! Even if Google saves just 100 bytes by compressing their home page, because that page receives upwards of a billion hits per day, Google ends up with hundreds of gigabytes of savings! So, for huge sites like Google and Facebook, every little bit (pun intended) matters, since any wasted data can end up costing a <em>lot</em> of money.</p>\n<p>Let's shift gears a bit. Now that we've taken a look at how web browsers send and receive information, let's look at something else you probably use every day: email!</p>", "title": "Protocol Me, Maybe", "id": "protocols", "tags": ["Bandwidth", "HTTP", "Latency", "Protocols", "Status Codes"], "sequence": 6}, "email": {"content": "<h2>Introduction</h2>\n<p>We're probably all familiar with email. Whether we're logged into Gmail.com or Verizon.net in a web browser or using Microsoft Outlook or Apple Mail on the desktop, the cat videos we send to our friends and co-workers are all delivered using the same email <strong>protocols</strong>. We're still using the same basic idea behind protocols like DHCP and HTTP: even if we have different devices on our network running different software, they call all communicate if everyone follows the same set or rules. While making a request to a web page used only one protocol, since HTTP defines rules for both requests and responses, we'll look at three different protocols that may or may not be used in the process of sending an email. First, we'll take a look at how your email containing a link to a cat video is sent to your co-worker, and then we'll see what happens when you log into your inbox and read email messages.</p>\n<h2>Sending Emails with SMTP</h2>\n<p>Just like we needed a web server to respond to clients' HTTP requests, we'll also need a server whose purpose in life is to send and receive emails. This server is called an <strong>SMTP</strong> server, which stands for Simple Mail Transfer Protocol. So, when you send an email to another email address, two SMTP servers, one for the sender and one for the receiver, will communicate in order to deliver the message from point A to point B. As this name suggests, the sending and receiving of emails actually isn't very complicated a process! First, you'll sit down at an email client (also called a mail user agent, or MUA), whether that be an app on your phone or a web interface, and compose a message, as well as choose a subject, recipients, CC'd (or carbon copied) recipients, and BCC'd (or blind carbon copied) recipients. For the sake of this example, let's just say you're using Gmail, but the same process applies when sending an email from your iPhone or Outlook. Once you hit send, your message will be sent to an SMTP server owned and managed by Gmail (also called an MDA, or mail delivery agent). Since services like Gmail are pretty popular, there's a good chance that you're not the only one to be sending an email at any given point in time. So, your message will probably join a queue of other email messages on an SMTP server. To be fair to its customers, Gmail will handle the messages in the order they come in.</p>\n<h2>Data Structures: Queues and Stacks</h2>\n<p>By the way, the concept of a <strong>queue</strong> is a pretty common one in computer science. A queue is any collection of things where items will be processed in the order they came in. For example, the line for the <a href=\"http://en.wikipedia.org/wiki/Rock_'n'_Roller_Coaster_Starring_Aerosmith\">Rock 'n' Roller Coaster</a> at Walt Disney World is a queue (and based on my experience, a pretty long one at that). The people who got in line at 10am will get to rock and roll before the people who got in line at 11am, so we have a queue of people. (I know what you're thinking, experienced Disney World travelers who use the <a href=\"https://disneyworld.disney.go.com/guest-services/fast-pass/\">FastPass</a> system to jump ahead of the line, but wait your turn this time.) On the other hand, consider a <strong>stack</strong> of plates. Unless you want the stack to fall over, you'll want to take a plate from the top of the pile rather than the bottom of the pile. That means that the first plate you added to the stack will always be at the bottom of the pile, while the last plate you added to the stack will be at the top of the pile. So, you'll end up taking plates off in the reverse of the order you added them to the stack, which is essentially the opposite of a queue! While we might say a queue is <strong>first in, first out</strong>, a stack is <strong>last in, first out</strong>.</p>\n<h2>DNS, Again</h2>\n<p>Okay, let's stop talking about plates before I get too hungry. Your email is in a queue on a Gmail SMTP server, and it has finally reached the front of the line, which means it's time for your message to be sent. Now, the SMTP server needs to figure out where to send the email. As you've probably noticed, email addresses are always in the form <code>name@website.com</code>, where the @ character separates a unique username and the domain (which could have a subdomain as well) of a server. Using the email address's domain, the sending SMTP server can figure out the receiving SMTP server to deliver the message to. We know that we'll need an IP address in order to send any kind of message across the Internet, but all we have is a human-readable domain name... Hmm... Whatever could we do? If only we had a process for translating domain names into IP addresses!</p>\n<p>DNS to the rescue! Remember, DNS is just a process for translating a human-readable name into some kind of IP address. Back when we looked at DNS records, we saw a type of record called an MX, or mail exchange, record. Here's where those are going to come into play. The MX record tells the sending SMTP server the IP address of the server that will receive mail for the domain. So, Gmail's SMTP server can use DNS to determine the IP address of the recipient's SMTP server, and then send along a request containing the email. This request will travel through the Internet just like the traceroute and HTTP requests we've already seen! So, the process of sending an email involves one SMTP server communicating with another SMTP server, which looks like this:</p>\n<p><img alt=\"SMTP Diagram\" src=\"/static/img/10-smtp.png\" /></p>\n<h2>Email Headers</h2>\n<p>Let's now take a look at exactly what the contents of one of these requests looks like. Just like HTTP requests, emails also have headers that we typically don't see when we open up a message. In the Gmail UI, you can click \"Show original\" to show the full contents of the email messsage that was sent. Here's a sample of what an email actually looks like:</p>\n<pre><code>Delivered-To: unicodelovehotel@gmail.com\n\nReceived: by 10.223.64.143 with SMTP id e15csp17700fai;\n\n        Sat, 2 Mar 2013 09:46:00 -0800 (PST)\n\nX-Received: by 10.49.12.143 with SMTP id y15mr25034564qeb.27.1362246358685;\n\n        Sat, 02 Mar 2013 09:45:58 -0800 (PST)\n\nReturn-Path: &lt;unicodelovehotel@live.com&gt;\n\nReceived: from col0-omc1-s9.col0.hotmail.com (col0-omc1-s9.col0.hotmail.com. [65.55.34.19])\n\n        by mx.google.com with ESMTP id hc10si11831922qab.44.2013.03.02.09.45.57;\n\n        Sat, 02 Mar 2013 09:45:58 -0800 (PST)\n\nReceived-SPF: pass (google.com: domain of unicodelovehotel@live.com designates 65.55.34.19 as permitted sender) client-ip=65.55.34.19;\n\nAuthentication-Results: mx.google.com;\n\n       spf=pass (google.com: domain of unicodelovehote@live.com designates 65.55.34.19 as permitted sender) smtp.mail=unicodelovehotel@live.com\n\nReceived: from COL002-W67 ([65.55.34.7]) by col0-omc1-s9.col0.hotmail.com with Microsoft SMTPSVC(6.0.3790.4675);\n\n     Sat, 2 Mar 2013 09:45:41 -0800\n\nX-EIP: [P1MGsuJd3RDrA2h/Chca1T2JhXgCEJS1]\n\nX-Originating-Email: [unicodelovehotel@live.com]\n\nMessage-ID: &lt;COL002-W672344BAD5002880FBD489C3F80@phx.gbl&gt;\n\nReturn-Path: unicodelovehote@live.com\n\nContent-Type: multipart/alternative;\n\n    boundary=\"_a3224380-c68b-4f38-84d4-fd4a8233b8b2_\"\n\nFrom: Unicode Love Hotel &lt;unicodelovehotel@live.com&gt;\n\nTo: \"unicodelovehotel@gmail.com\" &lt;unicodelovehotel@gmail.com&gt;\n\nSubject: I love cats\n\nDate: Sat, 2 Mar 2013 12:45:41 -0500\n\nImportance: Normal\n\nMIME-Version: 1.0\n\nX-OriginalArrivalTime: 02 Mar 2013 17:45:41.0855 (UTC) FILETIME=[C245C6F0:01CE176D]\n\n\n\n--_a3224380-c68b-4f38-84d4-fd4a8233b8b2_\n\nContent-Type: text/plain; charset=\"iso-8859-1\"\n\nContent-Transfer-Encoding: quoted-printable\n\n\n\nI just wanted to let you know how much I love cats! They're the best.            =\n\n          =\n\n\n\n--_a3224380-c68b-4f38-84d4-fd4a8233b8b2_\n\nContent-Type: text/html; charset=\"iso-8859-1\"\n\nContent-Transfer-Encoding: quoted-printable\n\n\n\n&lt;html&gt;\n\n&lt;head&gt;\n\n&lt;style&gt;&lt;!--\n\n.hmmessage P\n\n{\n\nmargin:0px=3B\n\npadding:0px\n\n}\n\nbody.hmmessage\n\n{\n\nfont-size: 12pt=3B\n\nfont-family:Calibri\n\n}\n\n--&gt;&lt;/style&gt;&lt;/head&gt;\n\n&lt;body class=3D'hmmessage'&gt;&lt;div dir=3D'ltr'&gt;I just wanted to let you know ho=\n\nw much I love cats! They're the best.&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;=\n\n\n\n--_a3224380-c68b-4f38-84d4-fd4a8233b8b2_--\n</code></pre>\n<p>Yikes! Let's break this down a bit. Our message, like an HTTP request, is divided into two parts, with headers on the top and the body on the bottom. Just like last time, our headers consist of key-value pairs. We're actually going to want to read these from bottom to top (since we have newer timestamps on the top and older timestamps on the bottom). Looks like we have the date the message was sent, the subject of the email, the recipient of the email, and the sender of the email. Then, we have a key of <code>Content-Type</code>, which should look familiar! We'll come back to that one in a bit. Now, it looks like we have some keys that start with <code>Received</code>. The first <code>Received</code> header says that an SMTP server owned by Microsoft (and once Hotmail, it looks like) received the message from some other IP. Because I sent the message using Outlook.com's web UI, that's probably the IP of the web server I was on at the time. The next <code>Received</code> header says that an SMTP server owned by Google received the message sent by Microsoft's SMTP server.</p>\n<p>After the headers, we have the body of the request, where our message can be found. Looking closely, it looks like the text of our email has actually been sent twice? What gives? If we look back at that <code>Content-Type</code> header at the top of the email, it looks like we have a value of \"multipart,\" which seems to suggest our content will consist of multiple parts. From the same header value, we can see that we have a boundary of \"_a3224380-c68b-4f38-84d4-fd4a8233b8b2_\" that separates the two parts of the email message. The first part of the email is our message using only plain text (e.g., ASCII), while the second part of our message is using HTML to create some formatting (like fonts and colors). Modern web apps like Gmail.com and Outlook.com will use the HTML version of a message (so you can send emails with some additional formatting), while other email clients may prefer only the text-only version.</p>\n<h2>Interacting with SMTP</h2>\n<p>In order to send a message using an SMTP server, the email client will issue a series of commands. The server will reply to each of these commands with a response code (just like those HTTP response codes) that lets the client know whether or not the command was successful. We can use a program called <code>openssl</code> to establish a connection to an SMTP server and then manually send it the commands necessary to send an email via SMTP! If on a Mac, this should already be installed for you, and if on Windows, you can download it <a href=\"http://openssl.org/related/binaries.html\">here</a>. Now, if we open up a Terminal, we can run:</p>\n<pre><code>openssl s_client -ssl3 -connect smtp.gmail.com:587 -starttls smtp -crlf\n</code></pre>\n<p>This will open up a session with the server at <code>smtp.gmail.com</code> on port 587. In response, we'll see something like this:</p>\n<pre><code>SSL-Session:\n\n    Protocol  : SSLv3\n\n    Cipher    : RC4-SHA\n\n    Session-ID: xxx\n\n    Session-ID-ctx:\n\n    Master-Key: xxx\n\n    Key-Arg   : None\n\n    Start Time: 1362263768\n\n    Timeout   : 7200 (sec)\n\n    Verify return code: 0 (ok)\n\n---\n\n250 PIPELINING\n</code></pre>\n<p>This means we have a connection to the server, and we're ready to start sending commands. SMTP actually doesn't define very many commands, since it's the <em>simple</em> mail transfer protocol, after all. Let's say hello to the SMTP server. If we type <code>helo</code> at the prompt and then press enter, we'll see something like:</p>\n<pre><code>helo\n\n250 mx.google.com at your service\n</code></pre>\n<p>Aww, so cute. Just like you need to log in to your account when you visit Gmail.com, you'll also need to log into your account here. To start the login process, type <code>auth login</code> at the prompt. You'll get something like this:</p>\n<pre><code>auth login\n\n334 VXNlcm5hbWU6\n</code></pre>\n<p>Uh... what? That 334 is a response code, though different than the response codes we saw with HTTP, and the string of characters VXNlcm5hbWU6 is actually the word \"User\" encoded using <a href=\"http://en.wikipedia.org/wiki/Base64\">Base64</a>, which is simply <em>another</em> character encoding that translates characters to ASCII characters. Don't worry too much about how or why it's used, but there are many utilities online that will convert words to Base64 for you, like <a href=\"http://www.base64encode.org/\">base64encode.org</a>. Since the server sent a response using Base64, we'll need to reply using Base64 as well. Open up that web page and type in your Gmail username. For this demo, we'll use <code>unicodelovehotel@gmail.com</code>, which is <code>dXNlcm5hbWVAZ21haWwuY29t</code> in Base64. So, I'll just paste that string and hit enter. Now, I'll see:</p>\n<pre><code>dXNlcm5hbWVAZ21haWwuY29t\n\n334 UGFzc3dvcmQ6\n</code></pre>\n<p>Sigh, Gmail is having fun being difficult. As you might guess, though, we're now being asked for our password, also in Base64. Let's assume my password is just <code>password</code> (which it really shouldn't be...), which is <code>cGFzc3dvcmQ=</code> in Base64. Again, I'll just paste that and hit enter.</p>\n<pre><code>cGFzc3dvcmQ=\n\n235 2.7.0 Accepted\n</code></pre>\n<p>Woohoo! English again! Now, We've successfully authenticated with Gmail's SMTP server, and we're ready to send a message. We'll first use the <code>MAIL FROM</code> command to specify the email address we're sending from:</p>\n<pre><code>mail from:&lt;unicodelovehotel@gmail.com&gt;\n\n250 2.1.0 OK o5sm28186399qao.12 - gsmtp\n</code></pre>\n<p>Looks good, now we'll use the <code>RCPT TO</code> command to specify the email address we're sending to:</p>\n<pre><code>rcpt to:&lt;unicodelovehotel@live.com&gt;\n\n250 2.1.5 OK o5sm28186399qao.12 - gsmtp\n</code></pre>\n<p>Finally, we can specify the body of our email. To do so, we'll need to send the <code>DATA</code> command like this:</p>\n<pre><code>data\n\n354  Go ahead o5sm28186399qao.12 - gsmtp\n</code></pre>\n<p>Don't mind if I do, Gmail. Just like before, we'll specify a few email headers, followed by our email's body:</p>\n<pre><code>From: &lt;unicodelovehotel@gmail.com&gt;\n\nTo: &lt;unicodelovehotel@live.com&gt;\n\nSubject: I love cats\n\nFigured I would send you another reminder that I like cats.\n\n.\n</code></pre>\n<p>Here, we're not bothering with any kind of multipart encoding; we're just gonna send text. Putting a single <code>.</code> on a line and then pressing enter tells the SMTP server that we're all done, and we should see something like this:</p>\n<pre><code>250 2.0.0 OK o5sm28186399qao.12 - gsmtp\n</code></pre>\n<p>And we're done! We just sent an email using Gmail's SMTP server. So, behind the scenes, Gmail.com is following exactly this process to communicate with a Google SMTP server when you press the \"Send\" button on an email. To recap, our entire session looked like this:</p>\n<pre><code>helo\n\n250 mx.google.com at your service\n\nauth login\n\n334 VXNlcm5hbWU6\n\ndXNlcm5hbWVAZ21haWwuY29t\n\n334 UGFzc3dvcmQ6\n\ncGFzc3dvcmQ=\n\n235 2.7.0 Accepted\n\nmail from:&lt;unicodelovehotel@gmail.com&gt;\n\n250 2.1.0 OK o5sm28186399qao.12 - gsmtp\n\nrcpt to:&lt;unicodelovehotel@live.com&gt;\n\n250 2.1.5 OK o5sm28186399qao.12 - gsmtp\n\ndata\n\n354  Go ahead o5sm28186399qao.12 - gsmtp\n\nFrom: &lt;unicodelovehotel@gmail.com&gt;\n\nTo: &lt;unicodelovehote@live.com&gt;\n\nSubject: I love cats\n\nFigured I would send you another reminder that I like cats.\n\n.\n\n250 2.0.0 OK o5sm28186399qao.12 - gsmtp\n</code></pre>\n<h2>Reading Emails with POP3</h2>\n<p>Great, now we know how SMTP handles the sending of emails! Viewing and download emails, though, is a whole different process. At this point in the story, we've sent an email from SMTP server A to SMTP server B, and we'd now like to move that message from an SMTP server to somewhere we can read it. Today, there are actually two different protocols for doing so. First, we'll take a look at <strong>POP3</strong>, the third version of the Post Office Protocol (clever, right?). POP3 defines a process through which a client can communicate with a POP3 server in order to list email messages and retrieve them so they can be read. Though we'll be using different commands this time, this process will be just like the process of sending an email via SMTP, since we'll be sending and receiving messages from a server.</p>\n<p>This time, let's make a connection to Gmail's POP3 server with:</p>\n<pre><code>openssl s_client -connect pop.gmail.com:995\n</code></pre>\n<p>We should see something like:</p>\n<pre><code>SSL-Session:\n\n    Protocol  : TLSv1\n\n    Cipher    : RC4-SHA\n\n    Session-ID: xxx\n\n    Session-ID-ctx:\n\n    Master-Key: xxx\n\n    Key-Arg   : None\n\n    Start Time: 1362265663\n\n    Timeout   : 300 (sec)\n\n    Verify return code: 0 (ok)\n\n---\n\n+OK Gpop ready for requests from w.x.y.z i9pf25304130qag.0\n</code></pre>\n<p>Great, we're connected! Like last time, we'll need to log in. However, since POP3 and SMTP are different protocols, we'll use a different command this time. Assuming we're using the same username and password, we'll log in like this:</p>\n<pre><code>user unicodelovehotel@gmail.com\n\n+OK send PASS\n\npass password\n\n+OK Welcome.\n</code></pre>\n<p>Phew, no Base64 this time! Instead, we can just use the command <code>user</code> followed by our username, followed by <code>pass</code> followed by our password. Now, let's say we want to recreate Gmail's homepage and see our inbox. We can use the <code>list</code> command like so:</p>\n<pre><code>list\n\n+OK 334 messages (3177429 bytes)\n\n1 12622\n\n2 4726\n\n...\n</code></pre>\n<p>Looks like I have 334 emails in my inbox, so a busy night is ahead of me. Each number in the list represents a different email, and the number in the second column tells us how large the email is (in bytes). To retrieve one of those emails to read it, we can use the <code>retr</code> command:</p>\n<pre><code>retr 1\n</code></pre>\n<p>And now, I should see the full contents of an email in my inbox, headers and all. Finally, if we want to delete one of those emails, we can use the <code>dele</code> command like this:</p>\n<pre><code>dele 1\n</code></pre>\n<p>So much for my cat email. So, if your email client is using POP3 to read emails from a server, this is exactly what it's doing underneath the hood.</p>\n<h2>Reading Emails with IMAP</h2>\n<p>We said earlier that there are two major protocols for reading email from a server, so let's now take a look at <strong>IMAP</strong>, the Internet Message Access Protocol, which is a bit newer and fancier than POP3. As we saw, POP3 is a bit one-way. We're simply asking the server for information like the messages in our inbox or the contents of a single message, but we're never actually changing anything on the server. So, if we use POP to read an email on an iPhone and then later log in to Gmail.com, the server will report that we haven't read that message yet. Pretty annoying, right? IMAP, on the other hand, defines commands that allow us to interact with the server in both directions so that we can avoid exactly this problem. Other advantages of IMAP include more advanced commands for searching through emails on the server as well as allowing clients to stay connected to the server for longer periods of time. So, when setting up email on your home computer or iPhone, there's a good chance that you want to use IMAP instead of POP. In fact, many email clients now pre-configure popular email services like Gmail, using IMAP as the default way for interacting with the server.</p>\n<p>So, let's check out how IMAP works by creating a connection to a Gmail IMAP server:</p>\n<pre><code>openssl s_client -crlf -connect imap.gmail.com:993\n</code></pre>\n<p>We should see something like:</p>\n<pre><code>SSL-Session:\n\n    Protocol  : TLSv1\n\n    Cipher    : RC4-SHA\n\n    Session-ID: xxx\n\n    Session-ID-ctx:\n\n    Master-Key: xxx\n\n    Key-Arg   : None\n\n    Start Time: 1362266505\n\n    Timeout   : 300 (sec)\n\n    Verify return code: 0 (ok)\n\n---\n\n* OK Gimap ready for requests from w.x.y.z g4if3992710vcq.28\n</code></pre>\n<p>And we're connected! New protocol, new set of commands. Each IMAP command needs to be prefixed with a different tag; by convention, we'll just use the letter \"A\" followed by a different number each time. To login, we can send a single command <code>login</code>, followed by a username and password.</p>\n<pre><code>a1 login unicodelovehote@gmail.com password\n\n* CAPABILITY IMAP4rev1 UNSELECT IDLE NAMESPACE QUOTA ID XLIST CHILDREN X-GM-EXT-1 UIDPLUS COMPRESS=DEFLATE ENABLE MOVE\n\na1 OK unicodelovehotel@gmail.com Unicode Love Hotel authenticated (Success)\n</code></pre>\n<p>Good to go! Let's again figure out how many messages are in our inbox with the <code>select</code> command:</p>\n<pre><code>a2 select inbox\n\n* FLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen $Forwarded $NotJunk)\n\n* OK [PERMANENTFLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen $Forwarded $NotJunk \\*)] Flags permitted.\n\n* OK [UIDVALIDITY 609988978] UIDs valid.\n\n* 11 EXISTS\n\n* 0 RECENT\n\n* OK [UIDNEXT 75666] Predicted next UID.\n\na2 OK [READ-WRITE] inbox selected. (Success)\n</code></pre>\n<p>We mentioned that IMAP was a bit more powerful than POP. In Gmail, there's a tab over to the left that allows you to browse the emails you've sent to others. Using IMAP, we can access all of the emails that have the \"Sent Mail\" label, and we can do the same for any other labels we create inside of the GMail UI:</p>\n<pre><code>a3 select \"[Gmail]/Sent Mail\"\n\n* FLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen $Forwarded $NotJunk)\n\n* OK [PERMANENTFLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen $Forwarded $NotJunk \\*)] Flags permitted.\n\n* OK [UIDVALIDITY 609988982] UIDs valid.\n\n* 8833 EXISTS\n\n* 0 RECENT\n\n* OK [UIDNEXT 11974] Predicted next UID.\n\na3 OK [READ-WRITE] [Gmail]/Sent Mail selected. (Success)\n</code></pre>\n<p>Finally, we can use the <code>fetch</code> command to read emails. If we just want the headers for the first email in our inbox, we can use:</p>\n<pre><code>a4 fetch 1 body[header]\n</code></pre>\n<p>Or, if we want the actual contents of the email, we can use:</p>\n<pre><code>a5 fetch 1 body[text]\n</code></pre>\n<p>Phew, that's enough IMAP for me. As you can see, IMAP gives us a bit more flexibility than POP in terms of querying our inbox for information. Still, both protocols are perfectly valid ways of retrieving email from a server.</p>\n<h2>Email Clients</h2>\n<p>If you've ever set up your email on a desktop client like Outlook or your mobile phone, you probably found some instructions online from your email provider and followed them step-by-step without thinking too much about them. However, now that we know all about SMTP, POP, and IMAP, hopefully this process makes a bit more sense. If you open up a mail client on your desktop or mobile device and go into your account settings, you'll probably see a section devoted to incoming mail and one for outgoing mail. Under incoming mail, there's a good chance you'll see some mention of the address of a POP3 or IMAP server, since that's how your mail client can download the emails that were sent to you. Remember, this process is very similar to a web browser retrieving data from a web server; instead of retrieving web page data, IMAP and POP will be used to transfer the contents of emails. Associated with the POP3 or IMAP server listed in your email app is probably a port, username, and password, which will be used to log into the server, as we saw before. Similarly, under the settings for outgoing mail, you should see some mention of an SMTP server that your app will connect to and issue a series of commands just like the ones we sent earlier. For example, the settings page for my iPod's outgoing mail looks something like this:</p>\n<p><img alt=\"iPod Email\" src=\"/static/img/10-ipod-email.png\" /></p>\n<p>Similarly, the instructions for setting up an email client to work with Gmail can be found <a href=\"http://support.google.com/mail/bin/static.py?hl=en&amp;page=ts.cs&amp;ts=1668960&amp;from=75726&amp;rd=1\">here</a>. Do those IMAP and SMTP settings make sense?</p>\n<h2>Phishing</h2>\n<p>Before we finish up, a quick note on security. We saw that the process of sending an email really just involves logging into a server and sending a series of textual commands. In the examples we saw, we used email addresses that we actually owned in order to send mail. However, there's nothing stopping us from typing any old email address we want when we use the <code>mail from</code> command or the <code>From</code> header. While Gmail's SMTP server has some security measures in place to prevent us from doing that, there's nothing stopping me from running my own SMTP server and sending emails as anyone in the world. So, an attacker might be able to convince unsuspecting email users into sending along their Facebook password, for example, by sending an official-looking email from <code>zuck@fb.com</code>. Of course, even if I send mail as <code>barack@whitehouse.gov</code>, I have no way of actually receiving mail to that address unless I can log into the POP3 or IMAP server that receives emails. Still, this kind of attack, called <strong>phishing</strong>, can lead to some pretty convincing spam!</p>\n<p>That's enough email for now! I think it's time for me to take a break and go tend to my growing inbox. Next, we're gonna go a bit deeper and take a look at how the Internet works at an even lower level!</p>", "title": "Snail Mail", "id": "email", "tags": ["IMAP", "Phishing", "POP3", "Queues", "SMTP", "Stacks"], "sequence": 7}, "tcpip": {"content": "<h2>Introduction</h2>\n<p>In our discussions of networking, DNS, HTTP, and email so far, we've used words like \"request\" and \"response\" to describe <em>something</em> that travels through the Internet. That <em>something</em> could be the CNN home page, a query for the IP address of reddit.com, or the third email in my inbox. However, we've kinda taken for granted that a request knows where it came from and knows where it's going, as well as exactly what information goes into a request. In our final foray into the study of the Internet, let's peel back this last final layer and take a look at exactly what's being sent from router to router on the information superhighway.</p>\n<h2>TCP Fundamentals</h2>\n<p>The delivery of information across the Internet is handled by&mdash;you guessed it&mdash;more protocols! This time, we'll be looking at a suite of protocols called <strong>TCP/IP</strong>; yep, for something as important as sending information through the net, we'll need more than just one protocol! First, let's discuss <strong>TCP</strong>, or Transmission Control Protocol. When an application like Google Chrome wants to send information (like an HTTP request) to another machine on a network, it can use TCP to handle sending messages back and forth with another computer. TCP is <strong>connection-oriented</strong>, which means that two machines communicating using TCP will first establish a connection with each other by sending a greeting back and forth, and then they'll send messages over that connection. With TCP, only the two ends of the communication, in our case the client and the server, need to worry about remembering anything related to the connection. The rest of the devices on the network, like the routers connecting the client and server, are <strong>stateless</strong>, which means they never need to store any data relating to the TCP connection.</p>\n<p>TCP transmits messages by breaking them up into smaller units called <strong>segments</strong>. So, if a web server needs to send a client a large HTTP response, TCP will handle the task of breaking that large message into smaller, more manageable chunks. Each of these segments looks like this:</p>\n<p><img alt=\"TCP Segment\" src=\"/static/img/11-tcp-segment.jpg\" /></p>\n<p>So, a TCP segment keeps track of the source and destination port and some options in addition to the body, or payload, of the message, which is pictured at the bottom. Looks like TCP segments aren't concerned with IP addresses at all, so that much must be handled by IP (whatever that is).</p>\n<p>When we send a request to a web page, we want to make sure that the server's response adheres to something called <strong>reliable data transfer</strong>. Not only do we expect all of the segments transferred from the server to make it all the way to the client, but we also want to make sure they're transferred in order. So, if we head to CNN.com, we don't expect the page to be missing any pictures or for the words on the page to appear out of order! TCP is designed with exactly this in mind. If the network loses parts of the message or delivers them out of order (which actually is exactly what will happen much of the time), then TCP will take care of ensuring everything gets through the way it was meant to be seen, so other protocols like HTTP don't need to worry about re-ordering segments so web pages display correctly. The Internet is a pretty big place, and not every message that's sent across the web actually reaches its destination!</p>\n<h2>Sending a TCP Segment</h2>\n<p>Let's take a look at the process of sending a message over TCP. As you can see in the diagram above, each TCP segment has a field called a <strong>sequence number</strong>, which allows TCP segments to have an ordering associated with them. If a server wants to send a message that's 5,000 bytes long and the maximum size of a TCP segment is 1,000 bytes (though that exact number varies), then five TCP segments will be created, where the first 1,000 bytes could have a sequence number of 0, the second 1,000 bytes could have a sequence number of 1,000, the third 1,000 bytes could have a sequence number of 2,000, and so on. So, even if the client receives these segments out of order, then TCP can use the segments' sequence numbers to reconstruct the original message.</p>\n<p>Looks like sequence numbers handle the issue of segments being delivered out of order, but what about ensuring that all TCP segments successfully reach their destination? To solve this problem, we'll have the receiver send acknowledgments, or <strong>ACKs</strong> for short, that let the sender know that each segment has been received. So, once a sender receives an ACK from the receiver, it knows that a segment has been successfully transmitted! If an ACK is not received, on the other hand, then the sender can't be sure that the receiver has indeed received the segment, so it may need to send that same segment again.</p>\n<p>Each time a segment is sent over TCP, the sender expects to receive an ACK from the receiver. So, the sender will start a timer when it sends along a segment to the receiver and estimate about how long it should take for the receiver to receive the message and send an ACK. If the sender doesn't receive an ACK in the estimated amount of time, called a <strong>timeout</strong>, then the sender will assume that the message was lost and re-send the segment with a re-calculated estimate. For example, the sender might want to double its timeout in order to give the receiver more time. On the other hand, if the receiver is sending ACKs much faster than the sender originally anticipated, then it might want to decrease the window in order to send segments more quickly. So, TCP is constantly adjusting a <strong>sliding window</strong>, which can help prevent network <strong>congestion</strong> by ensuring that too many segments aren't sent at once, which could overwhlem the network.</p>\n<p>Below is a basic example of sending a message using TCP. The sender's message has been broken up into two TCP segments, and the receiver must acknowledge when it has received each segment.</p>\n<p><img alt=\"TCP ACK\" src=\"/static/img/11-ack.png\" /></p>\n<h2>TCP Handshake</h2>\n<p>Let's come back to that idea of sequence numbers. The first messages exchanged in a TCP connection, as we mentioned earlier, are special. When a client seeks to establish a TCP connection with a server, it will send a TCP segment with a special bit called the <strong>SYN</strong>, or synchronize field. The client will also pick a sequence number at random (for security reasons) and associate it with this segment. Let's say that the client picks <a href=\"https://www.google.com/#hl=en&amp;sugexp=les%3B&amp;gs_rn=5&amp;gs_ri=psy-ab&amp;tok=ZZ9XqC_YRU2PrlCOmv-rFw&amp;cp=7&amp;gs_id=q&amp;xhr=t&amp;q=the+answer+to+life+the+universe+and+everything&amp;es_nrs=true&amp;pf=p&amp;safe=off&amp;output=search&amp;sclient=psy-ab&amp;oq=the+ans&amp;gs_l=&amp;pbx=1&amp;bav=on.2,or.r_gc.r_pw.r_cp.r_qf.&amp;bvm=bv.43148975,d.dmg&amp;fp=443df112168ae7b8&amp;biw=1436&amp;bih=783\">42</a> as the sequence number for the SYN segment. The server's ACK to a SYN segment is called a <strong>SYNACK</strong>, and the server similarly picks a sequence number to start off with (let's say 24). This process is called a <strong>handshake</strong> and looks something like this:</p>\n<p><img alt=\"TCP Handshake\" src=\"/static/img/11-handshake.png\" /></p>\n<p>Now that sequence numbers have been set up by the handshake, they can be used in combination with ACKs to make sure all segments are delivered to the receiver. Associated with each ACK segment is also a number that represents which packets have been received so far. Let's say that an 8-byte segment is sent with a sequence number of 42. When this segment is received, the receiver will respond with an ACK numbered 50, which is simply 42 + 8 (aka the sequence number + the size of the segment). When the sender receives this ACK, it knows that the next segment to be sent should have a sequence number of 50, which makes sense because the receiver has acknowledged the first 8 bytes of the message. If this segment is 16 bytes this time, the receiver will reply with an ACK numbered 66, which tells the sender that the next segment should start with a sequence number of 66. This process looks something like this:</p>\n<p><img alt=\"TCP SEQ/ACK\" src=\"/static/img/11-seq-ack.png\" /></p>\n<h2>Dropped Segments</h2>\n<p>Now, what happens if some segments are never delivered? Suppose instead that the segment with the sequence number of 42 gets lost in the Internet abyss, so the receiver never has a chance to receive it. This means that no ACK will be sent. So, after fruitlessly waiting some amount of time and never receiving an ACK, the sender will go ahead and re-send that segment:</p>\n<p><img alt=\"TCP Dropped Segment\" src=\"/static/img/11-drop-segment.png\" /></p>\n<p>Okay, but what if it's the ACK that gets dropped, and not the original segment? If this happens, then we have essentially the same scenario as above, in which the segment must be re-sent:</p>\n<p><img alt=\"TCP Dropped ACK\" src=\"/static/img/11-drop-ack.png\" /></p>\n<p>In both of these examples, we assumed that the sender would only try to send one segment at a time, waiting for an ACK before moving on. However, this isn't really a very efficient way of sending a message over a connection. We saw earlier how parallelism can be used to more efficiently solve a problem, so let's apply the same principle here. Instead of sending segments in serial, let's send a couple segments in parallel. Now, we'll be looking for a pair of ACKs, not just one ACK. But, since <em>either</em> of these segments and <em>either</em> of these ACKs could end up being dropped by the network, we need some way of figuring out exactly what happened, so we don't needlessly re-transmit segments!</p>\n<p>So, the receiver will need to send an ACK that represents the <em>total</em> amount of data it has received <em>in order</em>. Let's say that we send two segments at the same time: one has a sequence number of 42 (and is 8 bytes), and the other has a sequence number of 50 (and is 16 bytes). If only the second segment is delivered, then the receiver will reply with an ACK numbered 42, <em>not</em> 66. When the sender gets this ACK, it knows that the segment numbered 42 hasn't been received yet, and it has no idea what happened to the segment numbered 50. But, it doesn't really care about that second segment yet, since it's important that all segments are received, so it will go ahead and re-send the segment numbered 42. Now, the receiver can reply with an ACK of 66, since the segment with sequence number 50 has already been received! This might come as a pleasant surprise to the sender, since it had no idea whether or not segment 50 was delivered successfully. I like pictures, so here's what that could look like visually:</p>\n<p><img alt=\"TCP Timeout\" src=\"/static/img/11-tcp-timeout.png\" /></p>\n<h2>IP Fundamentals</h2>\n<p>That's how TCP works, so let's now take a look at the other half of TCP/IP: IP! After all, TCP is still at a higher level than IP, since we haven't yet talked about where routers actually come into play in the process of sending information through a network. <strong>IP</strong> stands for Internet Protocol, and we've actually already seen some of the important features of IP. We know that each device on a network has an associated IP address, which is a unique number on the network. When a computer wants to send a message to another device, it uses its IP address to identify it. However, if two computers aren't directly connected on the network, then this message will have to travel through one or more routers in order to eventually reach its destination. As we saw before, not every router on a network knows where every other device is. Instead, each router has a <strong>routing table</strong> that describes where the best place to send the message next would be so that it can reach its destination as quickly as possible. Now that we know how TCP works, we can think about these \"messages\" as TCP segments.</p>\n<p>While TCP is concerned with segments, IP is instead concerned with <strong>datagrams</strong>, or <strong>packets</strong>. An IP packet, which is indeed similar to a TCP segment, looks like this:</p>\n<p><img alt=\"IP Packet\" src=\"/static/img/11-ip-packet.jpg\" /></p>\n<p>Aha! There's the IP address. Notice that each IP packet has both a source IP address and a destination IP address, which means that every packet that travels through the Internet using IP knows where it's going and where it came from. Notice also that IP doesn't care about ports at all, since we saw that those are already handled by TCP.</p>\n<p>A lot of our discussion of TCP focused on dealing with the fact that sometimes segments won't reach their destinations. This is actually due to IP. While TCP ensures reliable data transfer, IP essentially gives us the opposite: <strong>best-effort delivery</strong>. Best-effort delivery says that a network will try its very hardest to deliver a message, but it doesn't actually offer any guarantees that the message will reach its destination. The US Post Office, for example, operates using best-effort principles; you are not explicitly informed when your letter reaches its destination, and if the Post Office is overwhelmed with other letters, then the delivery of your letter could be delayed. Similarly, while we said that TCP was a connection-oriented protocol, IP, on the other hand, is <strong>connectionless</strong>. So, IP may deliver packets out of order, and packets may also be corrupted along the way. That's what it's so important for TCP to handle all of these errors!</p>\n<h2>Network Masks</h2>\n<p>IP also allows us to subdivide networks into different groups to keep them more organized and more secure. For example, we might want to group together all of the computers that are connected to a particular router into a <strong>subnetwork</strong> that is part of a larger network. It turns out that the IP addresses we've been looking at this whole time actually have some additional information encoded in them. The first part of an IP address is called the <strong>network prefix</strong>, and the second part of an IP address is called the <strong>host number</strong>. So, the first 24 bits of an IP address might be used for the network prefix, and the last 8 bits might be used for the host number. All computers on the same subnetwork will have the same network prefix, but each individual computer will have a different host number. Associated with each network is a number called the <strong>subnet mask</strong>, which is used to divide the separate a single IP address on the network into a network prefix and a host number.</p>\n<p>Let's look at an example. When determining an IP address's network prefix and host number given a subnet mask, it will actually be easier to think about IP addresses in binary. Didn't think that would ever come back again, did you? Let's say we have the IP address <code>192.168.56.50</code> on a network with a mask of <code>255.255.255.0</code>. If we just convert the numbers between the dots into binary, we have an IP address of <code>11000000.10101000.00111000.00110010</code> and a mask of <code>11111111.11111111.11111111.00000000</code>. Not too bad, right? To figure out the network prefix and the host number, let's apply a binary AND operation to the IP address and the subnet mask. Remember, this just means that we'll get a 1 if we AND together two 1s, and we'll get a 0 otherwise. So, we have:</p>\n<pre><code>  11000000.10101000.00111000.00110010\n\n&amp; 11111111.11111111.11111111.00000000\n\n-------------------------------------\n\n  11000000.10101000.00111000.00000000\n</code></pre>\n<p>The result of this AND operation is the network prefix, which in this case, is 192.168.56.0. That must mean that the rest of the IP address is the host number, which in this case is 0.0.0.50. So, it looks like the first 24 bits of the IP address are used to determine the network, and then the last 8 bits are used to determine a computer on that network.</p>\n<p>In that example, everything worked out nicely because the network prefix and host number were separated by a dot. Let's try a different subnet mask, but this time, let's not have a dot separate the 0s and the 1s in the subnet mask. Let's use the same IP address, <code>192.168.56.50</code>, but this time, let's use a mask of <code>255.255.255.224</code>. In binary, this is <code>11111111.11111111.11111111.11100000</code>. Let's do the same thing we did last time:</p>\n<pre><code>  11000000.10101000.00111000.00110010\n\n&amp; 11111111.11111111.11111111.11100000\n\n-------------------------------------\n\n  11000000.10101000.00111000.00100000\n</code></pre>\n<p>Okay, looks like we got a different number for the network prefix this time. Converting from binary to decimal, we get a network prefix of <code>192.168.56.32</code>, which means we must have a host number of <code>00010010</code>, or <code>18</code>. This makes sense, though, since 32 + 18 = 50, which is the last quad in our IP address. So, using this subnet mask, we can create a network where all computers have the same network prefix, but the network prefix and host number don't necessarily have to be separated by one of the dots in an IP address.</p>\n<p>It's not really obvious from a subnet mask how many bits are used for the network prefix and how many bits are used for the host number, since we need to convert the mask to binary in order to figure that out. We could just memorize them all or just get really good at math, but that seems to me like a waste of brain cells. Instead of telling people about the mask that's associated with our network, we can instead use something called <strong>CIDR notation</strong>. CIDR notation is a bit more straightforward, since it just tells us how many bits of the IP address are used for the network prefix and how many bits are used for the host number. For example, the IP address <code>192.168.56.50</code> on a network with a mask of <code>255.255.255.0</code> would be written as <code>192.168.56.50/24</code> in CIDR notation, where the <code>/24</code> simply says that 24 bits are used for the network prefix. From our second example, the mask <code>255.255.255.224</code> would correspond to <code>/27</code> in CIDR notation, since we're using 27 bits for the network prefix.</p>\n<h2>Subnetworks</h2>\n<p>Now, we can use this idea to create subnetworks. We can essentially \"borrow\" some bits from the host number to divide IP addresses even further. So, rather than separate the IP address into two components, one that identifies the network and one that identifies the host, let's divide it into three parts: one for the network, one for the subnetwork, and one for the host. With a netmask of /27, we can create 8 different /24 subnets, since we can \"borrow\" three bits from the host number to create a subnet identifier. So, an IP address where those three bits are <code>111</code> will be on a different subnetwork than an IP address where those three bits are <code>101</code>. But, because we said that each of these subnetworks is /24, we know that the first 24 bits of all IP addresses must still be the same. If we instead used a netmask of /28, then we could create 16 different /24 subnets, since we'd be using 4 bits (borrowed from the host number) to identify the subnet rather than 3 bits.</p>\n<p>When we choose a subnet mask for a network, we're also making a decision about the number of computers that can be on each subnetwork. For example, a subnet mask of <code>255.255.255.0</code>, as we've seen, means that we have 8 bits we can use for the host number. Back when we discussed binary, we saw that the largest number we can represent with 8 bits is 2<sup>8</sup> = 255, so that's how many different devices we can have on a subnetwork. On the other hand, if we choose a subnet mask of <code>255.255.255.224</code>, then we only get 5 bits for the host number, we means we can only have 32 devices on a subnetwork. So, we have a bit of a tradeoff: while we saw that a larger netmask will allow us to create more subnets, it also limits the number of devices that can be on any given subnet. This limitation is due to the fact that all IP addresses are the same size, so we only have so many bits to work with!</p>\n<h2>UDP</h2>\n<p>Many protocols on the Internet, most notably HTTP, use TCP/IP to send messages to other devices, but TCP isn't the only way to send data across the net. <strong>UDP</strong>, or User Datagram Protocol, is commonly used by video chat applications, which could include <a href=\"http://www.skype.com/en/\">Skype</a> or <a href=\"http://www.apple.com/ios/facetime/\">FaceTime</a>. Unlike TCP, UDP does not guarantee that datagrams will actually be received by the client (which makes it a bit more similar to IP in that sense). However, in the case of video chat, for example, there are so many packets being sent in order to transfer your beautiful face to your friend's computer, that losing one of them doesn't really make a difference at all. So, applications that are sending a whole lot of data over the network, such that nobody will really notice (or care) if tiny portions of it get lost, might want to use UDP instead of TCP, since there's no need for a reliable connection. DNS queries, for example, use UDP for this reason, since it ends up being more efficient if we don't have to take the time to make sure every single transmission was received successfully.</p>\n<h2>The OSI Model</h2>\n<p>Alrighty, before we finish up, let's take a moment to step back and review some of the networking terms we've seen so far. The various protocols we've seen can be categorized according to something called the <strong>OSI Model</strong>:</p>\n<p><img alt=\"OSI Model\" src=\"/static/img/11-osi-model.png\" /></p>\n<p>At the top of this networking pyramid, we have protocols that are used by applications like web browsers and email clients, so these include HTTP, SMTP, POP3, and IMAP. Let's skip over presentation and session and head to the transport layer. Here, we saw how TCP and UDP can transfer data between two computers by establishing a connection. Next, we saw how IP on the network layer handled routing packets through various devices on the network so they can (hopefully!) reach their destination. Even lower than that, we saw that Ethernet is used to actually send data down a wire. Finally, at the end of the day, we're still representing information using good ole' bits, so anything we ever send over a network can be encoded as trusty 0s and 1s.</p>", "title": "Manual Transmission", "id": "tcpip", "tags": ["Best-Effort Delivery", "IP", "OSI Model", "Reliable Data Transfer", "Subnets", "TCP", "UDP"], "sequence": 8}, "graphics": {"content": "<h2>Introduction</h2>\n<p>We've talked a lot about pictures of cats, but it's time for us to put our money where our mouth is. In this section, we'll discuss how your computer actually represents and displays cat pictures, as well as some other less interesting stuff, I guess.</p>\n<h2>File Formats</h2>\n<p>It turns out that while cat photos are by far the most adorable things your computer can store, they're <em>still</em> just 0s and 1s. Getting tired of me saying that yet? Waaaay back in the day, we talked about how we can translate 0s and 1s into textual data and love hotels. Remember how? We used something called a character encoding, which, like Morse Code, simply defined a way to translate numbers into characters. We said that the number 65 represented a capital 'A' in ASCII, and some bigger number represented a love hotel in UTF-8. So, we know how we can store plain old text, but we often want to store more interesting information. For example, I send all of my emails in a pink <a href=\"http://bancomicsans.com/main/\">Comic Sans</a> on a glitter background. While ASCII or UTF-8 can represent the textual content of my email, ASCII doesn't define a way to specify a font or color for my text. As we'll see later, we can use HTML to describe these features of text, but when I send someone a Microsoft Word document, the name of the file ends in <code>.doc</code> (or <code>.docx</code>), which isn't quite HTML. That <code>.doc</code> is called the filename <strong>extension</strong>, which is often used to indicate a file's <strong>format</strong>. Just as protocols like HTTP defined a standardized set of rules, the purpose of a file format is to define a standardized way of representing information. For example, somewhere in the overwhelmingly long <a href=\"http://download.microsoft.com/download/0/B/E/0BE8BDD7-E5E8-422A-ABFD-4342ED7AD886/Word97-2007BinaryFileFormat%28doc%29Specification.pdf\">specification</a> for .doc files, Microsoft has specified how to store pink Comic Sans text. By the way, I wouldn't recommend actually sitting down and reading that novel, which actually contains sentences like \"CHPX's are a grpprl, not a CHP\" (page 35). Sounds like something out of Harry Potter's <em>Fantastic Beasts and Where to Find Them</em> if you ask me. In any event, a file's format simply tells your computer how the bits of a files should be interpreted. As we'll see, those 0s and 1s could represent an image, a sound, or a video, but without any kind of rules for interpreting a file's bits, they're essentially meaningless! A file's extension usually indicates the format of the file, but isn't a definitive answer. If I change a file's name from <code>important.doc</code> to <code>important.whatever</code>, I'll still be able to open it in Microsoft Word!</p>\n<p>Let's take a look at an example. <a href=\"/static/img/12-ppm.ppm\">Here</a> I have a big text file with a whole bunch of numbers. If you download this file and open it up using a program like TextEdit on a Mac or Notepad on Windows, you'll see a big list of random numbers. So, it looks like our text editing program is opening up this file and interpreting the bits as ASCII representations of characters. Now, try opening this same file in a different program, called <a href=\"http://gimp.org/\">GIMP</a>. GIMP is an image editing program, just like Photoshop, available for Windows, Mac, and Linux free of charge. Once you've downloaded and installed GIMP, open up that same file. You should see something like the below.</p>\n<p><img alt=\"Shocked Cat\" src=\"/static/img/12-ppm.jpg\" /></p>\n<p>Shocked cat can't believe it either. That file you downloaded is in a format called <strong>PPM</strong>, or Portable PixMap. PPM is just one way of representing an image, but using only ASCII characters! So, that same sequence of bits has a completely different meaning when given to a different application. We never changed the bits of the PPM file, we just interpreted them in two different ways: as an image and as text.</p>\n<p>While browsing the Internet or the photos from your last vacation, you've probably encountered a few different file formats specific to images. For example, a photo of your cat from your digital camera may be stored as a JPEG, an old piece of feline clip art may be stored as a BMP (or bitmap), and a <a href=\"http://2.media.collegehumor.cvcdn.com/78/84/ce207c391303ce7b998b2c9d2bb300ce-cat-tries-to-jump-off-toilet.gif\">cat trying to jump</a> may be stored as a GIF. All of these acronyms are just different ways of representing images using binary data. So, when an app like Preview or Photoshop opens up an image, it will first need to figure out what format the image is in, and then interpret the bits of the file accordingly!</p>\n<h2>Raster Graphics</h2>\n<p>Let's first take a look at the bitmap format, one of the simplest ways to store an image. Think of an image as a grid of squares, where each square is filled with only one color; this is kind of structure is called a <strong>raster graphics image</strong>. Each of these small squares, called a <strong>pixel</strong>, can be filled with exactly one color. Check out the picture below. At the top-left, we have an image of a smiley face. (He's happy because he's about to learn about raster graphics, which sounds like an impressive thing to know about.) Over to the right, we have a mega enlarged version of the same image, where we can make out the individual squares of the grid that creates the image smiley face. In fact, you might describe this image as \"pixelated,\" since we can see the individual pixels making up the image. We can see that each of these squares is just a single color, but once we shrink the image down a bit, it gets hard to tell where one square ends and another begins, which allows us to see a happy face rather than a bunch of squares.</p>\n<p><img alt=\"Raster Graphics\" src=\"/static/img/12-raster.png\" /></p>\n<h2>Colors</h2>\n<p>At the bottom of this image is an even more mega enlarged version of the smiley, this time zooming in on just three pixels (where each pixel is just a colored square). Each of these pixels reminds me of elementary school art class, where it was really fun to play with paint and mix colors together. If you mixed together red paint and blue paint, you always got some shade of purple paint. If you then put that paint on the wall, your teacher then probably yelled at you. In any case, the basic idea behind paint mixing is that we can create a huge range of colors just by mixing together some much smaller number of colors. In fact, if we're clever about what we choose as our <strong>primary colors</strong>, we can make any color we can possibly think of using just three colors as a base.</p>\n<p>As the picture above suggests, let's start off with red, blue, and green as our three primary colors. Now, rather than think about mixing paints, consider three lights, one of each color, pointed at the same wall in a pitch black room. If we turn on the red light a little bit, then we'll get a little bit of red in the room, but our wall will still be mostly black. But, if we turn the red light up all the way, then without a doubt, we'll have a completely red wall in front of us. If we turn up both the red and green lights, then the colors will mix to form the color yellow. Finally, if we turn all three lights on, then our wall will be completely white. The combinations of these lights looks something like this:</p>\n<p><img alt=\"Additive Color Mixing\" src=\"/static/img/12-additive.png\" /></p>\n<p>This method of mixing colors is called <strong>additive color mixing</strong>, since we're essentially adding the colors produced by each of the lights together. This same principle is used to color each pixel in our smiley. Each square has its own combination of red, green, and blue lights that when mixed together, produces a single color. For example, the pixel on the left has an equal amount of red, green, and blue, so the result is a pixel that looks pretty white, while the rightmost pixel is only red and green, which produces a yellow pixel. Because we picked red, green, and blue, this color model is called <strong>RGB</strong>, and we express colors using combinations of these three primary colors.</p>\n<p>The numbers above are given in percentages, but what are they percentages <em>of</em>? That depends on an image's <strong>color depth</strong>, or the number of bits that are used to represent the color of a single pixel. For example, if we use 1 bit for each pixel, then we can only represent black and white images, since each pixel will be represented by a 0 (aka black) or a 1 (aka white). Instead, if we use a larger number of bits for each pixel, then each pixel can take on a wider range of colors. It's common for bitmaps to use 24 bits for each pixel, which means 8 bits are used for each of the three colors. In decimal land, that means each color takes on a value between 0 and 255, since 255 is the largest number we can represent with 8 bits.</p>\n<p>Often though, we'll express colors using <strong>hexadecimal</strong> values. Recall that hexadecimal is a base-16 number system (just like binary is a base-2 number system), which means that a hexadecimal \"digit\" can have the values 0-9 as well as A-F. Because each color is stored using 8 bits, we only need six hexadecimal digits to express a 24-bit color (since each hexadecimal digit represents a 4-bit value). As a convention, hexadecimal colors are prefixed with the hash character (#), so when someone looks at something like #DC143C, they know immediately that they're looking at the representation of a color. So, the color #FF0000 (red) is a lot of red, no green, and no blue, while the color #0088FF (sky blue) is no red, a bit of green, and a lot of blue. As usual, computer scientists went a bit overboard in producing an official list of names for common hexadecimal color values, which you can find <a href=\"http://www.html-color-names.com/color-chart.php\">here</a>. My personal favorites are \"Blanched Almond,\" \"Papaya Whip,\" and \"Linen.\"</p>\n<p>By the way, why did we randomly start talking about lights instead of sticking with paint? It turns out that these two things are a bit different; while we said that mixing light colors was a form of additive color mixing, the process of mixing paints or inks is <strong>subtractive</strong>. While we started in a pitch black room with additive color mixing, subtractive color mixing starts off with a beam of white light. Remember, that white light is just a combination of all colors, since we saw earlier that turning on all of the primary color lights resulted in pure white. By the magic of physics, when that beam of white light hits a colored surface, some of the light will be absorbed by the surface, which means it won't be totally white any more. For example, the color cyan (aka \"light blue\" for those of you who are as useless in a paint store as I am) absorbs the color red, so that means that the white light that once consisted of red, green, and blue will now only consist of green and blue, which happens to be cyan. Here's what we mean:</p>\n<p><img alt=\"Single Subtractive Color\" src=\"/static/img/12-subtractive-single.png\" /></p>\n<p>Now, let's try adding another color to the mix. The color yellow absorbs blue light, so if we add that to the mix, then we'll be left only with green light, like this:</p>\n<p><img alt=\"Double Subtractive Color\" src=\"/static/img/12-subtractive-double.png\" /></p>\n<p>In this subtractive model, then, we can say that cyan and yellow make green. To round out our three primary colors, we'll add the color magenta, since that absorbs green light. So, our three primary colors in the subtractive color model are cyan, magenta, and yellow, or CMY (sometimes called RYB). When we look at ink on paper or paint on a canvas, surfaces will be illuminated by white light from a light source (whether that be the sun or a light bulb), so we'll want to use these as our three primary colors. However, the LED lights powering your computer's display use RGB, since they function by adding the colors produced by different lights together.</p>\n<p>By the way, you may have noticed that your printer at home uses CMYK, not just CMY. That \"K\" stands for \"key,\" which corresponds to black ink. Even though we should theoretically be able to make black by mixing together cyan, magenta, and yellow, the resulting color doesn't look perfect in practice, so it's easier to simply apply black ink as well!</p>\n<h2>Bitmaps</h2>\n<p>Alrighty, now that we have a handle on how colors can be represented, let's come back to the bitmap file format. Remember, a bitmap is simply a sequence of bits, those bits just won't represent text anymore. The first two bytes of any bitmap file are the same: the <strong>magic number</strong> 0x42 0x4D. That \"0x\" just means that we're using hexadecimal to represent the value, and 0x42 is the same as the decimal number 66, while 0x4D is the same as the decimal number 77. (Fun challenge: why?) This is simply an indicator to any software application that this file is a bitmap. Of course, this magic number doesn't <em>guarantee</em> that the file is a bitmap. After all, I can create a text file that starts with the letters \"BM,\" and that would be the same as the first two bytes of a bitmap file. So, every bitmap file starts with the same magic number, but seeing that magic number at the beginning of a file doesn't guarantee that we're dealing with a bitmap file.</p>\n<p>After that, we have some <strong>metadata</strong> about the file, like the width, height, and the size of the image. In general, the term \"metadata\" refers to data that describes a file's data; as we'll see, an MP3 file's metadata could include the name of the artist or the album of the track. Finally, the bytes representing the pixels of an image come after the file's metadata. Let's take a look at what a bitmap actually looks like now. Here's a super simple bitmap file, containing only white and red pixels, that's mega enlarged so you can see the individual squares on the grid:</p>\n<p><img alt=\"Large Smiley\" src=\"/static/img/12-smiley-large.png\" /></p>\n<p>By the way, <a href=\"/static/img/12-smiley.bmp\">here</a> is a link to the original bitmap, if you want to check it out for yourself. We can use a little program called <code>xxd</code> to view the individual bytes of this bitmap file, expressed in hexadecimal. If we open up a Terminal and run the following:</p>\n<pre><code>xxd -c 24 -g 3 -s 54 smiley.bmp\n</code></pre>\n<p>Then we'll see something like this:</p>\n<pre><code>0000036: ffffff ffffff 0000ff 0000ff 0000ff 0000ff ffffff ffffff  ........................\n\n000004e: ffffff 0000ff ffffff ffffff ffffff ffffff 0000ff ffffff  ........................\n\n0000066: 0000ff ffffff 0000ff ffffff ffffff 0000ff ffffff 0000ff  ........................\n\n000007e: 0000ff ffffff ffffff ffffff ffffff ffffff ffffff 0000ff  ........................\n\n0000096: 0000ff ffffff 0000ff ffffff ffffff 0000ff ffffff 0000ff  ........................\n\n00000ae: 0000ff ffffff ffffff 0000ff 0000ff ffffff ffffff 0000ff  ........................\n\n00000c6: ffffff 0000ff ffffff ffffff ffffff ffffff 0000ff ffffff  ........................\n\n00000de: ffffff ffffff 0000ff 0000ff 0000ff 0000ff ffffff ffffff  ........................\n</code></pre>\n<p>Woah, okay. What did we just do? The program <code>xxd</code> simply opens of a file and displays the value of each byte in the file as a hexadecimal number. We're interested in grouping these values into 24-bit chunks, since each pixel in the bitmap is represented by 3 blocks of 8 bits each. Also, we actually skipped the first 54 bytes of the file, since that's just bitmap metadata. The numbers to the left (followed by a colon) simply tell us where in the file we are, and we can simply ignore those dots to the right. Looking at the middle of this output, we can actually see something that resembles a smiley face. Each block that looks like <code>ffffff</code> represents a white pixel, while each block of <code>0000ff</code> represents a red pixel. But wait a minute, I thought we said that we gave colors as RGB? Shouldn't 0000ff be pure blue then? That's still the case, but it turns out that a bitmap actually stores the bytes of its pixel values backwards, so red is all the way to the right, green is still in the middle, and blue is at the left. Kinda reminds us of the notion of endian-ness from a while back, no? To be even more difficult, it turns out that the pixels of many bitmaps are actually stored upside-down, so it's up to an image viewing application to actually flip everything right side up. But don't fret over these minor details. We can see that the basic idea behind that bitmap file format is that we'll represent each pixel with the same number of bytes, and the value of those bytes represents how much red, green, and blue the pixel contains.</p>\n<h2>Resolution</h2>\n<p>We know a raster graphics image has to be made up of a grid of squares, but how big should each square be? The answer to this question describes the <strong>resolution</strong> of an image, or the amount of information stored in the image. If we keep the size of the image the same but decrease the size of each individual pixel, then we can fit a larger number of pixels into the image, allowing us to represent more detail. Here's an example from Vimeo that demonstrates what we mean by that:</p>\n<p><img alt=\"Resolution\" src=\"/static/img/12-resolution.png\" /></p>\n<p>The leftmost image has a resolution of 16x16, which means that square contains 16 pixels across and 16 pixels down. On the right, however, we have a resolution of 512x512, which means we have a much larger number of smaller pixels. Because there are many more pixels to work with on the right, we can create an icon that has much more detail. With only 16 pixels to work with, it's pretty difficult to create a smooth-looking curve, and we get something that looks more like a set of steps than a curve. If you've ever used an <a href=\"http://en.wikipedia.org/wiki/Etch_A_Sketch\">Etch a Sketch</a>, then you've probably been frustrated by how difficult it is to create curves. If only each individual square were smaller, you'd be able to have much more detail in your sketches! If you have no idea what I'm talking about, then please <a href=\"http://www.amazon.com/s/ref=nb_sb_ss_c_0_9?url=search-alias%3Dtoys-and-games&amp;field-keywords=etch+a+sketch&amp;sprefix=etch+a+sk%2Caps%2C202\">click here</a>. Honestly, this is much more important than anything else you'll do today.</p>\n<p>Because each raster graphic image has a grid of fixed-size squares, we can't simply increase the size of an image without sacrificing quality. For example, one way of making an image bigger is to increase the size of each square in the grid. However, the resulting image will look a lot like the enlarged red smiley or leftmost Vimeo logo: distorted and pixelated. Watching popular TV shows like CSI, though, would lead you to believe otherwise. Below is a compilation of scenes from movies or TV shows where a raster graphics image is \"enhanced.\" But, this makes absolutely no sense! There's no way to <em>increase</em> the resolution of an image, so zooming in will add zero additional detail.</p>\n<iframe width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/Vxq9yj2pVWk\" frameborder=\"0\"> </iframe>\n\n<h2>Lossless Compression</h2>\n<p>Alrighty, that's it for the bitmap format. Bitmaps are certainly straightforward, but the way they represent images is pretty inefficient. For example, consider the bitmap below:</p>\n<p><img alt=\"Germany\" src=\"/static/img/12-germany.png\" /></p>\n<p>What do the bytes of this bitmap look like? Well, since the top of the flag is just a solid color, we're going to have a wholeeeeee lot of bytes that are exactly the same. Wouldn't it be nice if we could just say \"here come 100 red pixels\" rather than listing out each pixel individually? Turns out we're about 25 years too late, since a company called CompuServe beat us to it in 1987 with the development of <strong>GIF</strong>, or the Graphics Interchange Format. By the way, whether \"GIF\" is pronounced with a soft \"g\" or a hard \"g\" is a holy war older than time itself. Word on the street is the original developers of GIF wanted it to be pronounced like the Jif peanut butter brand, but dictionaries say both pronunciations are correct. Unlike bitmaps, GIFs are <strong>compressed</strong>, which means that GIFs can represent exactly the same information as some bitmaps using a smaller number of bits. Essentially, if two pixels that are horizontally adjacent are exactly the same, then GIF won't bother storing the information redundantly.</p>\n<p>Of course, this method of compressing images isn't perfect. For example, consider this bitmap instead:</p>\n<p><img alt=\"France\" src=\"/static/img/12-france.png\" /></p>\n<p>Now, we have lots of repetition in the vertical direction rather than the horizontal direction. Unfortunately, our trick isn't going to work as well this time, since it's designed to handle the Germans, not the French (though we are still going to get some compression, compared to a bitmap). Sure enough, if we compare the sizes of these two bitmaps, the German flag is indeed smaller than the French flag, even though the images have the same width and height, and it takes the same number of bytes to represent a red pixel and a blue pixel.</p>\n<p>This method of compression is called <strong>lossless</strong>, which means we're retaining all of the information about an image. After all, saying that 2 &times; 5 = 10 is exactly the same as saying 2 + 2 + 2 + 2 + 2 = 10, it just takes us a shorter amount of time to write it down. So, any lossless compression technique will represent <em>all</em> of the original data in a file. Though we've seen compression in the context of images, we can actually compress any old file. For example, you have have emailed a ZIP of documents to a co-worker or downloaded a RAR from a website. Both ZIP and RAR, along with other formats like GZIP and LZW, are capable of compressing any old bytes you throw at them, which can be handy if you're looking to save space on your hard drive.</p>\n<h2>Lossy Compression</h2>\n<p><strong>Lossy</strong> compression, on the other hand, is the opposite of lossless compression. While lossless compression preserves all of a file's data, lossy compression throws away some data in the interest of compressing the file even more. However, if we throw away too much information, then we might not be able to tell what our original file looked like. Here's an example of effective lossy compression:</p>\n<pre><code>Hey wat r u doin tmrw? I wntd 2 go c Ben.\n</code></pre>\n<p>Even though most of the \"words\" in the above message aren't words in the English language at all, it's still pretty clear what the message is saying. We've simply reduced the number of characters necessary to express a message by throwing away letters that aren't fundamentally necessary to understanding the meaning of the message. There's a good chance you were able to read the lossily-compressed message above as:</p>\n<pre><code>Hey, what are you doing tomorrow? I wanted to go see Ben.\n</code></pre>\n<p>Since our original message has 55 characters (counting spaces) and our new message only has 43 characters, we can say that we've compressed the message by a bit more than 20%. We could <em>probs</em> compress this even more, but let's leave Ben alone and come back to image compression.</p>\n<p>GIF is a lossless format, while <strong>JPEG</strong>, created by the Joint Photographic Experts Group, uses lossy compression. JPEG is commonly used to store digital photographs, which unlike the bitmap smiley above, have a huge number of pixels. For example, modern smartphones usually have something like a 5-megapixel camera, which means that images taken by the camera will have roughly five million pixels. More expensive cameras will have even more! The basic idea behind lossy compression is that most people (except maybe Superman) won't be able to tell the difference between an image with 5,000,000 pixels and an image with 4,999,999 pixels created by removing one of those pixels. In fact, even with compression factors on the order of 40 or 50, compressed JPEGs don't look all too different from the originals. Below, we have a JPEG compressed with a factor of 10 on the left and a JPEG compressed with a factor of 50 on the right. While the photo on the right clearly has a loss in quality, it is only 9KB in size compared to the 39KB photo on the left, so depending on the situation, that scenario might be worth it!</p>\n<p><img alt=\"10 Compression\" src=\"/static/img/12-jpg-10.jpg\" /> <img alt=\"50 Compression\" src=\"/static/img/12-jpg-50.jpg\" /></p>\n<p>So, lossy compression worked great on those large digital photos, but here's a situation where it won't work so hot:</p>\n<p><img alt=\"Square\" src=\"/static/img/12-square.png\" /></p>\n<p>Here, every pixel in this very small image is absolutely essential to retaining the image's meaning. So, using lossy compression here probably isn't the best idea. By the way, the actual method through which JPEG images are compressed is pretty complicated and uses lots of math. I'm no good at math, but if you're interested in the particulars, check out the <a href=\"http://en.wikipedia.org/wiki/JPEG\">Wikipedia article</a>.</p>\n<h2>Other Image Formats</h2>\n<p>So far, we've seen Bitmaps, JPEGs, and GIFs. Another image format that's become popular on the Web is <strong>PNG</strong>, or Portable Network Graphics. Rumor has it that the original creators of PNG actually picked the acronym for \"PNG is Not GIF\" as a reaction to some of the dubious licensing issues with the GIF format. Like GIF, PNG uses lossless compression, and like JPEG, uses 24 bits for color. Another feature of the PNG format is support for <strong>alpha</strong>, or transparency. BMP and JPEG, on the other hand, don't have a channel devoted to transparency. However, GIF does have the distinct advantage of supporting animation achieved by repeatedly showing a series of frames. Check out sites like <a href=\"http://whatshouldwecallme.tumblr.com\">this</a> if you'd like to browse GIFs to your heart's content.</p>\n<p>Here's a summary of the formats for raster graphics we've seen so far.</p>\n<table class=\"table table-bordered\">\n\n    <thead>\n\n        <tr>\n\n            <th>Name</th>\n\n            <th>Extension</th>\n\n            <th>Compression</th>\n\n            <th>Color</th>\n\n            <th>Alpha</th>\n\n        </tr>\n\n    </thead>\n\n    <tbody>\n\n        <tr>\n\n            <td>Bitmap</td>\n\n            <td>.bmp</td>\n\n            <td>No</td>\n\n            <td>24-bit</td>\n\n            <td>No</td>\n\n        </tr>\n\n        <tr>\n\n            <td>GIF</td>\n\n            <td>.gif</td>\n\n            <td>Lossless</td>\n\n            <td>8-bit</td>\n\n            <td>Yes</td>\n\n        </tr>\n\n        <tr>\n\n            <td>JPEG</td>\n\n            <td>.jpg, .jpeg</td>\n\n            <td>Lossy</td>\n\n            <td>24-bit</td>\n\n            <td>No</td>\n\n        </tr>\n\n        <tr>\n\n            <td>PNG</td>\n\n            <td>.png</td>\n\n            <td>Lossless</td>\n\n            <td>24-bit</td>\n\n            <td>Yes</td>\n\n        </tr>\n\n    </tbody>\n\n</table>\n\n<p>And, here's an animated GIF.</p>\n<p><img alt=\"GIF\" src=\"/static/img/12-gif-1.gif\" /></p>\n<p>And another one.</p>\n<p><img alt=\"GIF\" src=\"/static/img/12-gif-2.gif\" /></p>\n<p>Sorry, I couldn't resist.</p>\n<h2>Vector Graphics</h2>\n<p>Wouldn't it be cool if we <em>could</em> somehow enlarge an image while preserving all of its detail? While it looks like we can't do that with raster graphics, we <em>can</em> do that with <strong>vector graphics</strong>. Unlike raster graphics, vector graphics doesn't involve turning an image into a grid and storing the values of individual pixels. Instead, vector graphics stores images using mathematical black magic. For example, let's say we want to represent a circle. In raster graphics, we'd create a grid of squares and then trace out a circle by filling in squares with some color. Using vector graphics, we'd instead say that the equation for a square looks something like <em>x</em><sup>2</sup> + <em>y</em><sup>2</sup> = <em>r</em>. Now, our representation doesn't depend on any pixels. If we want to create a larger circle, we can just pick a larger value for <em>r</em>, and our equation will create a larger circle without any loss in quality. So, we can create a raster graphic simply by picking a size for the image, then using the equation to figure out which pixels should be colored. Yay math!</p>\n<p>That worked out well for a circle, but how are we supposed to come with an equation for the shocked cat photo above? After all, the level of his shocked-ness can't be contained by a couple variables and some algebra. Rather than try to come up with a single equation, we'll instead divide up shocked cat into a number of smaller polygons, each of which <em>can</em> be described with an equation. For example, the fonts on your computer have some kind of vector representation that was created by picking some <strong>control points</strong>, or important points on characters, and fitting some curves to pass through those points. This allows fonts to scale seamlessly to larger sizes, which has led to the recent popularization of <strong>icon fonts</strong>. For example, icon fonts like <a href=\"http://fortawesome.github.com/Font-Awesome/\">this</a> define images as actual characters, so these icons will look good at any size! While we just saw how easy it is to go from a vector graphic to a raster graphic, it's not so simple to go the other way around, since we need to pull some equations out of a hat that approximate the raster graphic.</p>\n<p><strong>SVG</strong> is a common format for vector graphics. In fact, many of the diagrams on Wikipedia are saved as vector graphics images. For example, <a href=\"http://en.wikipedia.org/wiki/File:Virtual_Private_Network_overview.svg\">here</a> is a diagram of a VPN (remember what that is?). At the bottom of the page, there are a few different options for downloading this image as a raster graphics image. Essentially, all we're doing here is plugging in some values into the equations that describe this image, which can give us a rendering of any size we want. Because we're using SVG, there will be no loss in quality if we choose 2000px compared to choosing 200px!</p>\n<h2>Seam Carving</h2>\n<p>Vector graphics are a cool way of allowing us to enlarge images, so let's look at a cool way to shrink them. Let's say we have a really wide image like the below, and we want to reduce its width.</p>\n<p><img alt=\"Seam Carving Original\" src=\"/static/img/12-seam-original.jpg\" /></p>\n<p>This is a screenshot taken from <a href=\"http://en.wikipedia.org/wiki/The_Legend_of_Zelda:_The_Wind_Waker\">The Legend of Zelda: Wind Waker</a>, which is indisputably one of the best video games of all time. One way to we can shrink the width of this image from 960 pixels to 600 pixels is to scale it horizontally. However, if we just blindly smoosh everything together, we're going to get an image with a lot of distortion:</p>\n<p><img alt=\"Seam Carving Scaled\" src=\"/static/img/12-seam-scaled.jpg\" /></p>\n<p>Notice how Link (the boy standing on the beach with the sword and shield) lost a whole lot of weight, to the point that it's clear that this image has been modified in some way. Not only does Link look distorted, but the observation tower on the right of the image also looks unrealistically thin.</p>\n<p>Let's try something else. Looking at this image, we have a whole lot of empty ocean to the left of Link. There's a small island out there in the distance, but there really isn't anything else that's interesting in the left half of the image. So, rather than scaling the image horizontally, let's just cut out some of that boring stuff to make the image smaller. If we carve out a slice of the image containing uninteresting material, then we can stitch together the two remaining parts of the image to create a new image that hasn't been distorted!</p>\n<p>But, how can we figure out which parts of the image are okay to cut out? As humans, we can identify \"uninteresting\" portions of a picture, but your computer has no idea which bytes are going to be visually pleasing to human viewers. Instead, we can compute an \"energy\" for each pixel, which is just a number that describes how important the pixel is to the image. In order to come up with an energy, we can compare each pixel to the ones around it. If the pixel is very different than its neighbors, like the pixels on Link's shield, then it's probably important to the image. On the other hand, if a pixel is very similar to its neighbors, like the pixels in the empty ocean, then there's a good chance that it's not very important to the image, so we can remove it. Here's what this image's \"energy\" looks like. High energy (aka important) pixels are white, while low energy (aka unimportant) pixels are black:</p>\n<p><img alt=\"Seam Carving Energy\" src=\"/static/img/12-seam-energy.png\" /></p>\n<p>Cool, huh? Simply by comparing each pixel to the ones around it, we've actually traced out all the important components to this picture: Link, the island, and the observation tower. Now, we can go ahead and start carving away at the regions of the picture that are black, or \"seams\". If we do this enough times, then we'll end up with something like this:</p>\n<p><img alt=\"Seam Carving Carved\" src=\"/static/img/12-seam-carved.jpg\" /></p>\n<p>Woah! That looks <em>significantly</em> less distorted. By removing low energy pixels, we were able to reduce this image's size without making it look silly. This technique is called <strong>seam carving</strong>, also known as <strong>content-aware scaling</strong> in image editors like Photoshop. If you'd like to try this on some images of your own, you can download the free <a href=\"https://code.google.com/p/seam-carving-gui/\">Seam Carving GUI</a> for Windows, Mac, and Linux.</p>\n<p>We'll leave Link to save the Princess Zelda. Don't worry, he always does. Now, let's continue our foray into multimedia with a discussion of audio and video!</p>", "title": "Picture This", "id": "graphics", "tags": ["Bitmaps", "Colors", "Compression", "Formats", "Raster Graphics", "Resolution", "Seam Carving", "Vector Graphics"], "sequence": 9}, "av": {"content": "<h2>Introduction</h2>\n<p>Graphics sure are nice, but my computer spends a whole lot of time playing Ke$ha songs. First, we'll take a look at what makes sounds on your computer TiK ToK (I could make Ke$ha puns all day, but I'll spare you from more). Then, we'll build on what we saw last time when we looked at 2D graphics and discuss how 3D worlds are created on your computer. Finally, we'll take a look at how graphics and audio combine to bring us the magic of the cinema!</p>\n<h2>Sound Fundamentals</h2>\n<p>Before we start talking about how sound in your computer works, let's quickly review how sound in the real world works! Haven't you started to miss your physics classes in high school by now? Recall that sound is just a wave of oscillating pressure that travels through some medium like air or water. So, we can model sound with a wave that looks something like this:</p>\n<p><img alt=\"Sound Wave\" src=\"/static/img/13-sound.jpg\" /></p>\n<p>Here, we have time along the x-axis and pressure along the y-axis. Now, there are two different knobs we can turn to change what this wave looks like. First, we have <strong>amplitude</strong>, or the distance along the y-axis between 0 pressure and some point on the wave. This determines the volume, or loudness, of the sound, which we typically measure in decibels. As you can see above, sound waves can have <em>peaks</em> of high pressure as well as <em>valleys</em> of low pressure. The other knob we can turn to change what this wave looks like is its <strong>wavelength</strong>, or the distance along the x-axis between adjacent peaks or adjacent valleys, which determines the pitch of the sound. Usually, we talk about <strong>frequency</strong> instead, which is simply the inverse of wavelength. A higher frequency means that we can fit more peaks into some time interval, which produces a higher-pitched sound. A lower frequency, on the other hand, means that we can't fit as many peaks into the same time interval, which produces a sound with a lower pitch. We measure frequency in <strong>Hertz</strong> (Hz), more frequently seen as kHz or MHz. We've actually already seen this unit before! Remember where? I'll give you some time to <em>process</em> that one...</p>\n<p>Though you may have earbuds in your ears as you're walking down the street, you probably still hear lots of sounds at once. When two sound waves collide, we get something called <strong>wave interference</strong>, which is simply the process of adding two waves together. In this process, adding two peaks will create a larger peak, adding two valleys will produce a larger valley, and adding a peak and a valley (of the same size) will produce a flat line, since they'll cancel out. So, adding a big peak with a small valley will result in a smaller peak, and so on. If the peaks and valleys of two waves line up, then we can say those two waves are <strong>in phase</strong>, and if not, then we'd say they're <strong>out of phase</strong>. The below summarizes the interactions of waves with different phase relationships:</p>\n<p><img alt=\"Wave Interaction\" src=\"/static/img/13-wave-interaction.gif\" /></p>\n<h2>Digital Sound</h2>\n<p>We can model sound as a continuous, <strong>analog</strong> wave, but we're going to need something that looks a lot more <strong>digital</strong> (aka 0s and 1s) if our computers are going to be able to play Ke$ha tracks. Curves like the above have a value defined at every single point on the x-axis, which means they define values for an infinite number of points! Think back to high school algebra: if you have an equation like <em>y</em> = <em>x</em> + 1, you can plug in <em>x</em> = 0.1, <em>x</em> = 0.01, <em>x</em> = 0.0001, and so on, and you'll always get a value for y. Sadly, I don't have any hard drives with infinite capacities, so it looks like we can't save the value of every single point on that curve. What we <em>can</em> do, though, is take discrete <strong>samples</strong> from a continuous sound wave, which means we'll only save some of the values on the curve. Turning a continuous curve into discrete values looks something like this:</p>\n<p><img alt=\"Sampling\" src=\"/static/img/13-sampling.png\" /></p>\n<p>Here, each gray bar represents a sample from the curve, which is simply a number that we can save. As you can see, the shape of the gray bars roughly traces out the shape of the red curve, so sampling can give us a pretty good approximation of that curve. Now that we've taken samples, we simply have a bunch of numbers associated with particular times, which is something we can represent with 0s and 1s! In the above picture, we've taken 30 samples or so. However, if we doubled the number of samples, we'd end up getting a much better approximation of the continuous curve. Think back to image resolution: if we had more boxes in the grid to work with, we could capture more of an image's detail. The number of samples we take from the curve is called the <strong>sampling rate</strong>, where a higher sampling rate indicates a higher sound quality. CD-quality audio has a sampling rate of 44,100 samples per second, or 44.1 kHz. Rates as high as 96 kHz can be found in professional recording applications. Check out the below for a comparison of two different sampling rates, where we can see that taking more samples produces a shape that more closely resembles the original analog curve.</p>\n<p><img alt=\"Sampling Rates\" src=\"/static/img/13-sampling-rates.gif\" /></p>\n<p>But, where does the value from each sample come from? Is a value of 10 loud, or is a value of 1,000,000 loud? This question is essentially the same question we asked ourselves when we looked at the value of an individual pixel in an image. The answer, we found out, depended on the image's <strong>color depth</strong>, which essentially defined a range of numbers that an individual pixel could take on. In audio land, the range of values for a sample, or equivalently, the number of bits used to represent each sample, is called the <strong>bitrate</strong>. CDs have 16-bit audio, which means that CD quality samples take on values between 0 and 65,536 (which is 2<sup>16</sup>). 24-bit audio isn't uncommon in professional recording software.</p>\n<h2>MP3 Files</h2>\n<p>You're probably already familiar with one way to store an audio file: <strong>MP3</strong>, short for MPEG-2 Audio Layer III (that's a mouthful). MP3 uses lossy compression to create songs that are much smaller than the songs on a CD while doing its best to preserve audio quality. Since we know the sampling rate and the bitrate for CD-quality (also known as <strong>PCM</strong>) audio, we can calculate how much space a 3 minute song takes up. We're taking 44,100 samples per second, and each of those samples is 16 bits long. But, we're going to need separate samples for the left and right audio channels, so we're looking at about 0.2 MB for each second of audio. So, for 3 minutes of audio, we're looking at 30+ MB! An MP3, on the other hand, compresses that down to about 3MB with its lossy compression, which means we can store about 10x as many songs on our iPods when compared to CDs.</p>\n<p>So, how does the magic happen? MP3 compression uses something called <strong>psychoacoustics</strong>, which is one of the fanciest words I've ever seen, to take advantage of a few limitations in both the biology and psychology of our perception of sound. First, the human ear isn't capable of hearing any sounds that are below 20 Hz or above 20 kHz, and if you've attended a few concerts in your day, then you're looking at an even smaller window (around 16 kHz). It's also difficult for us to tell the difference between two sounds that are very similar (i.e., having similar frequencies), and we're at our best only between frequencies of about 2 kHz and 5 kHz. So, when encoding a sound as an MP3, there's no point storing any sounds that we won't be able to hear when we play it back, and we can combine sounds that we wouldn't be able to differentiate! In addition to these limitations with the ear itself, our psychological perception of sound is also limited by phenomena like <strong>frequency masking</strong>; if we hear a pair of sounds with similar frequencies at the same time, then the higher frequency will \"mask\" the lower frequency, which means that we won't hear it. Similarly, if a loud sound and a quiet sound are played at nearly the same time, then the loud sound will mask the quiet sound. In a complex sound like a pop song, this will happen pretty frequently, so we have lots of opportunities to save space by throwing away any frequencies that will be masked!</p>\n<p>In order to determine which data from the PCM encoding can be thrown away, your computer uses two different tools. This process is pretty complicated, so we'll just give a simplified, high-level overview here, but if you're interested in reading more about the specifics, then check out <a href=\"http://arstechnica.com/features/2007/10/the-audiofile-understanding-mp3-compression/\">this article</a>. The first of these tools is called the Fast Fourier Transform, or FFT for short, which is a mathematical black box that determines where masking and dramatic changes in the audio occur. The other is called the Modified Discrete Cosine Transform, or MDCT for short, which analyzes the entire spectrum of frequencies of the audio. The result of this process is a cool-looking visualization called a <strong>spectrogram</strong>, which is essentially a fingerprint of the sound's frequencies. In the spectrogram below, we have time along the x-axis, frequency along the y-axis, and the energy (or intensity) of the frequency is represented with color.</p>\n<p><img alt=\"Spectrogram\" src=\"/static/img/13-spectrogram.jpg\" /></p>\n<p>Cool, huh? An MP3 file itself is divided into many <strong>frames</strong>, each of which spans fractions of a second of audio. Each frame contains a header for metadata followed by the actual audio data. MP3 files also have space for <strong>ID3 tags</strong>, which are special pieces of metadata used to describe the artist, album, and other fun facts about the song to the MP3 file.</p>\n<h2>Other Audio Formats</h2>\n<p>Just like we could choose to represent an image as a BMP, JPEG, GIF, etc., we also have a variety of different formats for sound files. For example, the next generation of the MP3 format is <strong>AAC</strong>, or advanced audio coding. This format was originally developed by Apple for use in the iTunes music player, but it has since seen widespread adoption among a variety of devices. AAC is a bit more efficient than MP3 in terms of compression and quality. WMA, or Windows Media Audio, is a proprietary format developed by Microsoft that hasn't become nearly as popular as AAC or MP3. WAV is another audio format originally developed by Microsoft. Unlike AAC, MP3, and WMA, WAV files are typically not compressed, so they hold all of the original PCM audio data. Many of your PCs system sounds, like bells and alerts, will be encoded as WAV files.</p>\n<h2>3D Graphics</h2>\n<p>Before we move on to video, let's take a brief detour to discuss 3D graphics, since everything we looked at last time was in boring old 2D. Now, we'd like to be able to represent scenes where objects are placed in a three-dimensional world. We can represent 3D objects using <strong>wireframes</strong>, which are models that define the edges of 3D objects. First, we can specify the locations of important points on the object in 3D space, and then we can specify which of those points are connected by lines or curves. For example, we might model a 3D book as a cube; each of the book's corners is a point on the wireframe, and lines connecting the corners can define the surface of the book. Remember, the goal of the wireframe is simply to describe the shape of the 3D object by defining its edges, so we're not concerned about things like book's color yet. So, a wireframe looks something like this:</p>\n<p><img alt=\"Wireframe\" src=\"/static/img/13-wireframe.jpg\" /></p>\n<p>For more complex 3D objects, we probably need a more complicated collection of polygons to accurately describe the shape of an object. This collection of polygons, which typically consists of triangles or quadrilaterals (often called simply \"quads\"), is called a <strong>mesh</strong>. So, a mesh is simply a type of wireframe where each component is a polygon, which means we can only connect points with straight lines (while the above uses curves for some connections). A triangle mesh that describes the shape of a dolphin might look something like this:</p>\n<p><img alt=\"Triangle Mesh\" src=\"/static/img/13-triangle-mesh.png\" /></p>\n<p>As we saw earlier with bitmaps, it's tough to represent curves when we only have polygons to work with. In order to create smoother-looking curves, we essentially needed a higher resolution, which in the case of our 3D model, means more polygons. However, that means we have to store all of those polygons, which means our mesh files are going to start to blow up in size. Using a technique called <strong>subdivision surfaces</strong>, though, we can actually define smooth, curved surfaces using a small number of polygons. If you head <a href=\"http://www.subdivision.org/demos/demos.html\">here</a>, you can see an example of subdivision surfaces in action. Below, we have a mesh that looks something like a diamond ring, but it isn't going to win an Academy Award for visual effects.</p>\n<p><img alt=\"No Subdivision\" src=\"/static/img/13-subdivide-1.png\" /></p>\n<p>Now, let's subdivide the polygons of this mesh, which will give us a larger number of smaller polygons. For example, we can add a new point to the center of each polygon and then connect those points to the midpoints of existing edges. Each time we do this, our mesh will get progressively smoother:</p>\n<p><img alt=\"Subdivision Steps\" src=\"/static/img/13-subdivision-steps.png\" /></p>\n<p>After applying this process just three times to the diamond mesh above, we get something that looks like this:</p>\n<p><img alt=\"3 Subdivisions\" src=\"/static/img/13-subdivide-2.png\" /></p>\n<p>Now <em>that</em> looks much more like a diamond ring. So, we were able to create a nice, smooth surface from a pretty limited mesh that at first didn't look smooth at all! There are actually a few different methods for subdividing surfaces, and the one we just looked at is named after <a href=\"http://en.wikipedia.org/wiki/Catmull%E2%80%93Clark_subdivision_surface\">Catmull-Clark</a>.</p>\n<p>Now, we can create three-dimensional scenes by placing these objects out in 3D space. Here's what a 3D scene might look like:</p>\n<p><img alt=\"3D 1\" src=\"/static/img/13-3d-1.png\" /></p>\n<p>This particular scene was created using a 3D programming framework called <a href=\"http://www.opengl.org/\">OpenGL</a>. We can see two 3D cubes, as well as a green ground and a blue sky. To create a cube, we defined the positions of its vertices in the scene using <em>x</em>, <em>y</em>, and <em>z</em> coordinates. Then, we specified which vertices were connected by breaking each face of the cube into two triangles that meet to form the diagonal of the cube. For performance reasons, triangles are often used as the polygons that form a polygon mesh, and because the two triangles on each face are touching, we don't see any kind of \"seam\" in our cube. Finally, we specified a color for the surface of the cube, which was effectively painted over our triangle mesh in order to create a solid-looking object.</p>\n<p>When we look at a 3D scene, though, we're really only seeing a single, two-dimensional snapshot that represents our view of the scene. So, depending on our perspective, we may not need to draw all of the data for all of the objects in the world. Let's say I move around in the above scene, so my perspective now looks something like this:</p>\n<p><img alt=\"3D 2\" src=\"/static/img/13-3d-2.png\" /></p>\n<p>Now, the camera is on the red cube, and I'm looking at the blue cube. From my previous viewpoint, I could see both cubes, but now, I'm only able to see one cube. So, it would be a waste of time for the computer to try to draw the red cube, since there's no way I can see it anyway. Using some fancy linear algebra, your computer can determine which objects will not be visible in the scene and then skip over them in the drawing process, which is called <strong>clipping</strong>. Similarly, I can really only see the front of the blue cube from this angle. So, even though we've defined triangles that make up the faces of the other sides of the cube, it's also useless to draw those, since I can't see them. This process is called <strong>culling</strong>, and it simply involves figuring out which objects are obstructed from view in the scene. Both clipping and culling can dramatically improve the performance of a graphics application. It's expensive to have to draw all of those polygons at once, so your computer wants to draw as few as it possibly can so it can handle complex scenes!</p>\n<h2>Video</h2>\n<p>Now that we've seen how graphics and audio work, let's take a look at the combination of the two: video! When dealing with video on your computer, we're concerned with two different things: codecs and containers. We saw that PCM audio can take up a lot of space, but uncompressed video is even larger. Without any compression, an hour of high quality video can be hundreds of gigabytes large! If we ever want to distribute videos, then we're really going to need a way of compressing things to a reasonable size! The role of the <strong>codec</strong> is to do just that, as the codec (a combination of the words \"encode\" and \"decode\") is a program responsible for compressing and decompressing video. Today, the most popular standard for compressing videos is called <strong>H.264</strong>, sometimes referred to as <strong>AVC</strong>, or advanced video coding. For example, all Blu-Ray players must be able to decode video that has been encoded according to the H.264 standard. There are lots of codecs out on the Internet that compress video using H.264, including <a href=\"http://www.videolan.org/developers/x264.html\">x264</a> and <a href=\"http://www.divx.com/\">DivX</a>. There's a good chance your operating system already includes a number of codecs for popular video formats, so you probably won't need to download a \"codec pack\" from a random site on the Internet. Software applications like the <a href=\"http://www.videolan.org/vlc/\">VLC Media Player</a> also have a variety of codecs already built-in, so if you're ever sent a video that your computer can't play, trying another media player is your best bet!</p>\n<p>Now that we have a codec that can compress and decompress video, we want to package it up with some other data into a <strong>container</strong>. As its name suggests, a container is essentially a bundle of files that includes video and audio tracks, as well as captions or DVD menus in some cases. Popular video containers today include AVI, MKV, MP4, and MOV, and different container formats support different codecs for audio and video. Containers give us a bit of flexibility in creating videos, since we get to choose which codec we want to use for the video and which codec we want to use for the audio, though not all containers support all codecs. However, because codecs and containers are separate concepts, it could be the case that your media player supports a certain container format but not the codec used for the video in the container, which means you won't be able to play the video!</p>\n<h2>Video Compression</h2>\n<p>Exactly how a video gets compressed depends on the particular codec being used, but let's take a look at some high-level ideas. When we looked at lossless compression for images, the basic idea was that compressed images avoided storing redundant data for similar pixels. Now, we can apply the same exact principle to videos! In a movie or television show, it's usually the case that the <em>entire</em> scene isn't changing all at once. Instead, there's usually some subject in the video that's moving on a more static background. So, if nothing in the background is changing between frames, then we don't need to redundantly store that data! Let's consider the following three frames of a video:</p>\n<p><img alt=\"Uncompressed Video\" src=\"/static/img/13-uncompressed-video.png\" /></p>\n<p>In this short clip, we have some movement towards the right of the scene, but the chair at the left or the ground it's sitting on never actually changes. So, there's no need to save the data for all of those unchanging pixels, just like we didn't need to save the data for every single black pixel in the German flag. That means we can actually save something that looks more like this:</p>\n<p><img alt=\"Compressed Video\" src=\"/static/img/13-compressed-video.png\" /></p>\n<p>We can see this in action in the below video clip. Notice how the chairs in this scene are totally static throughout the video, and you can notice a very slight difference between the appearance of the chairs and the characters, since the same representation of the static object can be re-used from frame to frame.</p>\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/d1JA-nh0IfI\" frameborder=\"0\"> </iframe>\n\n<h2>Streaming</h2>\n<p>Services like YouTube and Hulu have popularized the idea of video <strong>streaming</strong>, which is commonly used to view videos online. If we head to YouTube and pull up a random <a href=\"http://www.youtube.com/watch?v=Awf45u6zrP0\">video</a>, then it will start playing within a few seconds. Given how large those video files are, there's no way the whole thing could have downloaded that quickly! Streaming gives us the ability to watch a video (or listen to an audio track) as it's being downloaded, so I can start enjoying a cat video even before the whole file is downloaded to my computer.</p>\n<p>When you load up a YouTube video in a browser, the video file will be downloaded by the browser in small chunks (think less than 10 seconds of video). So that the video remains smooth as you're watching it, your browser actually needs to make sure it stays a bit ahead of you as the viewer. If you're at minute 3 in a video, then the data for minute 4 will hopefully be downloading into a <strong>buffer</strong>, so you won't have to wait for anything once you reach the fourth minute of the video (at which point, your browser has ideally moved on to minute 5). However, if your browser can't keep up, perhaps due to slowness in your Internet connection or on the server from which the video is being downloaded, then the streamed video will pause, and you'll probably see an error message related to \"buffering!\"</p>\n<p>Of course, YouTube wants to display that message to you as infrequently as it possibly can, since paused videos make everyone sad. So, it's probably not the best idea to try to send a huge video file to a client on a slow Internet connection. Instead, the client could download a video of a much lower <strong>resolution</strong>. Video resolution, just like the image resolution we looked at in the last section, describes how much information has been encoded into the frames of a video. Common video resolutions are 1920x1080, 1280x720, and 854x480. These are commonly abbreviated to shorter names like 1080p, 720p, and 480p, where those numbers refer to the height of the video. Notice that in all three cases, the ratio between width and height is 16:9, which is known as the image's <strong>aspect ratio</strong>. This widescreen aspect ratio is popular among high-definition videos today. On the other hand, some lower resolutions (like 640x480), may use an aspect ratio of 4:3.</p>\n<p>So, to ensure that people on slower Internet connections can view cat videos without delay, YouTube or other video services may actually produce a few different versions of the same video, each with a different resolution. That way, anyone with a fast connection can view the high-definition 1080p cat in all of its glory, while those on a slower Internet connection can instead choose a 480p video that won't have the same quality, but will download much faster. However, maybe casual YouTube users aren't as savvy as you and have no idea which resolution they should choose, or maybe your Internet connection slows down midway through a video. <strong>Adaptive bitrate streaming</strong>, in which a server chooses which resolution video is best for clients on the fly, is one solution to problems like these. While watching a movie on a service like Netflix, you may sometimes notice a sudden change in the picture's quality, whether it be a big increase or decrease. There's a good chance that's because the server decided it would be best to start sending you a different resolution video!</p>\n<h2>GPUs</h2>\n<p>Back in our hardware section, we briefly mentioned the role of the graphics card in drawing things to the screen. One component of the video card is the <strong>GPU</strong>, or Graphics Processing Unit, which is essentially a CPU dedicated just to graphics-related computations. On modern computers, these things are seriously powerful. We saw earlier how parallelism can lead to more efficient solutions to computing problems. GPUs take parallelism to a whole new level by running <em>thousands</em> of computations at the same time. Typically, each of these computations is relatively small, so each doesn't require a ton of processing power to complete. It also helps if these problems are independent of one another, so everything can be solved at the same time with minimal need to combine everything back together. Luckily, both of these conditions are really common in graphics! For example, we may need to draw many polygons in a scene at once, and drawing a cube on the left side of the screen is totally independent from drawing a cube on the right side of the screen. Similarly, figuring out the color of the pixel in the top-left of your screen doesn't depend on figuring out the color of the pixel in teh bottom-right of your screen! Mythbusters explains it best with the following clip:</p>\n<iframe width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/-P28LKWTzrI\" frameborder=\"0\"> </iframe>\n\n<p>The result of this massively parallel computing model is huge gains in efficiency. Below is a comparison of a CPU and a GPU rendering the exact same scene:</p>\n<iframe width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/mWUf-H1Qjd8\" frameborder=\"0\"> </iframe>\n\n<p>That's it for multimedia for now. I'm in the mood for some more Spongebob Squarepants, so I'm gonna take a cartoon break. I recommend you do the same. Next up: security!</p>", "title": "A/V Club", "id": "av", "tags": ["3D Graphics", "Bitrate", "Codecs", "Containers", "GPUs", "MP3", "Sampling", "Sound", "Streaming", "Video"], "sequence": 10}, "onlinesec": {"content": "<h2>Introduction</h2>\n<p>The Internet sure is a fun place, but unfortunately, there are still some grumpy cats out there looking to take advantage of poor, unsuspecting souls. You've probably heard horror stories of identities being stolen, passwords being compromised, and viruses ravaging innocent computers. In the next few sections, we'll focus on <strong>security</strong>, which will involve looking not only at threats to your digital world, but also at how you can protect yourself from real-world harm. In general, security refers to protecting your data from prying eyes, which has become a (sadly) essential part of using computers and the Internet.</p>\n<h2>Sessions</h2>\n<p>Let's start with a example to motivate the need for security measures. When you log into sites like Gmail or Facebook, you supply them with a username and a password that is unique to you. The idea here is that only you know the password that goes along with your username, so by providing the correct password, you're proving to Google and Facebook that you are who you claim to be, which is called <strong>authentication</strong>. When we go to an airport or restaurant in real life, we usually authenticate ourself with a driver's license, ID, or passport, which is simply another way of proving that we are who we say we are.</p>\n<p>Once you log into a website, that site usually remembers who you are as you navigate to different web pages. If not, then you'd have to log in to see your email inbox, log in again to read a single email, log in again to reply, and so on. Unless you <em>really</em> like typing in your email and password, this isn't the best experience for you as a user. To avoid this problem, websites typically use tiny text files called <strong>cookies</strong> to remember who you are. When you log into a site, you start a new browsing <strong>session</strong> that lasts until you log out (or until enough time has passed that the session has expired, which is something determined by the server). Each one of these sessions has a unique identifier, usually generated using some degree of randomness, that the server creates and associates with your web browser. For example, if Alice and Bob are both browsing Facebook, then Alice could have a session ID of 123, and Bob could have a session ID of 456. This session ID is then stored on a cookie on your computer, so somewhere on your hard drive, there's a small text file containing the unique ID for your current browsing session on facebook.com.</p>\n<p>Now, when your web browser wants to inform the server who you are, it can send along the unique ID for your current session, which it can retrieve simply by reading the contents of the cookie file. So, if your web browser sends a session ID of 123 to the server, the server can look up the user that is associated with the session ID 123, and then use that information rather than asking you to log in again. Essentially, every time your browser makes an HTTP request, it sends along a little piece of information that reminds the server who you are, which gives us the experience of \"staying logged in\" as we navigate among different pages on a site. Here's what an HTTP request that includes a session ID could look like:</p>\n<pre><code>GET /home.php HTTP/1.1\n\nHost: www.facebook.com\n\nCookie: PHPSESSID=5153d29ed84c4\n</code></pre>\n<p>Now, we have an HTTP header of <code>Cookie</code>, and our session ID is the string of characters <code>5153d29ed84c4</code>. The \"PHP\" part of the cookie likely means that the website is written in a programming language called PHP, but more on that later.</p>\n<p>In order for this system to work, each user's session ID has to be unique. If both Alice and Bob have the same session ID, for example, then the server won't be able to tell them apart! So, if Bob logs in after Alice but is assigned the same session ID as Alice, then Alice could suddenly find herself logged in as Bob! If this happened on a bank's website, then Alice would have access to Bob's account information, which could be a pretty bad day for Bob.</p>\n<h2>HTTPS</h2>\n<p>Even if the server ensures everyone's session IDs are unique, which will be the case on any correctly-functioning website, we still have a problem: what if Bob is able to guess Alice's session ID? If this happens, then Bob will be able to trick the server into thinking that he's Alice and <strong>hijack</strong> her session! Typically, session IDs will be a long string of characters, making them hard to guess. But, we just saw that session IDs are transmitted in the clear in HTTP requests. So, if someone on the network is monitoring the network's traffic, then they'll be able to see everyone's session IDs as they're being sent out to various servers. There are plenty of freely available programs that do just this, including <a href=\"http://wireshark.com/\">Wireshark</a> and <a href=\"http://www.tcpdump.org/\">TCPDump</a>. The output of Wireshark is shown below. As you can see, anyone on a Wi-Fi network can see all of the packets that are being sent over the network!</p>\n<p><img alt=\"Wireshark\" src=\"/static/img/14-wireshark.jpg\" /></p>\n<p>So... now what? Seems like we need a way to transmit session IDs to a server, but in a manner that prevents prying eyes from seeing what data is being transferred over the network. Luckily, some smart people have already figured out a solution to this problem, and you may have already used it without ever noticing. When you head to sites like Gmail and Facebook, take a look at the left hand side of your address bar, which probably looks something like this:</p>\n<p><img alt=\"SSL\" src=\"/static/img/14-ssl.png\" /></p>\n<p>Notice that little green padlock to the left of the URL. Padlocks are pretty secure, so Facebook must be a secure site. Google Chrome knows that Facebook must be secure because the URL shown above starts with <code>https</code>, rather than just <code>http</code>. As you might guess, that \"s\" stands for \"secure,\" and that one little letter actually makes a big difference.</p>\n<p>HTTPS is simply another layer of top of HTTP, which if I remember correctly, is the protocol our web browser uses to make requests to web pages and receive responses from web servers. The security comes from combining HTTP with yet <em>another</em> protocol called <strong>SSL</strong>, or Secure Socket Layer. Now, rather than simply sending your session ID in an HTTP request in a format anyone can read, HTTPS will scramble your data before sending it off to a server. So, if your web browser is using HTTPS, someone monitoring the network would see something that looks more along the lines of:</p>\n<pre><code>d2VsbCBhcmVuJ3QgeW91IGNsZXZlcg\n</code></pre>\n<p>That doesn't look much like an HTTP request anymore, does it? While I can't read this (and I hope that you can't either), the recipient web server, which must also be using HTTPS, sure can! Essentially, both the web browser and the web server have agreed on some way of transforming, or <strong>encrypting</strong>, the plan text of a message into <strong>ciphertext</strong>, which is an encoding of the message that only the browser and the server can understand. When the server receives this encrypted HTTP request, it knows how to decode, or <strong>decrypt</strong>, it back into a a readable format. So, when we make a request using HTTPS, our browser first creates an HTTP request just like before, encrypts it so nobody but the server can read it, and then sends it off to the server. Now, if anyone intercepts the data before it gets to the server, they won't have any idea what it says, so we're safe! Ha ha ha, take that, Bob. When the server receives the message, it decrypts it back into a readable HTTP request and then responds just as it did before. We can see then, than the S hasn't fundamentally changed how HTTP works, it's just another layer to make it more secure!</p>\n<p>Because both the client and the server have to be on the same page with the encryption process, HTTPS is something that must be enabled on a web server. So, we can't simply type <code>https</code> into any old URL to make it secure; HTTPS must be supported on the server we're talking to. Luckily, this is the case on most servers using authentication nowadays.</p>\n<h2>Wi-Fi Security</h2>\n<p>HTTPS isn't the only way to encrypt traffic on a network. If you've ever set up a wireless network, you've probably seen options to encrypt all of the traffic that goes over the network, which may have included <strong>WEP</strong>, <strong>WPA</strong>, and <strong>WPA2</strong>. Each of these acronyms is just another way of encrypting information before we send it over a network. We saw how your web browser can encrypt HTTP traffic if it's talking to a server that supports HTTPS, but not all servers support HTTPS. So, someone using Wireshark to look at all of the traffic over your Wi-Fi network will still be able to read those HTTP requests. A solution, then, is to simply encrypt everything that is sent over the wireless network rather than only rely on the web browser to encrypt HTTP requests! To do so, we'll need some kind of secret key, usually just a password, that your wireless router will use to encrypt information. Without that password, anyone looking at the network traffic won't have any idea what it says. Once you join the network by supplying the correct password, you'll be able to see all of the decrypted traffic, so if an attacker cracks your Wi-Fi password, then you're in trouble.</p>\n<p>However, some methods for encrypting Wi-Fi traffic are better than others. WEP, for example, has actually been cracked, which means that an attacker can figure out how to decrypt messages sent over the network. So, it's not really that secure. Instead, WPA2 (which is just a newer version of WPA) is a much better way to protect your wireless network. Finally, encrypting your Wi-Fi network doesn't mean that you don't need to use HTTPS anymore, since there's always the risk that a clever attacker will figure out your network's password. Instead, think of Wi-Fi encryption as another layer of security that can work in tandem with HTTPS to protect your data.</p>\n<h2>CSRF</h2>\n<p>Now, let's shift gears a bit and look at three different attacks that can occur online. The first of these, called <strong>CSRF</strong>, or Cross-Site Request Forgery, is an attack that exploits the idea of sessions that we saw a bit earlier. CSRF attacks take advantage of the fact that your session with a website doesn't end when you navigate to a different URL. For example, if you're procrastinating work like me, you might log into Facebook, check your Gmail, read some news, and then come back to Facebook. However, you don't need to log in to Facebook again when you come back the second time, which means that your session with Facebook is still active. Instead, your session might expire after a day, a week, or a month or so, depending on how long Facebook decided your sessions should be. Clicking \"log out\" will also destroy your session, requiring you to log in again.</p>\n<p>Let's say that you do all of your online banking with bank.com. When you log into bank.com, you see that trusty green padlock in the left of your address bar, so it must be secure, right? You want to transfer some money from your checking account into your savings account, and you notice that the URL in your address bar looks something like this after you press the \"transfer\" button:</p>\n<pre><code>https://bank.com/money/transfer?to=67890&amp;amount=100\n</code></pre>\n<p>Using your newfound knowledge of URLs, it looks like this URL is telling a bank.com server to transfer $100 to account #67890, which happens to be your savings account. That URL doesn't need to include the account number the money is coming <em>from</em>, since the server assumes that the account you're currently logged into is the source of the funds.</p>\n<p>Unfortunately, some malicious users also use bank.com, and they also notice that this is the URL used to make transfers. Let's say that one of those malicious users, the pround owner of account #12345, owns the domain <code>vank.com</code>, which you might accidentally type into the address bar in an attempt to spell <code>bank.com</code>. The devlishly clever owner of vank.com now embeds the following URL on his page:</p>\n<pre><code>https://bank.com/money/transfer?to=12345&amp;amount=100\n</code></pre>\n<p>Now, if I visit <code>vank.com</code> while I'm already logged into <code>bank.com</code>, $100 is going to be transferred from my account into the attacker's account! Great bouncing icebergs, what a mean trick! The attacker has taken advantage of the fact that we can put whatever parameters we want into bank.com's transfer URL, and the server will blindly transfer money from the account of the currently logged in user. We would never actually want to transfer money into such a villainous account, but because we're indeed logged in to bank.com already, the server might assume that we indeed want to make the transfer.</p>\n<p>Luckily, sites can implement a pretty simple solution to this problem, so hopefully, your bank isn't vulnerable to CSRF attacks. One way to prevent CSRF attacks is to include a big random value on every page on the site. So, when you visit bank.com's money transfer page, the server will generate a random token like <code>8549ba93417cdef85</code> and associate it with your current session. Now, when you go to transfer money, the URL might look something like:</p>\n<pre><code>https://bank.com/money/transfer?to=67890&amp;amount=100&amp;token=8549ba93417cdef85\n</code></pre>\n<p>Now, bank.com won't let a transfer go through unless the URL includes the correct token that was generated by the server! Since the attackers at vank.com have no way to figure out the value of my token at bank.com, their trick won't work anymore, and my money will live to see another day. Sure enough, if we visit the website for a real bank, like <code>bankofamerica.com</code>, we can see that a CSRF token is indeed included on all of their forms via a tiny line that looks like this:</p>\n<pre><code>&lt;input type=\"hidden\" name=\"csrfTokenHidden\" value=\"12345\" id=\"csrfTokenHidden\"&gt;\n</code></pre>\n<h2>XSS</h2>\n<p>CSRF attacks exploit how information is handled on the server, so let's take a look at an attack that targets clients instead. <strong>XSS</strong>, which stands for Cross-Site Scripting (get it? It's like X-Mas, ho ho ho), takes advantage of your computer's web browser. We'll see in just a bit how websites use HTML to display information, but XSS attacks work by injecting HTML or other code into a website. For example, we saw earlier that the HTML <code>&lt;h1&gt;E1&lt;/h1&gt;</code> would create a heading that says \"E1\". So, what if I chose <code>&lt;h1&gt;Tommy&lt;/h1&gt;</code> as my username for a website? Potentially, \"Tommy\" would be displayed on the page as a large heading, since my username contained some HTML that the site displayed without thinking twice! That's not really the end of the world, but what if my username is a piece of HTML that makes all of the text on the page pink Comic Sans on a glitter background? Now, any page that displays my username is going to look different for everyone who visits the page! Pink Comic Sans text on a glitter background would be pretty devastating for Facebook's reputation if you ask me.</p>\n<p>Of course, we can do much more damage by injecting code onto a web page via XSS. Let's come back to the idea of session hijacking, where we tricked a server into thinking we're someone else by figuring out their unique session ID. Using XSS, we can steal a user's session ID on a web page, which would allow us to impersonate them. How evil! We know that session IDs are stored in cookies, which are just tiny files on your computer, and it just so happens that we can access those cookies via the web browser. So, if an attacker owns a website like <code>badguy.com</code>, they can place a tiny piece of code onto a poor, unsuspecting website that sends every user's session ID to <code>badguy.com</code>! Because this code will be run on the client, rather than the server, the attacker will be able to access the files that are stored locally on each user's computer.</p>\n<h2>Databases</h2>\n<p>Now, let's talk a bit of how a website might keep track of information. Dynamic websites like Facebook and Gmail store information associated with your account in something called a <strong>database</strong>. A database consists of multiple <strong>tables</strong>, where a table has <strong>columns</strong> that define what types of information the table will store, and <strong>rows</strong> in the table define values for those types. For example, let's say we own a pet store, and we want to keep track of all of the cats, dogs, and other animals in the store. So, we'll create a database for the pet store, and for now, we'll create a table for cats and a table for dogs. In our cats table, we might want to keep track of each cat's name, date of birth, color, and indoor/outdoor preference. In our dogs table, on the other hand, we might want to keep track of each dog's name, date of birth, breed, and preferred chew toy. Now, we might have some entries in our table that look like this:</p>\n<p><em>Cats</em></p>\n<table class=\"table table-bordered\">\n\n    <thead>\n\n        <tr>\n\n            <th>Name</th>\n\n            <th>DOB</th>\n\n            <th>Color</th>\n\n            <th>Preference</th>\n\n        </tr>\n\n    </thead>\n\n    <tbody>\n\n        <tr>\n\n            <td>Shocked Cat</td>\n\n            <td>2010-03-17</td>\n\n            <td>white</td>\n\n            <td>indoor</td>\n\n        </tr>\n\n        <tr>\n\n            <td>Grumpy Cat</td>\n\n            <td>2012-04-04</td>\n\n            <td>white</td>\n\n            <td>indoor</td>\n\n        </tr>\n\n        <tr>\n\n            <td>Keyboard Cat</td>\n\n            <td>1984-01-01</td>\n\n            <td>orange</td>\n\n            <td>outdoor</td>\n\n        </tr>\n\n    </tbody>\n\n</table>\n\n<p><em>Dogs</em></p>\n<table class=\"table table-bordered\">\n\n    <thead>\n\n        <tr>\n\n            <th>Name</th>\n\n            <th>DOB</th>\n\n            <th>Breed</th>\n\n            <th>Chew Toy</th>\n\n        </tr>\n\n    </thead>\n\n    <tbody>\n\n        <tr>\n\n            <td>Pluto</td>\n\n            <td>1930-09-05</td>\n\n            <td>English Pointer</td>\n\n            <td>Bone</td>\n\n        </tr>\n\n        <tr>\n\n            <td>Lassie</td>\n\n            <td>1943-10-07</td>\n\n            <td>Collie</td>\n\n            <td>Rubber</td>\n\n        </tr>\n\n    </tbody>\n\n</table>\n\n<p>Great, now we have a database with a few tables and rows in those tables. So, how does a website access information from a database? One popular way of doing so is to use something called <strong>SQL</strong>, or Structured Query Language. Popular database management systems that use SQL include MySQL, Oracle, and PostgreSQL. As its name suggests, SQL allows us to ask questions about the database in the form of text-based queries. For example, we might want to say \"What are the names of the cats in the cats table?\" If we're using MySQL, which is simply a piece of software we can download for free, for our database, then this query might look like:</p>\n<pre><code>SELECT name FROM cats\n</code></pre>\n<p>The structure of this query is dictated by the MySQL standard, much like the format of an HTTP was dictated by the HTTP specification. Let's break this down a bit. First, we have the word <code>SELECT</code>, which tells the database what you would like to do: select some information. Next, we have a list of all of the columns we'd like to retrieve. Since we just want the names of our cats, we can just say <code>name</code>, which is the name of a column in the table. Finally, we have the word <code>FROM</code> followed by the name of the table we'd like to retrieve information from. The database will then evaluate this query and give us back an answer like:</p>\n<table class=\"table table-bordered\">\n\n    <thead>\n\n        <tr>\n\n            <th>Name</th>\n\n        </tr>\n\n    </thead>\n\n    <tbody>\n\n        <tr>\n\n            <td>Shocked Cat</td>\n\n        </tr>\n\n        <tr>\n\n            <td>Grumpy Cat</td>\n\n        </tr>\n\n        <tr>\n\n            <td>Keyboard Cat</td>\n\n        </tr>\n\n    </tbody>\n\n</table>\n\n<p>And there we go, we just used SQL to get some information about our database! Now, let's say we want to get all of the information about all of our indoor cats. To do so, we might use a query like:</p>\n<pre><code>SELECT * FROM cats WHERE preference = 'indoor'\n</code></pre>\n<p>This looks a bit like our query from last time, but it has a few differences. First, notice how we're SELECTing <code>*</code> to get all of the information in the table rather than simply <code>name</code>. We <em>could</em> write out all of the columns in our database here, but the <code>*</code> is simply a shortcut for \"every column.\" At the end of our query, we're now limiting the results that we get back to indoor cats only. If we have a customer who's looking to buy an indoor cat, then there's no need to display <em>all</em> of the cats in the store, since they're only interested in a specific type of cat. For this query, our result set will look like this:</p>\n<table class=\"table table-bordered\">\n\n    <thead>\n\n        <tr>\n\n            <th>Name</th>\n\n            <th>DOB</th>\n\n            <th>Color</th>\n\n            <th>Preference</th>\n\n        </tr>\n\n    </thead>\n\n    <tbody>\n\n        <tr>\n\n            <td>Shocked Cat</td>\n\n            <td>2010-03-17</td>\n\n            <td>white</td>\n\n            <td>indoor</td>\n\n        </tr>\n\n        <tr>\n\n            <td>Grumpy Cat</td>\n\n            <td>2012-04-04</td>\n\n            <td>white</td>\n\n            <td>indoor</td>\n\n        </tr>\n\n    </tbody>\n\n</table>\n\n<p>Cool beans, now we know how we can use SQL to retrieve information from a database, but how did those rows get there in the first place? Using SQL, we can also insert new rows into a table. A query to add a new cat to the cats table might look something like:</p>\n<pre><code>INSERT INTO cats (name, dob, color, preference) VALUES ('Maru', '2008-06-01', 'gray', 'indoor')\n</code></pre>\n<p>Alrighty, looks a bit more complicated, but let's go through this. Just like last time, we first need to tell the database what we'd like to do, and in this query, we want to insert some new information. Next, we have <code>INTO cats</code>, which tells the database which table we'd like to add rows to. Then, we have a comma-separated list of columns; these are the columns that our new row will provide values for. As an aside, this list doesn't have to include every column in the table. After the list of columns, we have the word <code>VALUES</code> followed by another comma-separated list. This list, as you might guess, tells the database what the values for our new row are. The order for these values is the same as the order of the columns in the previous list, so we're providing a name of \"Maru,\" a color of \"gray,\" and so on. After we run this query, our <code>cats</code> table will have a new row, so it will look like this:</p>\n<p>What about editing existing rows in our tables? To do that, we can write a SQL statement that specifies which rows we want to change as well as what to change those rows to:</p>\n<pre><code>UPDATE cats SET preference = 'outdoor' WHERE name = 'Maru'\n</code></pre>\n<p>Okay, just like last time, the first part of this query is telling the database what we want to do. Then, we have the table we want to modify. Next, we have the name of a column in the table followed by a new value for that column. The last part of the query re-uses the same <code>WHERE</code> construction that we saw earlier with our <code>SELECT</code> query. Now, rather than making every cat in the table an outdoor cat, this query will only modify those rows where the value of the <code>name</code> column is <code>Maru</code>. So, this query might affect one row or multiple rows, depending on how many cats named Maru we have!</p>\n<p>Finally, we can use SQL to delete rows in the database. If we sell our good friend Maru to a new, happy home, then we can run the following SQL query to remove him from the database:</p>\n<pre><code>DELETE FROM cats WHERE name = 'Maru'\n</code></pre>\n<p>Here, we'd like to <code>DELETE</code> a row <code>FROM</code> our <code>cats</code> table. If we were to simply run a query that said <code>DELETE FROM cats</code>, we'd end up deleting every row from the <code>cats</code> table, which wouldn't be so good. Instead, we only want to delete a single row, so we'd like to limit our query to only those rows <code>WHERE</code> the value of the <code>name</code> column is <code>Maru</code>.</p>\n<p>Phew! That was a whirlwind tour of the basics of SQL. To recap, we looked at four basic things we can do with the information in a database: create, read, update, and delete. The elegant acronym CRUD is commonly used to describe these four basic operations, but unfortunately, not all of the SQL verbs we saw don't quite line up with these words. To create information we used <code>INSERT</code>, to read information we used <code>SELECT</code>, to update information we used <code>UPDATE</code>, and to delete information we used <code>DELETE</code>. SQL is capable of more powerful queries, but for now, let's take a look at how databases and SQL affect your online security.</p>\n<h2>Injection</h2>\n<p>In the examples above, we wrote out all of the queries by hand, but on a dynamic website like Facebook, the queries probably contain values that are set by users. For example, when you head to someone's Facebook profile page, the SQL query that is executed might look something like:</p>\n<pre><code>SELECT * FROM profiles WHERE username = 'zuck'\n</code></pre>\n<p>While the cats we saw earlier presumably didn't choose their own names, most sites allow users to choose their own usernames. So, the value in the <code>WHERE</code> clause in the above query is something that was chosen by a user, which can be potentially dangerous. Let's step back from SQL for just a moment to explain a potential security vulnerability that arises when you allow other users to dictate what queries look like. At Tommy's Grille, customers can order whatever they want by filling out a form that looks like the below and giving it to the chef:</p>\n<p>I would like <u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u> cheeseburgers cooked <u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u> and topped with <u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</u>.</p>\n<p>Normal customers might submit something that looks like this:</p>\n<p>I would like <u>&nbsp;2&nbsp;</u> cheeseburgers cooked <u>&nbsp;medium-well&nbsp;</u> and topped with <u>&nbsp;lettuce, pickles, and mayo&nbsp;</u>.</p>\n<p>And they will be rewarded with delicious cheeseburgers cooked to perfection. However, notice how we haven't provided customers with a checklist of cooking temperatures or toppings; we're allowing them to write in whatever they want. We aim to please at Tommy's Grille, so we want to be as flexible as possible with what we allow our customers to order. However, that means that there's nothing stopping a customer from submitting an order form that looks like this:</p>\n<p>I would like <u>&nbsp;2&nbsp;</u> cheeseburgers cooked <u>&nbsp;medium-well and then thrown at the nearest customer's head. I don't care about the toppings, so you can stop reading this now&nbsp;</u> and topped with <u>&nbsp;lettuce, pickles, and mayo&nbsp;</u>.</p>\n<p>Dang, despite our best intentions, it looks like we've been taken advantage of. Since we let customers write whatever they wanted into the order form, we've exposed ourselves to a vulnerability. If we just blindly do whatever the customer writes, then we could end up doing something malicious if a customer is as devlishly clever as this one. This type of attack is called an <strong>injection</strong>, because someone has injected some malicious instructions into an otherwise harmless cheeseburger order form.</p>\n<p>Let's try to use an injection in the context of SQL now. If we let users choose their username, then whatever they pick will fill in the blank in the following SQL query, which might be designed to grab their profile information:</p>\n<pre><code>SELECT * FROM profiles WHERE username = '_____'\n</code></pre>\n<p>Notice how we've been enclosing the value in the <code>WHERE</code> clause in quotes. What happens, then, if someone were to put a quote in their username? For example, I'd like to choose the username <code>' OR '1' = '1</code>. Seems like a strange thing to want as a username, right? But, let's fill in the blank with exactly this value.</p>\n<pre><code>SELECT * FROM profiles WHERE username = '' OR '1' = '1'\n</code></pre>\n<p>Uh oh. After we plugged in my username into the blank, we ended up with a completely different SQL query! What results will this give us? Well, it seems like a pretty safe bet that 1 = 1 for the forseeable future, and if at some point we discover that 1 is not equal to 1, then we have bigger problems on our hands that we should be worrying about. Because 1 = 1, the <code>WHERE</code> clause in this query is going to be true for every single row in the table, so this query is simply going to return the entire table. In the context of Facebook, that means I'd be able to view anyone's profile information, regardless of their privacy settings.</p>\n<p>Let's consider an even worse scenario. Here's some SQL that could be used in a website's login process:</p>\n<pre><code>SELECT * FROM users WHERE username = '_____' AND password = '_____'\n</code></pre>\n<p>If this query returns any row, that must mean that the user supplied a valid username and password pair, so we can go ahead and log them in as that user. Now, I'm going to log in with the username <code>rj</code> and the password password <code>' OR '1' = '1</code>. Let's plug those in:</p>\n<pre><code>SELECT * FROM users WHERE username = 'rj' AND password = '' OR '1' = '1'\n</code></pre>\n<p>Holy haberdashery, Batman! Once we plugged in my password into the query, we again ended up with a <em>different</em> SQL query than the one we originally meant to execute. What's going to happen this time? We're going to get all rows that satisfy at least one of two conditions: either the username is <code>rj</code> and the password is blank, or <code>'1' = '1'</code>. So, once again, we're going to get every single row back! Potentially then, the site could allow us to log in as the user <code>rj</code>, or we could end up logging in as another user in the database. Exactly what happens depends on how the site works underneath the hood, but neither of these outcomes sounds like good news to me.</p>\n<p>So that was pretty bad, but what if I want to have the username <code>'; DELETE FROM profiles; --'</code>? That's a username that really rolls off the tongue, isn't i? Let's plug it in again and see what happens:</p>\n<pre><code>SELECT * FROM profiles WHERE username = ''; DELETE FROM profiles; --'\n</code></pre>\n<p>Ouch. We saw earlier that <code>DELETE FROM profiles</code> is a SQL query that will delete all the rows in a table called <code>profiles</code>. It turns out that SQL allows us to express more than one query at a time if we separate them with semicolons. So, the above statement is actually a few queries packed into one. First, the database will find all rows where the username is blank, which probably returns nothing. We don't really care about that, but once we move on to the next query, ka-boom. The last bit of my username, <code>--</code>, is just a way of stopping anything else from executing in that above example, since we ended up with a stray quote at the end of our query.</p>\n<h2>Database Security</h2>\n<p>As we've seen, we can do a <em>lot</em> of damage with SQL injection. Seems like this is something that we'd obviousl want to prevent in the real world. The primary way to do so is to <strong>sanitize</strong> all of the database inputs. All of the injections we saw involved some trickery with the single quote character, so one natural first step to take is to prevent users from entering a quote into the query. So, we can simply replace, or <strong>escape</strong>, the single quote character with something else, so users can't directly manipulate the SQL query. For example, an escaped version of a SQL query might look something like this:</p>\n<pre><code>SELECT * FROM profiles WHERE username = '\\' OR \\'1\\' = \\'1'\n</code></pre>\n<p>Here, we're using a backslash to escape the quotes. So, whenever we see a \\, we'll treat the character that comes directly afterwards a bit differently. Now that we've escaped the input, this query will <em>actually</em> look for a user with the username <code>' OR '1' = '1</code>, where the unescaped version would wreak havoc on our poor website.</p>\n<p>Many database systems also allow you to restrict what queries can do. For example, we can essentially say \"execute this query, but don't let it change any values in the database.\" Now, whatever the query is, our database will prevent it from actually making any changes. Before, we were able to inject a <code>DELETE</code> query into what started off as a <code>SELECT</code> query; by enforcing some permissions on the query, this won't work. Besides, if we know that we're going to perform a query that will simply get a user's profile information, there's no reason for that query to be modifying the database at all, so this kind of protection makes sense. Database security (and security in general) is serious business, so it's always best to take as many preventative measures as we possibly can, even if we <em>think</em> we're safe from harm!</p>", "title": "Safety .net", "id": "onlinesec", "tags": ["CSRF", "Databases", "HTTPS", "Injections", "Sessions", "SQL", "XSS"], "sequence": 11}, "datasec": {"content": "<h2>Introduction</h2>\n<p>Now that we've seen some Internet-related security threats and solutions, let's talk a bit about securing your own computer. First, we'll dive into cryptography to get a sense of how we can actually prevent some of the attacks we saw last time by ensuring that prying eyes can't see the information exchanged between two parties. After that, we'll see some threats to the data on the computer that I'm sure is near and dear to your heart, as well as some concrete ways you can protect your digital information!</p>\n<h2>Encryption</h2>\n<p>Last time, we saw how technologies like HTTPS and WPA2 used encryption to securely transfer data between computers. Now, let's take a look at a few ways of actually going about encrypting and decrypting textual information. One of the simplest methods of encrypting and decrypting text is called the <strong>Caesar cipher</strong>, named after the big J himself. The Caesar cipher works by shifting, or <em>rotating</em>, each character in the alphabet over by some value. For example, we could rotate every character by 1, which would mean that an A becomes a B, a B becomes a C, a Z becomes an A, and so on. If we rotate every character by 2, then A becomes C, B becomes D, and Z becomes B.</p>\n<p>Let's try an example. We want to encrypt the word \"banana,\" and let's pick a rotation of 13 (we can pick any number we want for the rotation). Here's a table of every letter in the alphabet rotated by 13, or <strong>ROT13</strong> for short:</p>\n<pre><code>ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\nNOPQRSTUVWXYZABCDEFGHIJKLM\n</code></pre>\n<p>Great, now we know how to encrypt the letters of any message! So, the word \"banana\" becomes \"onanan\" under this encryption scheme. If we were to transmit this message over a network, then any prying eyes would just see what looks like a nonsense word, so our message can be sent safely! On the other hand, if we told the recipient of our message how many characters we'd be rotating by in advance, then they can decrypt the message by shifting the characters in the other direction. Knowing the size of the rotation is the key to being able to understand our encrypted message, so we call this additional piece of information the <strong>key</strong>, which is known by both the sender and receiver.</p>\n<p>So, we're safe now, right? Sadly, not quite. Since there are 26 values in the alphabet, that means that there are only 26 different possible keys for the Caesar cipher. To see for yourself, compare the ciphertext for a key of 27 with a key of 1: you'll get the same thing! An attacker, then, could potentially crack our encryption scheme simply by trying every possible key on the ciphertext. Eventually, one of the keys the attacker tries will be the key that we picked, so they'll be able to decrypt our message. This type of attack is called a <strong>brute-force</strong> attack, since it consists simply of trying everything possible until something works. Since there are such a small number of keys, this won't take long at all, so sending your bank account password over the Internet using the Caesar cipher might not be the best idea in the world. Maybe we should be more secure and encrypt our information with ROT26?</p>\n<p>It looks like having such a small number of keys to choose from ultimately led to our demise. In order to increase the number of possible keys, let's try a different approach. Rather than rotating each character in our message by the same number of positions, let's try rotating each letter by a different amount! For example, we can rotate the first character by 2, the second character by 4, and the third character by 6, then lather, rinse, and repeat. If our message is \"banana,\" then we'll rotate the \"b\" by 2 to get \"d\", the \"a\" by 4 to get \"e\", and the \"n\" by 6 to get \"t\". Now, the next letter will be rotated by 2 again, so \"a\" will become a \"c\", and so on. Eventually, we'll get \"detcrg\" as our ciphertext. At first glance, this doesn't look any more readable than \"onanan\", but let's see how long it will take our attacker to crack our encryption. We still have 26 possible values for each rotation (since we're still using the English alphabet), but since we have 3 different rotation values, we have a total of 26 &times; 26 &times; 26 = 26<sup>3</sup> = 17576 different keys! Now we're cooking. If we pick an even longer key, then we can make it even more time-consuming for a brute-force attack to succeed, especially if the attacker doesn't know how long our key is.</p>\n<p>Telling the recipient of our message the long series of numbers that we used for our key might be kinda annoying. Instead, we can an encoding similar to ASCII to write down our key. In ASCII, we said that a value of 65 corresponded to an A, which still seems a bit arbitrary if you ask me. Let's instead say that a value of 0 corresponds to an A, a 1 is a B, a 2 is a C, and so on. Now, rather than saying our key is \"2 4 6\", we can say that our key is \"ceg\", which is a bit easier to remember. Notice that this doesn't change how encryption works at all, it's just a different way of writing down the key. This type of encryption is called the <strong>Vigen&egrave;re cipher</strong>, incidentally named after a Frenchman who didn't actually invent it. So, in the Caesar cipher we rotate each character by the same amount and our key is a single number, while in the Vigen&egrave;re cipher we rotate each character by a different amount, and our key is a sequence of letters.</p>\n<p>Let's try another one! Instead of a prehistoric-sounding word like \"ceg\" (try saying it out loud, it's kinda fun)</p>\n<p>So, is the Vigen&egrave;re cipher the be all end all of ciphers? While it's stronger than the Caesar cipher, it's still pretty weak. Using some trickery that involves looking at the frequency of characters in the ciphertext, it can still be cracked relatively quickly. In fact, there are plenty of tools online, like <a href=\"http://smurfoncrack.com/pygenere/\">this</a> and <a href=\"http://cryptoclub.math.uic.edu/vigenere/decrypt.php\">this</a>, that will do just that. Looks like we can still do better!</p>\n<h2>Asymmetric Key Encryption</h2>\n<p>In both the Caesar and Vigen&egrave;re ciphers, both the sender and receiver had to agree on some kind of key before the message was sent. In general, encryption methods that rely on this kind of exchange are called <strong>symmetric key cryptocraphy</strong>, because the same key is used by the sender to encrypt the message and the receiver to decrypt the message. More advanced symmetric key algorithms include AES (used by the U.S. government) and Blowfish, but they use the same basic principles as Caesar and Vigen&egrave;re. However, if the key is ever compromised, then any attacker can decrypt any message that has been encrypted with the key, which isn't so good. The process of transferring a key from one party to another is thus a potential weakness for all of these methods!</p>\n<p>Another technique is called <strong>asymmetric key cryptography</strong>, which <em>doesn't</em> require both parties to agree on some kind of shared key. While symmetric key cryptography uses just one key, asymmetric key cryptography uses two different keys: a public key and a private key. As their names suggest, public keys are designed to be shared with anyone on the Internet, while private keys are designed to be kept private, just like passwords. Now, the process of encrypting and decrypting a message requires both a public key and a private key. For example, if Alice wants to send a message to Bob, she can encrypt it using Bob's public key, which is publicly available. Now, the only want to decrypt that message is with Bob's private key, so only Bob can actually read the message that Alice encrypted. No need for Alice and Bob to share any kind of secret key! As an aside, we can also go the other way around. Let's say I receive a message from the President, and I want to make sure that the message is genuine (and not sent by anyone else). If the President encrypts the message with his private key, then I can use his public key to decrypt the message and prove its authenticity. Because only the President has access to his private key, he can use it to \"sign\" messages that can be verified with his public key.</p>\n<p>How messages are actually encrypted and decrypted depends on a lot of scary math, but at a high level, these methods rely on something called a <strong>trapdoor one-way function</strong>, which is essentially an operation that's really hard to reverse-engineer. Let's take a look at an example. If I have any two prime numbers, it's really easy for me to multiply them together to get a third number. So, if I have the prime numbers 2459 and 8863, I can pull out a calculator and tell you that the product of these two numbers is 21794117 without too much effort. However, if you just give me the number 21794117, it's much harder for me to tell you what prime numbers were multiplied together to get that product! We can see, then, that multiplication is pretty easy, but prime factorization (the reverse direction) is much more difficult! Using a technique called <strong>RSA</strong>, we can encrypt and decrypt messages using this fact. Essentially, we can use the product of two prime numbers to encrypt a message, so the message can only be decrypted if we know what those two prime numbers are, which we just saw was difficult to figure out from the encrypted message alone. By the way, if someone <em>does</em> figure out a way to calculate prime factorizations efficiently, then we're in a lot of trouble! A lot of smart people think there's no way to do so, but this is actually one of the largest unsolved problems in computer science.</p>\n<p>We can also combine symmetric and asymmetric key cryptography! Before, we said that a weakness with symmetric key cryptography was the need to agree on some kind of shared key without anyone else seeing. We talked about mixing paints together a few sections ago, and I miss that. So, let's say that Alice and Bob want to agree on a secret <em>color</em>, which they can hypothetically use as a key to encrypt and decrypt messages, but they know that a third person, Eve, can see every piece of information they exchange with each other. First, Alice and Bob will publicly agree on a starting color. They know that Eve is going to find out what this color is, so it will serve as a public key. Let's say that both Alice and Bob like green, so they choose that. Now, here's what everyone knows:</p>\n<p>Now, Alice and Bob will both choose another color without telling anyone else, so this is their private key. Let's say that Alice picks yellow and Bob chooses purple. At this point, here's what everyone knows:</p>\n<p>Next, both Alice and Bob will now mix together their public and private colors in order to get a new color. Mixing two colors together is another one-way function: it's easy to mix chartreuse and blanched almond, but given a mixed color, it's really hard to figure out exactly what two colors were mixed. After Alice and Bob mix their colors, here's what we have:</p>\n<p>Now that Alice and Bob both have a mixed color, they'll send it to each other, which means that Eve will find out. Now, the situation looks like this:</p>\n<p>Finally, Alice and Bob will mix their original private color with the mixed color they received, which means that they'll end up with the same color!</p>\n<p>Remember though, that Eve has been able to see everything exchanged between Alice and Bob. That means that Eve knows the public colors they started with, Alice's mixed color, and Bob's mixed color. However, none of this information is particularly useful, since Eve has no way of knowing Alice and Bob's shared secret without knowing their secret keys! So, using this process, called <strong>Diffie-Hellman</strong>, Alice and Bob were able to agree on a shared key using asymmetric key cryptography. Cool, huh?</p>\n<h2>Malware</h2>\n<p>Now that we have a handle on cryptography, let's take a look at a few different types of <strong>malware</strong>, which is an oh-so-clever combination of the words \"malicious\" and \"software.\" As this elegant portmanteau suggests, malware is a general term for software whose purpose in life is to make your life miserable by launching some kind of malicious attack on your computer or from your computer. So, malware is software that has been designed to be intentionally destructive by some not so nice person out there, which is different than software that crashes because of some problems with its design.</p>\n<h2>Viruses</h2>\n<p>There's a good chance that you've already had an experience with a computer <strong>virus</strong> on your machine or a machine owned by a friend or family member. Typically, viruses take destructive action like slowing down your computer or deleting files because some person on the Internet thought it would be fun to wreak havoc on your poor computer. Much like biological viruses reproduce by first infecting an existing healthy cell, a computer virus usually attaches itself to some other kind of file or program, whether that be a PDF, spreadsheet, or screensaver. Then, when a user opens up that program, the virus launches and begins its path of destruction. So, viruses generally require some kind of human interaction in order to infect a machine, which usually comes in the form of running an infected program. That infected program may come to you as an email attachment or perhaps as a file downloaded from a sketchy web page, so always think before opening something if you have any doubts! Once a virus has been loaded, it has the ability to make new copies of itself, but because viruses need some kind of human interaction to launch, viruses can't automatically propagate themselves to other computers.</p>\n<p>The Internet has already seen its fair share of viruses over the past few decades. For example, a virus called the <strong>Melissa virus</strong> <a href=\"http://news.cnet.com/Melissa-virus-spreads-in-Internet-time/2100-1023_3-223648.html\">spread like wildfire</a> back in 1999. Melissa was contained within a Microsoft Word document called <code>LIST.DOC</code>, which apparently contained passwords to a number of pornographic websites and was named after a Miami stripper. Ooookay, let's move on. When someone opened the Word document, you know, just out of curiosity, the virus loaded itself into the computer's memory. Then, the virus sent a copy of itself to the first 50 contacts in the users' Microsoft Outlook address book (as an email attachment) and potentially attached itself to new Word documents created on the computer. So, if one of the 50 recipients of that email opened the attachment, 50 new people would receive a copy of the virus. The email traffic generated by this virus was enough to jam corporate networks, so much so that many large companies had to shut down their email services to protect themselves. However, it wasn't until someone actually opened up the infected Word document that the virus was actually able to do anything, so users could protect themselves from the virus simply by ignoring or deleting the email.</p>\n<h2>Worms</h2>\n<p><strong>Worms</strong> are very similar to viruses, but they have a few key differences. While we saw that viruses required some kind of user interaction in order to spread from computer to computer, worms have the ability to <strong>self-propagate</strong>, so they can spread to other machines without the user doing anything. Worms spread automatically to other devices by exploiting security holes on the computers on a network, which means that worms have the potential to flood the network with traffic to bring it down. Worms may also be used to create a <strong>botnet</strong>, which is a network of zombie computers controlled by the author of the worm. A botnet might be used to launch something called a <strong>DDoS</strong>, or Distributed Denial of Service, attack, in which a network of computers makes a huge number of requests to the same web server to an attempt to overwhelm it and bring it down. The larger the botnet, the more successful such an attack might be, since more computers are making requests at the same time. Finally, unlike a virus, which attaches itself to an existing document or program, a worm might exist as a stand-alone program.</p>\n<p>The <strong>Conficker</strong> worm, first detected in November of 2008, created one of the largest botnets in the history of the Internet. The worm targeted vulnerabilities in the Windows operating system, and it's suspected that it was able to infect over ten million computers. That means that the author of the worm could publish instructions that would be blindly executed by millions of computers, and people feared that the Conficker botnet powerful to <a href=\"http://www.npr.org/2011/09/27/140704494/the-worm-that-could-bring-down-the-internet\">bring down the Internet itself</a>. While that didn't happen (phew!), people did use Conficker to attack banks and national defense networks, causing millions in damages. That's a lot of damage for such a tiny little worm, if you ask me. While the Conficker worm was particularly difficult to remove at first, software utilities have since been developed to clean your computer should it become infected.</p>\n<p>Another popular worm was the <a href=\"http://archives.cnn.com/2000/TECH/computing/05/04/iloveyou.01/index.html\">ILOVEYOU worm</a>, which spread in mid-2000. While the Conficker worm created a huge botnet, the ILOVEYOU worm instead destroyed lots of files on infected computers. In particular, the worm targeted JPEG, MP3, and other files that you probably wouldn't want to lose. To spread itself to other computers, ILOVEYOU utilized both IRC, an early form of instant messaging, as well as email. However, ILOVEYOU one-upped the Melissa virus by emailing <em>everyone</em> in a user's address book, rather than just the first 50. So, this is to say that computer worms can be used for a variety of destructive purposes, and they're particularly devastating because of their self-propagation abilities.</p>\n<h2>Spyware, Trojans and Adware</h2>\n<p>One last type of malware is called <strong>spyware</strong>, which describes any piece of malware whose purpose in life is to steal information from your computer. For example, spyware might install a <strong>keylogger</strong>, which is a small program that records every key you press on the keyboard and sends it to some remote source. Using a keylogger, an attacker could figure out your passwords, bank account numbers, and really anything else you might type. Even more creepily, spyware could include software that lets attackers view your screen (or even webcam) or take control of your machine!</p>\n<p>A <strong>trojan</strong>, named after the famed Trojan Horse, is one type of spyware. Trojans are essentially malware in disguise. While a Trojan Horse looks like it might be a useful piece of software, like a game or some kind of system utility, it might actually destroy files on your computer or allow someone else to control your computer. Unlike a virus or worm, though, trojans usually don't try to replicate themselves, since their purpose was to allow an attacker to access the data on your computer. So, a trojan is essentially a clever way for attackers to get spyware onto your computer!</p>\n<p>Another type of spyware is <strong>adware</strong>, which as you might guess, is malware that displays unwanted advertisements on your computer. For example, adware might cause unwanted pop-up messages as you're trying to use your computer, or adware might track your Internet-browsing habits in order to generate additional revenue for companies. That being said, adware might also include less harmful applications. Many free software programs include advertisements as a way to generate money without requiring users to pay to download the software. Sites like Google and Facebook offer small advertisements on the peripheries of their web pages that other sites have paid to place. Free iPhone or Android apps take a similar approach, as most people don't mind the presence of a few ads if it means they don't need to pay for the app! (And those that do can usually pay to remove them.) In these contexts, adware isn't so bad, but adware that displays advertisements all over your computer without your permission sounds malicious to me.</p>\n<h2>Malware Protection</h2>\n<p>Now that we've seen a few different types of malware, let's discuss a few ways you can protect yourself from harm. Luckily, while there may be lots of malicious attackers out there writing programs designed to wipe our hard drive, make your computer unusably slow, or steal your personal information, there are also lots of people writing software to combat viruses, worms, and spyware. Installing anti-malware software designed to detect and remove threats to your computer is a very good idea, particularly if you know you have a good deal of sensitive information on your machine. Anti-malware software can scan your computer for threats, so it's also a good idea to schedule regular, automatic scans to alert you of any potentially harmful software on your computer. Here are a few examples of anti-malware applications you can install on your PC or Mac:</p>\n<ul>\n<li>\n<p><a href=\"http://www.lavasoft.com/\">Adaware Anti-Spyware</a></p>\n</li>\n<li>\n<p><a href=\"http://www.avast.com/en-us/index\">Avast Antivirus</a></p>\n</li>\n<li>\n<p><a href=\"http://free.avg.com/us-en/homepage\">AVG Antivirus</a></p>\n</li>\n<li>\n<p>Clam Antivirus for <a href=\"http://www.clamav.net/lang/en/\">Windows</a> and <a href=\"http://www.clamxav.com/\">Mac</a></p>\n</li>\n<li>\n<p><a href=\"http://www.eset.com/us/home/products/antivirus/\">ESET Antivirus</a></p>\n</li>\n<li>\n<p><a href=\"http://www.safer-networking.org/\">Spybot Anti-Spyware</a></p>\n</li>\n<li>\n<p><a href=\"http://us.norton.com/\">Norton Security</a></p>\n</li>\n</ul>\n<p>However, using anti-virus software on your computer isn't a license to make reckless security decisions! Even with anti-virus software installed, it's important to think before opening sketchy email attachments or software applications. We've seen how the devastating effects of viruses and trojans can be prevented simply by ignoring an infected email or choosing not to install a malicious program. So, think twice before opening that .exe file attached in a chain email sent from your high school friend who you haven't talked to in years!</p>\n<p>Another important piece of online security is password safety. The registration page for many a web page nowadays will ask you to choose a password with some minimum length that isn't based on any dictionary words and includes capital letters, numbers, and symbols. Yes, it might be slightly annoying to come up and and remember a password that meets all of these requirements, but this is for your own good. Earlier, we saw how easy it was to crack the Caesar cipher using a brute-force attack because there were so few keys to try. The same idea applies here: if you choose a purely numerical password, then a brute-force attack only needs to try passwords with 10 different characters. So, if an attacker knows that your password is 8 numbers, then there are only 10<sup>8</sup> = 100 million different things you possibly could have chosen. However, if your password could have characters from the nearly 100 different printable ASCII characters, then an attacker has to try something on the order of 10 quadrillion (or 10 million billion, if you prefer) different passwords! In the same vein, picking a longer password also means that a brute-force search will have to search over a larger space of passwords.</p>\n<p>In an attempt to crack your password more efficiently, an attacker might use something called a <strong>dictionary attack</strong>, which takes advantage of passwords that are based on words. Many people are much more likely to choose a password like \"monkey1\" than a password like \"sdfov87q4ivb\", simply because the former is easier to remember. So, if an attacker starts by guessing passwords that are based on actual words and thus more likely to be chosen by humans, there's a chance they can crack your password faster than they would have if they simply used a brute-force search. The solution here is simply to make sure your password isn't based on any dictionary words, so this approach wouldn't work!</p>\n<p>In addition to choosing passwords, it's also important to manage them effectively. For example, if you're on an unencrypted Wi-Fi network, it's probably not the best idea to use an unencrypted instant messaging client to chat a highly classified corporate password to your co-worker. Similarly, writing down passwords on sticky notes is just asking for trouble, since an attacker walking through the building might (literally) stumble upon what should be secret information. Instead, there are plenty of applications like <a href=\"https://lastpass.com/\">LastPass</a> and <a href=\"http://keepass.info/\">KeePass</a> that are designed to store your passwords securely. Web browsers like Chrome and Firefox also allow you to securely store your passwords in the cloud, so they'll also be available on other computers you log into.</p>\n<p>However, in order to store your passwords securely, websites shouldn't actually save your passwords in the clear in a database. Instead, sites should store a <strong>hash</strong> of your password, which is simply the result of applying some kind of one-way function. For example, MD5 and SHA-1 are a few methods for hashning text. Since we saw that these one-way functions are hard to reverse, even if the site's database is compromised, attackers won't immediately have access to your password. However, password hashes are still subject to attacks like brute-force. LinkedIn recently had a security breach that led to password hashes being released to the public, and attackers were able to figure out over 150,000 passwords because many users had chosen bad passwords! Check out <a href=\"http://www.huffingtonpost.com/2012/06/08/linkedin-password-leak-infographic_n_1581620.html\">this infographic</a> for more information. As you can see, the most common passwords on the site were short and based on words in the English language, so you should always choose a strong password!</p>\n<p>Speaking of other computers, by the way, always be careful when using a public computer! You never know what on Earth could be installed on one of those, since the person who used it before you may not be as well-versed in security as you are. So, if possible, it might be best to avoid doing your online banking on a computer the public has physical access to.</p>\n<h2>Forensics</h2>\n<p>Let's look at one last bit of data-related security before we finish up. Earlier, we saw how information is stored on both hard drives and RAM. Hard drives, for example, have a big table that keeps track of where files are actually stored on the drive, whether those locations are platters on a HDD or transistors on an SSD. But, what happens when you empty your recycle bin and delete files from your computer? Perhaps not what you'd expect! The bits of a deleted file aren't actually <em>removed</em> from the hard drive. Instead, what gets erased is the entry in the master file table, which means that your computer has essentially forgotten where the bits of the file are, although they are still very much there. If your hard drive were a book, then deleting a file would be more like removing a chapter from the table of contents than ripping a page out of the book and shredding it! So, someone might be able to use <strong>forensic</strong> analysis to scour your hard drive looking for bits of files that are still on the drive. Of course, bits and pieces of deleted files may have been overwritten by the operating system (since it forgot where the files were), but analysts may be able to recover large portions of deleted files from a hard drive. By the same logic, files that have been \"freshly\" deleted may be easier to recover than those that were removed from the drive a long time ago.</p>\n<p>Don't worry, though, there are a few approaches we can take to solve this problem. Before ever selling your computer to someone else, make sure to wipe (or physically remove) the hard drive. You might hear that formatting a hard drive is the right thing to do here, but formatting a drive doesn't necessarily erase all the 0s and 1s that have been stored on the drive. Instead, it overwrites a limited amount of data and tells the operating system that the disk is blank. So, data from a formatted drive may still be recovered, even though it will be a bit more difficult. Rather than formatting the drive, a safer solution is to securely delete everything on the drive using a utility like <a href=\"http://www.dban.org/\">DBAN</a>. DBAN and other applications like it completely fill up your hard drive with random numbers or zeros in order to ensure that everything on the drive is overwritten and unrecoverable. To be even more secure, the US Government mandates that all government drives be completely wiped, which means the entire disk will be overwritten with random data and verified, at least <em>seven</em> times.</p>\n<p>Another solution is to encrypt your entire hard drive. We've seen how we can use encryption to scramble the data of text-based messages, but we can apply the same techniques to every single bit on your hard drive! For example, we can pick a strong key with which to encrypt our hard drive, and all data will be encrypted before being written to the hard drive and decrypted after being read from the hard drive. Now, if someone gets a hold of your HDD, the only way they'll be able to read the information from it is with the password you choose when you encrypted the drive.</p>\n<p>Your hard drive isn't the only piece of hardware that's vulnerable to forensic analysis. When we talked about RAM, we mentioned that once you turned your computer off, the contents of RAM was lost. However, some fairly recent research has revealed that's <em>not</em> quite the whole truth. While the data on RAM will eventually fade away, it will actually do so predictably and gradually. So, even after a computer has been turned off, it's totally possible to dump the entire contents of its RAM! If passwords or bank account numbers are stored in RAM, then even if you're using an encrypted hard drive, an attacker could be able to access them. If you're using an encrypted hard drive, then there's a good chance the encryption key is also stored in RAM, which means that an attacker could be able to decrypt your encrypted hard drive with access to the physical hardware. In fact, if the physical sticks of RAM are kept very cold, then the contents of RAM can actually be kept around for even longer. Check out the below video for a demo, where we can see that almost all of the bits stored in RAM have been preserved ten minutes after the computer was powered off!</p>\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube.com/embed/JDaicPIgn9U\" frameborder=\"0\"> </iframe>", "title": "Security Blanket", "id": "datasec", "tags": ["Asymmetric-Key Encryption", "Ciphers", "Cryptography", "Forensics", "Malware", "Spyware", "Symmetric-Key Encryption", "Trojans", "Viruses", "Worms"], "sequence": 12}, "privacy": {"content": "<h2>Introduction</h2>\n<p>We've talked a bit about security, but let's now shine a spotlight on something that's closely related: <strong>privacy</strong>. In general, privacy refers to keeping your personal information, whether that be your Social Security number or your web browsing history, hidden from the prying eyes of others. On the Internet today, it's perhaps surprisingly easy for others to glean your personal information, though some intents are more malicious than others!</p>\n<h2>Authentication</h2>\n<p>We've seen how sessions can be used by web servers to create the effect of being \"logged in\" on the server, but it's pretty common for websites to want to get access to your information on another website. While browsing the web, you may have noticed that some sites and apps allow you to log in via your Google, Facebook, Twitter, or LinkedIn account, since those sites already contain some useful information about you. These companies, then, need some way of giving third parties access to your information and identity while still preserving your privacy. We can take a few different approaches to solve this problem: authentication and authorization. Though these words might sound like synonyms, but as we'll see, they actually complement each other!</p>\n<p>First, we'll take a look at <strong>authentication</strong>. The basic idea behind authentication is that we can allow users to log into one of their existing accounts on the web instead of needing to create a new identity. For example, let's say that I'm starting a new website, but I don't want to make users register for a whole new account, since that's just yet another username and password combination that they'll have to keep track of. But, I'm still going to need some way for users to identify themselves so that Alice can't masquerade as Bob. So, rather than implementing some way for users to prove their identify on my site, I can effectively outsource this process to another site like Google by redirecting users to a Google login page. After a user logs in with their Google account, Google will redirect the user back to my website, passing along some way of uniquely identifying the user as well as some other information that could include a name and email address. Now, I can trust that the user is who they say they are so long as I trust that Google has actually authenticated them securely. Now, even if this third party site is compromised, my private Google credentials will still be kept safe! One such standard for allowing third parties to authenticate users is called <strong>OpenID</strong>, which is indeed supported by Google. Similar to the way servers needed to support HTTPS (which means that we can't simply type <code>https</code> into the address bar of any site), servers must also support a standard like OpenID if they want other websites to authenticate users against their data. When logging into a site via OpenID, you'll often have the choice of which identity you'd like to use, so you might see buttons that look something like this:</p>\n<p><img alt=\"OpenID\" src=\"/static/img/16-openid.png\" /></p>\n<h2>Authorization</h2>\n<p>Authentication is nice, but it might not be sufficient for some websites. An iPhone app, for example, might want access to your Google Calendar, Contacts, and Email in addition to allowing you to log in to the app using your Google account. What we really want in this case is some way of <strong>authorizing</strong> some third party to access our information (or parts of it, at least) on another website. In our example, you might want to authorize the app to access our calendar and contacts, but since you want to keep your emails private, you want to still be able to use the app without giving it access to your email. One method for doing just that is called <strong>OAuth</strong>, whose name comes from \"open authorization.\" To make matters confusing, both \"authentication\" and \"authorization\" start with \"auth,\" sorry about that. With OAuth, we might give a site like Twitpic access to our Twitter account via a screen like this:</p>\n<p><img alt=\"OAuth\" src=\"/static/img/16-oauth.jpg\" /></p>\n<p>Now, you can control exactly what resources each third party has access to. A third party then receives a special OAuth token that it can supply in order to access the information you specified, much like an HTTP request will include a session ID to access information on a server. At any time, you can revoke the token to deny a third party access to your data, but any information the site has already retrieved (and possibly saved) can't be taken back. You may have also seen OAuth if you've logged into any Facebook apps that request to use some of your information. Many Facebook apps, though, request access to an unnecessary amount of information; a simple Facebook game might request access your email, friends, family, birthday, and marital status, even though none of that really feels necessary to make a virtual farm.</p>\n<p>So, authorization provides a controlled way for third parties to access your information on websites, while authentication focuses on establishing your identity using an existing service. In that sense, OpenID describes a way to log into some website, while OAuth says nothing about the login process and is instead concerned with permitting access to resources.</p>\n<h2>Tracking Cookies</h2>\n<p>We've seen how cookies can be used to keep you logged into a website, but cookies can also be used to track your browsing habits. This is particularly common in online advertising; have you ever noticed that banner ads on website very often pertain to a website you visited recently? For example, after visiting for a pet store (as I tend to do), I may notice an advertisement for cat food on a completely unrelated website. It's one thing for me to search for cats on Amazon and get recommendations for cat food, but now, it seems like some other third party is somehow aware of my browsing habits. So, this could be considered a bit of a privacy violation.</p>\n<p>In order to create targeted advertisements, sites might use a <strong>tracking cookie</strong> (sometimes referred to as a third-party cookie), which is really no different than the cookies used to log you into Facebook. Let's say that cats.com and dogs.com both display advertisements from the same ad network, ads.com. When I visit cats.com, an advertisement will be loaded from ads.com. (Hopefully, it doesn't get in the way of my cat browsing.) Not only will the advertisement from ads.com be displayed on the web page, but a cookie (remember, with some kind of unique ID for me) will also be set on my web browser. For security reasons, only ads.com will be able to read the value of this cookie, and ads.com can't read any cookies set by cats.com. So, ads.com now has a way of knowing that I visited cats.com. Kinda creepy, but now what happens when I head to dogs.com? If dogs.com is also displaying advertisements powered by ads.com, then the same cookie sent on cats.com will be sent to ads.com. So, ads.com can respond with an ad related to cats, since it knows I was just on cats.com. The more sites that use ads.com, the more ads.com can learn about my browsing habits, which might violate my privacy. Visually, this process looks something like this:</p>\n<p><img alt=\"Tracking Cookies\" src=\"/static/img/16-cookies.png\" /></p>\n<p>Not to worry, ads.com's devious plan to track your browsing can be thwarted. Most web browsers include a setting to disable third-party cookies on websites, so the browser will simply ignore ads.com's request to store a cookie. We don't need to disable cookies altogether, though; remember, the only problem arose when ads.com was able to set a cookie via an advertisement on cats.com. Besides, if we disabled all cookies, then we'd have no way of maintaining a session with a server! In fact, browsers are starting to <a href=\"http://arstechnica.com/business/2013/02/firefox-22-will-block-third-party-cookies/\">disable third-party cookies</a>, by default so companies might soon need to start looking for new ways to offer you targeted advertisements as you browse the web!</p>\n<p>For a video explanation of tracking cookies, check out the below video!</p>\n<iframe frameborder=\"0\" scrolling=\"no\" width=\"512\" height=\"288\" src=\"http://live.wsj.com/public/page/embed-92E525EB_9E4A_4399_817D_8C4E6EF68F93.html\"> </iframe>\n\n<h2>Server Logs</h2>\n<p>Even if you're using your web browser's private browsing mode, servers can still track your behavior. Web servers like Apache can be configured to track every single page that is visited on a website. Each of the URLs visited on the server can be written to a <strong>log</strong> file, which could look something like this:</p>\n<pre><code>173.194.43.14 - - [31/Mar/2013:03:39:26 +0000] \"GET / HTTP/1.1\" 200 12908 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2\"\n\n157.166.226.25 - - [31/Mar/2013:03:39:47 +0000] \"GET /cats HTTP/1.1\" 200 37813 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31\"\n</code></pre>\n<p>Here, two different users have visited pages on my web server. Looks like I'm not as popular as I thought I was. Each of these lines looks pretty crazy, but we can see a few things that look familiar. At the start of each line, we have an IP address. This is the IP address of the visitor's computer, which remember, could be the result of NAT, so the device accessing my server might not actually be accessible at that IP address. Still, this is usually enough information to get a rough estimate of the visitor's geographic location. Next, we have the date and time at which the page was accessed. After that, we have what looks like the first line of an HTTP request. From this string, we can see what type of request was made (probably a GET or POST), as well as the URL of the page that was visited. The two numbers that follow are the HTTP response code (remember what 200 means?) and the length of the HTTP response, both of which will be included in the HTTP response from the server, as we saw earlier.</p>\n<p>Finally, we have a funny-looking string called the <strong>user agent</strong>, which is a key-value pair in an HTTP request that is used to describe the user's web browser. In the first request, it looks like the visitor is on a Windows machine running the Safari web browser, and in the second request, we have a user running Mac OS X version 10.8.3 and using the Google Chrome web browser. What's weird, though, is that both of those user agent strings start with \"Mozilla/5.0,\" but neither Safari nor Google Chrome is made by Mozilla, which is the company behind the Firefox web browser. The history behind user agent strings is <a href=\"http://webaim.org/blog/user-agent-string-history/\">a long and sad story</a>, but essentially, way back in the early days of web browsers, the Netscape web browser (codenamed Mozilla) supported some features that the Mosaic web browser did not. So, based on what browsers identified themselves as, web servers could send back different versions of the same website, so a user on Netscape would see a different page than a user on Mosaic. Even today, user agents are used for this purpose; many websites will make a version of their page just for mobile devices and use the user agent to determine which version of the page to send. But, I digress. Back to our story: once other web browsers, like Internet Explorer, started supporting the features that Mozilla did, they wanted web servers to give them Mozilla's version of web pages. Rather than wait for servers to make this change, browsers simply started calling themselves Mozilla to get what they wanted. So, almost all web browsers today claim to be Mozilla-compatible. The lying doesn't stop there, though. Google Chrome uses a layout engine called <strong>WebKit</strong> that was originally developed by Apple, and WebKit was based on an engine called <strong>KHTML</strong>, which is kinda like an engine called <strong>Gecko</strong> developed by Mozilla for a browser called Firefox, but not quite. Ugh, the result of all this Tom Foolery is a super long and confusing user agent string, because of course every browser wants to tell the world that they support the latest and greatest!</p>\n<p>All of this is simply to say, though, that web servers are able to collect a good deal of information about you via the HTTP requests you make to websites without much additional effort.</p>\n<h2>Analytics</h2>\n<p>There are also <strong>analytics</strong> services that make it easy for website owners to track even <em>more</em> information about their visitors. Google, for example, offers a free service called (what else?) Google Analytics, which is shown below.</p>\n<p><img alt=\"Google Analytics\" src=\"/static/img/16-google-analytics.jpg\" /></p>\n<p>Woah, that's a whole lot more than IP addresses. Analytics services often track not only what pages users visit (so we can easily see what the most popular pages on a site are), but also how long users stay on pages, how they found the site (e.g., from a search engine or link on a social networking site), and even the resolution of their computer's display! Believe it or not, that last one is actually a pretty helpful statistic, since it can give website owners an idea of how many users are on a mobile device, tablet, or full-sized computer. Often, though, the purpose of these analytics solutions, which may very well keep track of every single click you make on a web site, isn't malicious. Instead, this information is genuinely useful for website developers. For example, let's say Tommy's Grille (now recovered from the devastation levied by your SQL injection attacks) has just rolled out a new feature where you can talk into your computer's microphone to place an order. It turns out this feature is really expensive to keep running, so the owners might naturally want to know how many people are actually using it. In this case, using some type of analytics would give the owners a concrete sense of whether or not keeping this feature is actually worth it. Similarly, many websites use something called <strong>A/B testing</strong> in order to figure out the best way to do something. A/B testing is simply a controlled experiment in which some users are given a new feature or version of something, and others are not. Using analytics, website developers can track users' behavior in order to improve the site. So, if you've ever been browsing Google or Facebook and saw a different version of the site on your friend's screen, you may very well be taking part in an experiment! Don't worry, though, no animals are usually harmed. Still, while server logs and analytics software are not usually intended to be malicious, do understand how much information about you, your computer, and your web browsing habits can be gleaned simply by your visit to a website!</p>\n<h2>Protecting your Privacy</h2>\n<p>We saw that server logs often contain some identifying information about your machine, but you can effectively lie to servers about both your IP and user agent. To disguise your IP address, you might use something called a <strong>proxy server</strong>. The idea behind proxy servers is similar to that behind NAT and private IP addresses. Remember, when you make a request from a private IP address, the server is tricked into thinking that the request actually came from another device, which is the router in this case. So, you're able to hide your private IP from the server. With a proxy server, you can essentially do the same thing: after connecting to a proxy, it can make requests to other web pages on your behalf and then forward you the responses. That way, only the proxy knows what your IP address actually is, and the websites you're browsing only see the IP address of the proxy. There are lots of free web proxies out there, but a few include <a href=\"http://www.hidemyass.com/\">Hide my Ass</a> and <a href=\"http://proxify.com/\">Proxify</a>. Proxies are nice, but they can potentially slow down your web browsing a bit, since just like any other web server, if lots of people are using the same proxy, it might have trouble keeping up. Furthermore, proxies might not support HTTPS connections, so be careful what information you entrust to the owner of the service! Visually, making a request to a server via a proxy looks like this:</p>\n<p><img alt=\"Proxy\" src=\"/static/img/16-proxy.jpg\" /></p>\n<p>Since user agents are simply a key-value pair in an HTTP header, they can be forged as well. We saw earlier how we can use <code>telnet</code> to make HTTP requests, but if we want to trick a server into thinking that we're making a request from a web browser, we can simply include the appropriate user agent string. Web browsers like Chrome and Firefox also have options to edit the user agent string, so you can change it to be whatever you want! For example, this might come in handy at an airport that allows smartphones to access free Wi-Fi, but not laptop computers. By changing your user agent to that of an iPhone, you can trick the network into thinking your laptop is a smartphone, which might get you 30 minutes of cat GIFs while you're waiting for your plane to board. In Google Chrome, you can change the user agent via the settings menu, where you'll see options like this:</p>\n<p><img alt=\"User Agent\" src=\"/static/img/16-user-agent.png\" /></p>\n<p>Taking advantage of the cryptography we saw in the last section is another easy way to protect your privacy. For example, there are lots of different programs that will encrypt your entire hard drive, so all of your information is safe from harm if your computer is lost or stolen. <a href=\"http://www.truecrypt.org/\">TrueCrypt</a> is one such piece of software for Windows, Mac, and Linux, and Mac OS X actually has full disk encryption built right into the operating system via a program called FileVault. While constantly encrypting and decrypting files does add a bit of overhead that can theoretically slow your computer down, the process is so fast these days that you won't even notice a difference. If you have sensitive information on your computer, then it's definitely a good idea to encrypt your hard drive to protect your privacy, but be sure not to forget the all-important password to all of our data!</p>\n<p>In addition to encrypting your entire hard disk, programs like TrueCrypt can also be used to encrypt individual files. TrueCrypt, for example, allows you to create a special file that acts as a container for the files you want to protect; only with a password of your choosing can anyone open up the container to access the files stored inside. This container, though, looks just like any other file on your computer, so it might not be immediately obvious to an attacker where your encrypted files are located in the first place!</p>\n<p>Finally, we've seen how the process of sending an email involves a number of different servers potentially under the control of third parties, and the contents of your emails are typically sent totally in the clear. If you want to send someone sensitive information, then this might not be the best road to take. Instead, we can use the asymmetric-key cryptography methods we saw last time to give our email some privacy. Using a free tool called <strong>GPG</strong>, available for free <a href=\"http://www.gnupg.org/\">here</a>, you can encrypt your email with the recipient's <em>public</em> key. Then, when they receive your email, they can decrypt it using their <em>private</em> key, and that's the only way that the cleartext can be obtained from the ciphertext. Since we encrypted the email before sending it, anyone who intercepts our message along the way (including the SMTP servers) won't be able to read it! Unfortunately, not all email clients support this kind of encryption, so we might be sacrificing some convenience for the sake of privacy. For this to work, we'll also need the recipient's public key, so they need to be using GPG as well. By the way, GPG is confusingly based on something called PGP, which is simply a proprietary method that accomplishes the same end. Here's what an email that's been encrypted with GPG might look like before it's decrypted, so this is what anyone who intercepts your email might see:</p>\n<p><img alt=\"GPG\" src=\"/static/img/16-gpg.png\" /></p>\n<h2>Piracy</h2>\n<p>While you might be interested in protecting the information on your laptop, many software companies are naturally interested in protecting something else: their software. Despite many companies' attempts to charge users money for software products, <strong>warez</strong>, or cracked versions of software, abounds on the internet. For example, many apps are protected by some kind of activation key, which is a long, hard-to-guess value that users need to supply in order to use the software. Usually, activation keys follow the same pattern, so an app can check if an activation process is valid by following a sequence of steps. Unfortunately, if someone is able to figure out that pattern, then they'll be able to supply fake activation keys that unlock the software!</p>\n<p>Often, the word <strong>hacker</strong> is associated with this kind of behavior. Many people who identify as \"hackers,\" however might take offense to that. While hacking usually carries connotations of destructive or illicit actions, a better description of a hacker is someone with expertise in their field, someone who loves to solve problems, and someone known for creative, imaginative solutions. In <a href=\"http://www.paulgraham.com/gba.html\">this essay</a>, Paul Graham, a well-known venture capitalist, put it best:</p>\n<blockquote>\n<p>To programmers, \"hacker\" connotes mastery in the most literal sense: someone who can make a computer do what he wants&mdash;whether the computer wants to or not.</p>\n</blockquote>\n<p><a href=\"http://www.paulgraham.com/hp.html\">This</a> is another great essay in which Paul Graham compares hackers to painters, emphasizing that hackers are people who make things and learn by doing. <strong>Cracking</strong>, which involves breaking into software, is something that <em>some</em> hackers do, but hacking and cracking aren't quite the same thing!</p>\n<h2>Cyberlaw</h2>\n<p>Of course, breaking into software systems isn't usually... legal. Let's take a brief foray into <strong>cyberlaw</strong> to discuss the <strong>DMCA</strong>, or the Digital Millenium Copyright Act. The DMCA, signed into law in 1998 by none other than <a href=\"http://knowyourmeme.com/memes/inappropriate-timing-bill-clinton\">Bill Clinton</a>, is divided into two main parts: copyright and anti-circumvention. First, <strong>copyright</strong> is a legal protection for authors of content, whether the work be literary, musical, or graphical. According to copyright laws (in the US, at least), the owner of a work has the exclusive rights to reproduce, make new derivatives, and distribute it. Like any law, there are a few exceptions, including <strong>fair use</strong>, which allows you to use copyrighted works for educational purposes as well as criticism and parodies. On the Internet, this law has important implications for sites where users can upload content. YouTube, for example, allows users to post videos, which could include copyrighted works that users don't have the right to reproduce or distribute. In that case, the owner of the copyrighted work might want to issue a DMCA <strong>takedown notice</strong>, which identifies the copyrighted work and asks (nicely, of course!) the file hosting website to remove it. YouTube in particular makes this process really easy through a friendly <a href=\"http://www.youtube.com/yt/copyright/copyright-complaint.html\">web form</a>. Other services, like the now-defunct MegaUpload, ignored these notices and faced <a href=\"http://thenextweb.com/insider/2012/01/20/heres-the-full-72-page-megaupload-doj-indictment/\">charges</a> from a few unhappy lawyers.</p>\n<p>DMCA also deals with <strong>anti-circumvention</strong>, which prohibits people from breaking into protected software systems. The definition of circumvention might include decrypting information, removing an access control layer, or otherwise breaking some digital lock placed on a copyrighted work. An example of one of these digital locks is <strong>DRM</strong>, or Digital Rights Management. DRM is a layer that enforces some kind of access policy on software, whether that be preventing an e-book from being read on another device to ensuring music files can't be copied or distributed to other computers. Apple, for example, used to use a form of DRM called FairPlay that prevented music files from playing on \"unauthorized\" computers. However, software applications could be downloaded to remove DRM from music files, or you could simply burn the music to a CD and then rip it back off to break the digital lock. As you might expect, DMCA wouldn't be too happy with you if you did that. But alas, we have some exceptions here, too. For example, under fair use, people are allowed to break copy protection on DVDs as well as <strong>jailbreak</strong> mobile devices in order to use a phone on a different carrier or install different software. Ultimately, though, DMCA tries to place power in the hands of the copyright holders to prevent unwanted reproduction.</p>\n<p>That's it for privacy and security more broadly! Hopefully, we didn't scare you <em>too</em> much. But, as you use your computer and browse the web, do keep in mind the various security and privacy threats that (unfortunately) abound on the Internet!</p>", "title": "Private Eye", "id": "privacy", "tags": ["Analytics", "Authentication", "Authorization", "Cookies", "Cyberlaw", "Logs", "Piracy"], "sequence": 13}, "design": {"content": "<h2>Introduction</h2>\n<p>After reading so much about software, I'm sure you're itching to create a bit of your own! Let's start by taking a look at how software is designed. If you're reading this, then you must be doing so via some kind of application, where that be a web browser like Chrome, document viewer like Preview, or even text editor like Notepad. Right this second, take a moment to look around whatever piece of software you're using. Is the interface beautiful, or is it a bit of an ugly duckling? How easy is it to use? Does it feel clunky, or is it slick and streamlined? The answers to these questions depend on how the software you're using is <strong>designed</strong>, which includes not only how it <em>looks</em>, but also your <em>experience</em> in using it. So, design includes both what color buttons should be as well as what buttons should be included and where they should be placed.</p>\n<h2>Design Principles</h2>\n<p>First, let's talk about a few design foundations. Ultimately, the goal of designers is to create products that are both beautiful to look at and easy to use. For basic design principles for doing just that (proposed by Robin Williams in the excellent book <a href=\"http://www.amazon.com/Non-Designers-Design-Book-Robin-Williams/dp/0321193857\"><em>The Non-Designer's Design Book</em></a>) can be abbreviated using the elegant acronym <strong>CRAP</strong>. While perhaps you're used to seeing this word in a different context, the CRAP we'll talk about in this section refers to Contrast, Repetition, Alignment, and Proximity. Each of these terms alone is pretty simple, but they come together to create great designs.</p>\n<p>The idea of <strong>contrast</strong> is that elements that are very different should look very different. Contrast doesn't just refer to color, as elements can also vary in size, shape, and typeface, for example. If elements don't contrast with each other enough, then users might assume that they're related somehow, since they look the same. Here's a good example of contrast taken from Harvard's School of Engineering and Applied Sciences. On the left is the navigation menu, which has a fundamentally different purpose than the content on the right. Notice how the menu and the main body text contrast with each other, so it's clear to the user that there's a division between the two.</p>\n<p><img alt=\"Contrast\" src=\"/static/img/17-contrast.png\" /></p>\n<p>Here's another example. This time, we're using contrast to create a nice aesthetic effect rather than make a website easy to use. If we're going to make elements different, then we may as well make them <em>really</em> different. Then, we can create a bold, striking visual effect like this:</p>\n<p><img alt=\"Contrast\" src=\"/static/img/17-contrast.jpg\" /></p>\n<p>Next up is <strong>repetition</strong>. If we have a big website with lots of different pages, we can create a more organized, unified feel by repeating elements across the site. Repetition is also great for branding&mdash;if users see the same logo all over a website, then it will be more memorable and easily associated with the site. So, repetition can be used to create a cohesive design. <a href=\"https://www.hipmunk.com/\">Hipmunk</a> is a travel website that features an adorable chipmunk in their logo:</p>\n<p><img alt=\"Repetition\" src=\"/static/img/17-repetition.jpg\" /></p>\n<p>The chipmunk can be found throughout the steps of the flight-finding process, and his presence ties these different steps together. The same idea can be found on Google's search pages, which have a navigation bar that looks like this:</p>\n<p><img alt=\"Repetition\" src=\"/static/img/17-repetition.png\" /></p>\n<p>Even though Google has a variety of different search products ranging from images to shopping, the same navigation bar can be found on each page. So, the repetition of elements, whether those be adorable characters or navigation bars, can help create a unifying experience across different pages.</p>\n<p>A is for <strong>alignment</strong>, which refers to the placement of elements on a page. By aligning elements, we can create a cleaner, sharper-looking layout than we could by simply placing elements randomly on the page. Instead, elements' positions should create a visual hierarchy on the page, which results in a more organized design. Here's an example from Facebook. Notice how the thumbnails and the text are all left-aligned, and the space to create a new comment uses the same alignment, since it's related.</p>\n<p><img alt=\"Alignment\" src=\"/static/img/17-alignment.jpg\" /></p>\n<p>And here's another example, this time from the New York Times homepage. Though the New York Times has a <em>ton</em> of content on the page, by aligning headlines and body text, the designers can still create an organized feel.</p>\n<p><img alt=\"Alignment\" src=\"/static/img/17-alignment.png\" /></p>\n<p>Finally, we have <strong>proximity</strong>. The idea behind proximity is similar to the idea behind contrast: just as similar elements should look similar, and similar elements should be placed in similar locations on the page. If elements are grouped visually, then we'll naturally perceive them as a single unit. For example, take a look at the squares below. On the left, the squares are placed in random locations, so we focus on them as individual shapes, while on the right, the proximity of the squares causes us to see them as a group.</p>\n<p><img alt=\"Proximity\" src=\"/static/img/17-proximity-1.gif\" /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img alt=\"Proximity\" src=\"/static/img/17-proximity-2.gif\" /></p>\n<p>The same principle applies to content organization. Here's an example from <a href=\"http://mashable.com/\">Mashable</a>, where we can see that two blocks of content have been created via proximity.</p>\n<p><img alt=\"Proximity\" src=\"/static/img/17-proximity.png\" /></p>\n<p>That was a lot of CRAP, so let's recap. Contrast describes differences in elements, repetition describes elements common to multiple pages, alignment describes the positioning of elements, and proximity describes visual groupings. With these four basic principles, we can create some great design!</p>\n<h2>Typography</h2>\n<p>If words didn't exist, then all websites would probably just be repositories of cat pictures. Sadly, though, there are lots of words on the Internet, so an important part of design is making those words look good, whatever they may say. <strong>Typography</strong> describes the appearance of text on a page, which includes the style, size, and placement of text. As you've probably noticed, your operating system comes pre-loaded with a good number of different fonts, or <strong>typefaces</strong>. Broadly speaking, we can break fonts down into a few different categories:</p>\n<p><img alt=\"Fonts\" src=\"/static/img/17-fonts.png\" /></p>\n<p>Notice how <strong>serif</strong> fonts and <strong>sans-serif</strong> fonts look a bit different; while serif fonts feel pointy, sans-serif fonts are smooth. A <strong>serif</strong> refers to a small, decorative flourish (often just a tiny line) on the edge of a character, so naturally, a sans-serif font is one without serifs. Here's a comparison between the two, with the serifs highlighted.</p>\n<p><img alt=\"Serifs\" src=\"/static/img/17-serif.jpg\" /></p>\n<p><strong>Monospace</strong> fonts, on the other hand, make sure that each letter is the same width, which can be helpful in getting text to line up without any effort. Other types, like script and symbols, are a bit more self-explanatory. We can also characterize a typeface based on the various heights of its characters. Here are a few height lines we can draw across a font:</p>\n<p><img alt=\"Lines\" src=\"/static/img/17-type-lines.jpg\" /></p>\n<p>Let's go through a few of these. The characters sit on the <strong>baseline</strong>, which is just like the lines on a piece of lined paper. Some letters, like \"l\" and \"t\", are a bit taller than others, and the <strong>ascender</strong> line defines how tall these letters can be. Similarly, letters like \"g\" and \"p\" drop down a bit below the baseline, and the <strong>descender</strong> line describes how low they can go. Finally, the <strong>midline</strong> is the height of your run-of-the mill lowercase letter, and the <strong>cap</strong> height is the height of a capital letter.</p>\n<p>Once we have a font, we can change a few things related to spacing. First, <strong>leading</strong> describes the amount of vertical space between lines of text. A double-spaced essay, for example, has more leading than a single-spaced document. Readable text strikes a balance between smooshing lines of text together and spacing text so far apart that lines no longer look related. Here's an example of the effects leading can have on text:</p>\n<p><img alt=\"Leading\" src=\"/static/img/17-leading.png\" /></p>\n<p>While leading is the vertical space between lines of text, <strong>tracking</strong> is the horizontal space between characters on the same line. Here are a few different examples of the same text with different tracking values:</p>\n<p><img alt=\"Tracking\" src=\"/static/img/17-tracking.gif\" /></p>\n<p>Related to tracking is something called <strong>kerning</strong>, which is the process of adjusting the tracking between certain characters to make some pieces of text look much cleaner. The capital \"T\" is an interesting character; the top of the letter is a bit like an awning, so there's some space for other stuff, perhaps a lowercase letter, underneath. So, simply placing characters right next to each other might not produce the most elegant results. Here's an image to illustrate. On the top, we have kerning between the \"T\" and the \"o\" in \"tomorrow\" as well as between the \"A\" and \"V\", while the bottom doesn't use kerning at all. When these two pieces of text are placed next to each other, we can see that kerning actually makes a pretty big difference!</p>\n<p><img alt=\"Kerning\" src=\"/static/img/17-kerning.png\" /></p>\n<h2>Ten Usability Heuristics</h2>\n<p>Now that we've talked a bit about how to make something look good, let's take a look at a few ways to make something easy to use. Even if you design the nicest-looking website the world has ever seen, if people can't find the \"Sign Up\" button or figure out how to use your product, then all your CRAP will go to <em>waste</em>. I could make these stupid puns all day, so let's talk about something else. Back in the 90s, a smart guy named <a href=\"http://www.nngroup.com/articles/ten-usability-heuristics/\">Jakob Nielsen</a> proposed ten <strong>usability heuristics</strong> (or rules of thumb) that any <strong>user interface</strong>, which is simply the front-facing controls of a website, or any software application, really, should follow.</p>\n<p>#1: <em>Visibility of system status</em>. Make sure your users know what's going on at all times. If your site is doing something (perhaps behind the scenes), make sure you make that clear to users, else they might get confused and go somewhere else. Progress bars are a great way to do this, since users know not only that something is happening, but also how much longer it might take.</p>\n<p><img alt=\"Progress bars\" src=\"/static/img/17-progressbar.jpg\" /></p>\n<p>#2: <em>Match between system and real world</em>. We spend a lot of time living in the real world, so we're pretty used to it by now. There's no reason that using a computer should feel like a whole new world to the user. Instead, avoid jargon and images that are specific to your site, since users might not know what they mean. Apple is notorious for creating interfaces that are modeled after real world things. Here's a screenshot of the iBooks app, which looks just like a real-world bookshelf.</p>\n<p><img alt=\"iBooks\" src=\"/static/img/17-ibooks.jpg\" /></p>\n<p>#3: <em>User control and freedom</em>. Don't make it difficult for users to do what they want. From any page, for example, it should be easy for the user to get to the most important parts of the website. This could also mean putting up \"emergency exit\" signs throughout your site, so users are always free to get back to where they were before. Gmail does this through it's amazing \"undo send\" feature, which gives users the control to prevent an email from being sent even after they hit send.</p>\n<p><img alt=\"Undo\" src=\"/static/img/17-undo.png\" /></p>\n<p>#4: <em>Consistency and standards</em>. Be consistent with your use of images and language throughout the site. Users should never have to wonder if a word used on one page means the same thing as a different word on another page. Similarly, don't invent a new standard if you don't have to. If you're making a new email app, then calling the email inbox something other than \"inbox\" is just going to confuse people. Here's a screenshot from Microsoft Word and Microsoft PowerPoint; notice that the toolbars are consistent!</p>\n<p><img alt=\"Office\" src=\"/static/img/17-office.png\" /></p>\n<p>#5: <em>Error prevention</em>. Emergency exit signs are great, but ideally, users never have to use them. After designing a website, you know exactly how to use it, and you know all of the ins and outs. However, someone coming to your site for the first time certainly doesn't, so you should make it as difficult as possible for them to mess something up! Here's a screenshot from <a href=\"http://wordpress.com\">Wordpress</a>, a blogging platform. Notice how the \"save\" action gets a big button, while the \"cancel\" action is only a bit of text. Because the \"save\" button is so much bigger, it's much less likely that the user will accidentally delete their post!</p>\n<p><img alt=\"Primary\" src=\"/static/img/17-primary.png\" /></p>\n<p>#6: <em>Recognition rather than recall</em>. Remembering how to use your website shouldn't require any extra brain cells. Rather than expecting users to remember which submenu a certain option is found in, make it easy for your users to recognize how to perform actions. Here's a great example from Keynote. Rather than making me remember what each of my many fonts looks like, the font menu uses each font to display its name. Now, it's much easier for me to find what I'm looking for!</p>\n<p><img alt=\"Keynote\" src=\"/static/img/17-keynote.png\" /></p>\n<p>#7: <em>Flexibility and efficiency of use</em>. You and your friend might use a website totally differently. For example, I love using keyboard shortcuts, but I have a friend who prefers clicking buttons, so he doesn't have to memorize a big list of keys. In order to make both of us happy, your site should be flexible. Your interfaces should cater to new and experienced users alike, so that everyone can make use of your site efficiently. Here's a list of just some of the keyboard shortcuts found in Gmail, which I think allows me to use the site much more efficiently:</p>\n<p><img alt=\"Keyboard Shortcuts\" src=\"/static/img/17-shortcuts.png\" /></p>\n<p>#8: <em>Aesthetic and minimalist design</em>. After making a cool website, there's a natural tendency to want to show off all the amazing features you built. However, that doesn't mean that you should cram a button or checkbox for every single possible option into a single page. Instead, make sure any page only contains information that is absolutely necessary, to avoid overwhelming the user. Here's what can happen if you try to fit too many things into a small space:</p>\n<p><img alt=\"wget\" src=\"/static/img/17-wget.png\" /></p>\n<p>#9: <em>Help users recognize, diagnose, and recover from errors</em>. Despite your best efforts, there's a good chance that users will mess something up while using your site. Rather than denying the inevitable, make it easy for users to figure out what they did wrong and how they can fix it. Here's an example from <a href=\"/static/img/17-form.jpg\">Mint's</a> registration page. Notice how easy it is to see which parts of the form were filled out incorrectly, and the page also includes helpful messages that explain how to fix the problems!</p>\n<p><img alt=\"Mint\" src=\"/static/img/17-form.png\" /></p>\n<p>#10: <em>Help and documentation</em>. In a perfect world, we could create user interfaces that were self-explanatory to everyone that saw them, but sadly, this isn't the case in the real world. Many users, particularly those who may be unfamiliar with your site, might simply want easy-to-follow instructions that teach them how to use your product. So, having something that explains how to use your site, whether that simply be a picture, screencast, or textual instructions, can go a long way in making sure that your users are able to use your creation.</p>\n<p>All right, now that you have some design foundations, let's take a look at what actually goes into creating a website!</p>", "title": "Design School", "id": "design", "tags": ["Design Principles", "Typography", "Usability Heuristics"], "sequence": 14}, "html": {"content": "<h2>Introduction</h2>\n<p>It's finally the moment you've all been waiting for... let's make a website! In order to make snazzy-looking web pages, we'll need to learn about two new things: <strong>HTML</strong> and <strong>CSS</strong>.</p>\n<h2>HTML</h2>\n<p>We've mentioned briefly before that web pages are written in a language called <strong>HTML</strong>, or HyperText Markup Language. HTML is not considered a programming language, though, since we can't perform any kind of logic in HTML. Instead, HTML is used to represent the structure of documents. For example, a document might have a heading, a navigation bar, a bulleted list, and several paragraphs. Using HTML, we can represent the different parts of this document using ASCII text.</p>\n<p>Using HTML <strong>tags</strong>, we can demarcate the different sections of our document. For example, we might represent a paragraph in HTML like this:</p>\n<pre><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;\n</code></pre>\n<p>Here, we've used the <code>p</code>, or paragraph, tag, to create a paragraph. In HTML, tags are always enclosed between angle brackets, so the tag <code>&lt;p&gt;</code> says \"here comes a paragraph. After this <strong>start tag</strong> comes the actual text of the paragraph that will be displayed in the web browser. Because <code>&lt;p&gt;</code> is an HTML tag, it won't actually be displayed by the browser. Finally, all good things must come to an end, and <code>&lt;/p&gt;</code> is the <strong>end tag</strong> for the paragraph. For every tag we open in HTML, we'll also need a corresponding closing tag. Together, these three things form a single <strong>element</strong> on the page.</p>\n<p>Paragraphs are nice, and here are some other basic HTML tags you might want to know about.</p>\n<ul>\n<li>\n<p><code>b</code>: Bold</p>\n</li>\n<li>\n<p><code>i</code>: Italics</p>\n</li>\n<li>\n<p><code>h1</code>: Top-level heading</p>\n</li>\n<li>\n<p><code>h2</code>: Subheading (these go all the way down to <code>h6</code>)</p>\n</li>\n</ul>\n<p>Often, we'll nest tags inside of each other. For example, if we want to make text both bold <em>and</em> italic, we can do something like this:</p>\n<pre><code>&lt;b&gt;&lt;i&gt;Text formatting gone wild&lt;/i&gt;&lt;/b&gt;\n</code></pre>\n<p>We can also nest tags to create lists. The <code>&lt;ul&gt;</code> tag creates a new \"unordered list\" (aka bullets), and it can contain as many <code>&lt;li&gt;</code>, or \"list items,\" as you want. So, we can create a bulleted list in HTML like this:</p>\n<pre><code>&lt;ul&gt;\n\n    &lt;li&gt;Item 1&lt;/li&gt;\n\n    &lt;li&gt;Item 2&lt;/li&gt;\n\n    &lt;li&gt;Item 3&lt;/li&gt;\n\n&lt;/ul&gt;\n</code></pre>\n<p>Switching from an unordered list to an ordered list (i.e., one with numbers) is as easy as:</p>\n<pre><code>&lt;ol&gt;\n\n    &lt;li&gt;Item 1&lt;/li&gt;\n\n    &lt;li&gt;Item 2&lt;/li&gt;\n\n    &lt;li&gt;Item 3&lt;/li&gt;\n\n&lt;/ol&gt;\n</code></pre>\n<p>We can take a similar approach to create HTML tables. The <code>&lt;table&gt;</code> tag starts off a table, and we can define rows with the <code>&lt;tr&gt;</code> tag and cells with the <code>&lt;td&gt;</code> tag. Here's a table with two rows and two columns.</p>\n<pre><code>&lt;table&gt;\n\n    &lt;tr&gt;\n\n        &lt;td&gt;Row 1, Column 1&lt;/td&gt;\n\n        &lt;td&gt;Row 1, Column 2&lt;/td&gt;\n\n    &lt;/tr&gt;\n\n    &lt;tr&gt;\n\n        &lt;td&gt;Row 2, Column 1&lt;/td&gt;\n\n        &lt;td&gt;Row 2, Column 2&lt;/td&gt;\n\n    &lt;/tr&gt;\n\n&lt;/table&gt;\n</code></pre>\n<p>Sometimes, we'll want to specify some additional information to go along with a tag. Let's say that we want to create a hyperlink on a web page, so when you click a piece of text, your web browser will whisk you away to somewhere else on the Internet. So, we have two things we need to specify: what the text of the link should say, and where the link should take you. To include both of these pieces of information into a single tag, we can use something called an <strong>attribute</strong>, which is simply a key-value pair inside of an HTML tag. Here's how we can create a link using an <code>&lt;a&gt;</code> tag (where \"a\" is for \"anchor\"):</p>\n<pre><code>&lt;a href=\"http://google.com\"&gt;Click here to go to Google!&lt;/a&gt;\n</code></pre>\n<p>Okay, here we have a single attribute called \"href\". As you can see, the value of this attribute is a URL. Now, the text inside of the <code>&lt;a&gt;</code> tag is the text that will actually be displayed by the web browser, so the user can click on it.</p>\n<p>Let's take a look at another example. This time, we'd like to put an image on our web page, so we'll use the <code>&lt;img&gt;</code> tag. Since we'll be displaying an image, it doesn't really make sense to put any text inside an opening <code>&lt;img&gt;</code> tag and a closing <code>&lt;/img&gt;</code> tag. Instead, we'll use an attribute to tell the web browser where the image we'd like to display is located. Here's how we might display an image called <code>cat.jpg</code>:</p>\n<pre><code>&lt;img src=\"cat.jpg\" alt=\"This is a cat\" /&gt;\n</code></pre>\n<p>Just like before, we've included a few key-value pairs inside the tag. The <code>src</code> attribute is a URL pointing to an image, and the <code>alt</code> attribute is the text that should be displayed when the user puts their mouse over the image (and is useful for accessibility reasons). Notice, though, that our tag ends with <code>/&gt;</code> instead of <code>&lt;/img&gt;</code>. This is simply a shortcut, since we know that there won't be any text inside of our <code>&lt;img&gt;</code> tag.</p>\n<p>Now that we have the basics down, let's make a full-fledged HTML page. The first thing that we'll need on our HTML page is a <strong>doctype</strong>, which is simply a short statement that tells everywhere that they're about to read an HTML document. Our HTML doctype will look like this:</p>\n<pre><code>&lt;!doctype html&gt;\n</code></pre>\n<p>Looks a bit strange, but this isn't actually an HTML tag. So, we don't need something crazy like <code>&lt;/!doctype html&gt;</code> anywhere, and the doctype is a one-time piece of text that we should include at the top of every HTML page. Next comes perhaps the most important HTML tag of all: <code>&lt;html&gt;</code>. This tag will surround our entire HTML document, since everything we write will be an HTML element!</p>\n<p>Directly under the <code>&lt;html&gt;</code> tag, we have two tags: the <code>&lt;head&gt;</code> and the <code>&lt;body&gt;</code>. The <code>&lt;head&gt;</code> will contain some metadata, or additional information about the HTML, for our page. For example, we might want to include a <code>&lt;title&gt;</code> tag inside of the <code>&lt;head&gt;</code>, which gives the page a title to be displayed in the web browser's title bar or tabs. Anything inside of the <code>&lt;head&gt;</code> tag is purely metadata, so nothing in the <code>&lt;head&gt;</code> will actually be displayed by the web browser.</p>\n<p>The <code>&lt;body&gt;</code> tag, then, is the meat and potatoes of our HTML document. Here, we'll include all of our document's snazzy HTML elements that we actually want to be displayed to the user. So, the basic skeleton of every HTML document looks like this:</p>\n<pre><code>&lt;!doctype html&gt;\n\n&lt;html&gt;\n\n    &lt;head&gt;&lt;/head&gt;\n\n    &lt;body&gt;&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>Here's a full-fledged example of an HTML document that uses a few of the HTML tags we've seen so far:</p>\n<pre><code>&lt;!doctype html&gt;\n\n&lt;html&gt;\n\n    &lt;head&gt;\n\n        &lt;title&gt;Tommy's Cat Store&lt;/title&gt;\n\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;h1&gt;Tommy's Cat Store&lt;/h1&gt;\n\n        &lt;ul&gt;\n\n            &lt;li&gt;&lt;a href=\"index.html\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n\n            &lt;li&gt;&lt;a href=\"about.html\"&gt;About&lt;/a&gt;&lt;/li&gt;\n\n            &lt;li&gt;&lt;a href=\"cats.html\"&gt;Cats&lt;/a&gt;&lt;/li&gt;\n\n        &lt;/ul&gt;\n\n        &lt;h2&gt;We love cats.&lt;/h2&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h2>CSS</h2>\n<p>HTML described the structure of our web pages, but it didn't actually say anything about the aesthetics. To describe what our web page should look like, we'll need something called <strong>CSS</strong>, or Cascading Style Sheets. A <strong>stylesheet</strong> is simply a list of stylistic rules that the browser can apply to a web page. The basic idea behind CSS is that we'll first describe what elements we'd like to style, and then we'll describe the different parts of the elements we'd like to change.</p>\n<p>So, we'll first select elements on the page to apply styles to using CSS <strong>selectors</strong>, which filter down an entire HTML document into a smaller set of elements to apply styles to. Before we take a look at those, though, let's introduce two new attributes that can be used to categorize HTML tags. The <code>id</code> attribute gives us a way to uniquely identify any element on the page, and we can attach it to any HTML tag we want. For example, we might want to say something like:</p>\n<pre><code>&lt;img id=\"cat\" src=\"cat2.jpg\" /&gt;\n</code></pre>\n<p>Now, only this image should have an ID of <code>cat</code>. We can also attach a <code>class</code> attribute to any HTML element on our page. Unlike IDs, classes don't have to be unique, so we can use classes to group similar elements together. If we have a bunch of elements related to animals, we might attach a class of <code>animal</code> to all of them, for example. Not all elements having a certain class have to be of the same type, so we can apply our <code>animal</code> class to both an <code>li</code> and a <code>table</code>, for example. We'll see why this can come in handy in just a moment.</p>\n<p>Okay, let's take a look at some CSS selectors. The most basic CSS selector might look something like this:</p>\n<pre><code>p\n</code></pre>\n<p>Well that was anti-climactic, wasn't it? This super-simple CSS selector simply selects all of the <code>&lt;p&gt;</code> elements on the page. If we had said something like <code>img</code> instead, then we'd select all of the <code>&lt;img&gt;</code> elements on the page. That isn't so fine-grained, so let's look at another CSS selector:</p>\n<pre><code>#cat\n</code></pre>\n<p>We're not tweeting, that hashtag (#) is actually part of the CSS selector. By starting our selector off with the \"#\" character, we're saying that we want to select an element by its ID. So, <code>#cat</code> will select the element on the page with an ID of <code>cat</code>. Because we've said IDs should be unique, this CSS selector should only grab one element. Finally, let's take a look at a third CSS selector whose specificity is in between these two:</p>\n<pre><code>.animal\n</code></pre>\n<p>As you might guess, this CSS selector will select all elements with the class <code>animal</code>. Because we've started our selector with the \".\" character, we're telling CSS that we'd like to filter elements by the <code>class</code> attribute.</p>\n<p>Now that we have some elements, let's style them! We'll supply style rules via key-value pairs after specifying the elements we'd like to change. A full-fledged CSS <strong>rule</strong> might look something like this:</p>\n<pre><code>#cat {\n\n    color: orange;\n\n}\n</code></pre>\n<p>Okay, let's break this down a bit. Our CSS selector is <code>#cat</code>, so we know that we're going to be styling the element with the ID <code>cat</code>. Next, we have a pair of curly braces that demarcate the rules we're going to apply to the elements matching our CSS selector. After that, we have a key-value pair that looks like it will set the color of the element to orange. Notice that this key-value pair ends with the semicolon character (;), which tells CSS that we're all done specifying the rule. And that's it! We just applied a style to an HTML element. Let's take a look at another one:</p>\n<pre><code>.animal {\n\n    width: 300px;\n\n    background: blue;\n\n}\n</code></pre>\n<p>Here, we're applying a style to all elements with the class <code>animal</code>, since our CSS selector starts with a dot. This time, we're specifying two rules inside of the curly braces, which means that we can manipulate multiple parts of HTML elements at once. With the first rule, we're saying that all elements with the class <code>animal</code> will be 300 pixels wide, and with the second, we're saying that they will have a blue background color.</p>\n<p>We can also combine CSS selectors to be even more specific. Here's an example:</p>\n<pre><code>#navbar a {\n\n    font-size: 24px;\n\n}\n</code></pre>\n<p>This time, we're saying that we'd only like to style <code>&lt;a&gt;</code> elements that are located within an element with an ID of <code>navbar</code>. Notice how we have a space between our first selector and our second selector: that's how we're expressing that we'd only like to style elements that match the second selector if they're contained within some element that matches the first selector. Here's another example of combining CSS selectors:</p>\n<pre><code>h1, p {\n\n    margin: 10px;\n\n    border: 1px solid black;\n\n}\n</code></pre>\n<p>This time, we put a comma between our two CSS selectors, which means we want to apply styles to both <code>&lt;h1&gt;</code> tags <em>and</em> <code>&lt;p&gt;</code> tags. So, this rule will be applied to an element if it matches the first selector or it matches the second selector. By the way, the <code>margin</code> rule specifies how much space surrounds an element. In addition to <code>margin</code>, we also have <code>padding</code>, which is the space between an element and its border. Together, these three things can be described using the CSS <strong>box model</strong>, which looks something like this:</p>\n<p><img alt=\"Box Model\" src=\"/static/img/18-box-model.gif\" /></p>\n<p>Alright, now that we've written lots of CSS, let's take a look at how to actually integrate it into an HTML page. There are a few different ways we can apply CSS styles to HTML. The first is with the <code>&lt;style&gt;</code> tag; inside of a <code>&lt;style&gt;</code> element in an HTML document, we can simply write some CSS. Using this tag would look something like this:</p>\n<pre><code>&lt;!doctype html&gt;\n\n&lt;html&gt;\n\n    &lt;head&gt;\n\n        &lt;title&gt;Tommy's Cat Store&lt;/title&gt;\n\n        &lt;style&gt;\n\n\n\n            #navbar {\n\n                width: 300px;\n\n                display: inline-block;\n\n            }\n\n\n\n            #content {\n\n                display: inline-block;\n\n            }\n\n\n\n        &lt;/style&gt;\n\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;h1&gt;Tommy's Cat Store&lt;/h1&gt;\n\n        &lt;div id=\"navbar\"&gt;\n\n            &lt;ul&gt;\n\n                &lt;li&gt;&lt;a href=\"index.html\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n\n                &lt;li&gt;&lt;a href=\"about.html\"&gt;About&lt;/a&gt;&lt;/li&gt;\n\n                &lt;li&gt;&lt;a href=\"cats.html\"&gt;Cats&lt;/a&gt;&lt;/li&gt;\n\n            &lt;/ul&gt;\n\n        &lt;/div&gt;\n\n        &lt;div id=\"content\"&gt;\n\n            &lt;h2&gt;We love cats.&lt;/h2&gt;\n\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>We can also apply styles via the <code>style</code> attribute. For example, if we want to make a single paragraph red, we could do something like this:</p>\n<pre><code>&lt;p style=\"color: red\"&gt;This paragraph is red&lt;/p&gt;\n</code></pre>\n<p>Finally, we can put all of our CSS files into a separate CSS file. Then, using the <code>&lt;link&gt;</code> tag, we can apply the styles contained in some CSS file to an HTML document. Here's an example:</p>\n<pre><code>&lt;!doctype html&gt;\n\n&lt;html&gt;\n\n    &lt;head&gt;\n\n        &lt;title&gt;Tommy's Cat Store&lt;/title&gt;\n\n        &lt;link rel=\"stylesheet\" href=\"styles.css\" /&gt;\n\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;h1&gt;Tommy's Cat Store&lt;/h1&gt;\n\n        &lt;div id=\"navbar\"&gt;\n\n            &lt;ul&gt;\n\n                &lt;li&gt;&lt;a href=\"index.html\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n\n                &lt;li&gt;&lt;a href=\"about.html\"&gt;About&lt;/a&gt;&lt;/li&gt;\n\n                &lt;li&gt;&lt;a href=\"cats.html\"&gt;Cats&lt;/a&gt;&lt;/li&gt;\n\n            &lt;/ul&gt;\n\n        &lt;/div&gt;\n\n        &lt;div id=\"content\"&gt;\n\n            &lt;h2&gt;We love cats.&lt;/h2&gt;\n\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>Here, we've created a separate file called <code>styles.css</code>, and that file simply contains the set of CSS rules we've defined above. Using the <code>href</code> attribute of a <code>&lt;link&gt;</code> tag placed in the <code>&lt;head&gt;</code> of the HTML document, we've told the web browser to also take a look at a file called <code>styles.css</code> for some CSS rules to apply to the document.</p>\n<p>And that's it for the basics of HTML and CSS! Using these simple building blocks, we can create some amazing web pages.</p>", "title": "A Web of Development", "id": "html", "tags": ["CSS", "HTML"], "sequence": 15}, "programming": {"content": "<h2>Introduction</h2>\n<p>Last time, we saw how we could make static web pages using HTML and CSS. Now, let's see how we can actually make those pages <em>do</em> something!</p>\n<h2>Programming</h2>\n<p><strong>Programming</strong> is how we get computers to do our bidding. Just kidding, but not really. A computer <strong>program</strong> is simply a set of specific instructions that a computer will dutifully execute. We'll need to be very specific in our instructions, which can be a challenge! Our computer will always do exactly what we tell it to do, but it isn't always obvious what exactly we should tell our computer.</p>\n<p>We'll first take a look at a programming language called <a href=\"http://scratch.mit.edu\">Scratch</a>. Using Scratch, we can drag and drop different constructs to create a program.</p>\n<p>Once we open up Scratch, we can see a single cat <strong>sprite</strong>, which is simply a character or object that we can manipulate. The sprite is placed on a <strong>scene</strong>, which represents our two-dimensional world. We can attach <strong>scripts</strong>, or sets of instructions, to both sprites and the scene. Let's take a look at the differnet components that we can use in a script.</p>\n<ul>\n<li>\n<p><strong>Statements</strong> are things that we can <em>do</em>. For example, statements might include \"Say hello,\" \"turn to the right,\" and \"pause for 3 seconds.\"</p>\n</li>\n<li>\n<p><strong>Boolean expressions</strong> are questions that are either true or false. In Scratch, some conditions include \"Is this sprite touching the mouse?\" and \"Is the mouse clicked?\"</p>\n</li>\n<li>\n<p>We can also combine Boolean expressions to form expressions like \"Is the mouse clicked or is the space bar pressed?\" and \"Is the mouse down and is this sprite touching something?\"</p>\n</li>\n<li>\n<p>We can use Boolean expressions in <strong>conditions</strong>, which allow us to do different things based on the current state of the world. Much like a choose-your-own-adventure novel (remember those?), our script can branch off depending on whether or not a Boolean expression is true or false. Typically, we'll say \"if something is true, do this, else, do that\".</p>\n</li>\n<li>\n<p><strong>Loops</strong> allow us to do something more than once. If we wanted our cat to meow three times, we could drag the same statement over three times in a row, but that would be kinda annoying. Instead, we can enclose some sequence of statements that will be run over and over again until some condition is met.</p>\n</li>\n<li>\n<p><strong>Variables</strong> allow us to store information that we can access later. For example, our cat might ask the user what his or her name is. Impressive that Scratch comes with talking cats, right? After the we answer, the cat can remember our answer in a variable that can be used later in the script.</p>\n</li>\n<li>\n<p><strong>Arrays</strong> are lists of variables. If we were making a program to keep track of our shopping list, we could store all the items that we want to buy in an array of <strong>strings</strong>, where a string is simply a sequence of characters (like a word).</p>\n</li>\n</ul>\n<p>And that's it! Using this small set of constructs, we can create some amazingly complex programs. In Scratch, we can attach scripts to any number of sprites. When we start our program, multiple scripts can be executed at the same time, and we can call each individual script a <strong>thread</strong>. By the way, in Scratch, we'll need to use a special block that says \"On green flag clicked\" as the starting point for our scripts if we want it to start executing when the user starts our program.</p>\n<p>Of course, we might not want all of our scripts to start when the user starts the program. Instead, we might want our scripts to start when a certain <strong>event</strong> occurs. In Scratch, we can define our own events that other sprites can respond to. For example, when we click on a sprite, it might say \"Marco\" and <strong>broadcast</strong> an event to every other sprite. Sprites that are <strong>listening</strong> for this event can then respond by saying \"Polo\" (or anything else).</p>\n<h2>Javascript</h2>\n<p>We can apply the same concepts we just saw in Scratch to other programming languages. Let's take a look at Javascript, which just so happens to be my favorite programming language (surprise!). Since Javascript doesn't feature nice drag-and-drop blocks, we'll have to type out our computer programs. Let's translate a few of the concepts we saw in Scratch to Javascript.</p>\n<p>Just like last time, let's start with a simple statement. Where in Scratch we had a \"say\" block to make a character display some text to the user. In Javascript, we can do the same thing with the <code>alert</code> function:</p>\n<pre><code>`alert(\"Hi there!\");\n</code></pre>\n<p>Since we don't have a nice yellow block that contains the text we want to say, we'll put our message inside of parentheses instead. Notice how we're also ending our statement with a semicolon, just like we ended all of our CSS rules with a semicolon. When this Javascript code is run, a pop-up message with the text we've specified will be displayed to the user.</p>\n<p>Alright, what about variables? In Scratch, we created and modified variables using the red variable block. To create a variable called <code>cats</code> in Javascript, we'd say something like:</p>\n<pre><code>var cats = 2;\n</code></pre>\n<p>Uh oh, looks like math class at first, but don't worry! The <code>var</code> keyword means that we're creating a brand new variable that doesn't exist yet. Next, we decided to call our variable <code>cats</code>, and it has a value of <code>2</code>. Just like last time, we have a semicolon at the end of our line. Variables aren't limited to just numbers, and we can make a variable equal to a string (which is just a sequence of characters) using quotes:</p>\n<pre><code>var name = \"Boots\";\n</code></pre>\n<p>Okay, now that we have variables, let's use them in some conditions. We saw \"if-else\" blocks in Scratch, so let's translate those to Javascript.</p>\n<pre><code>if (cats == 2) {\n\n    alert('You have two cats!');\n\n}\n\nelse {\n\n    alert('You do not have two cats!');\n\n}\n</code></pre>\n<p>Looks pretty similar to what we did in Scratch! First, check out the Boolean expression <code>(cats == 2)</code>. We saw that we can use a single <code>=</code> to set the value of a variable, so we'll use a double <code>==</code> when we want to compare the value of variables. We could have also said <code>(cats &gt; 2)</code> if we wanted to check if the value of the <code>cats</code> variable is more than 2. After our expression, we have curly braces, just like we did in CSS. Inside of the curly braces will be the code that we want to be run if our condition is true. In Scratch, we were able to put blocks inside of the \"if\" block, so in Javascript, we'll put code inside of these curly braces. After we close the curly braces for the <code>if</code>, we have another set of curly braces for the <code>else</code>.</p>\n<p>We can also combine Boolean expressions, just like we did in Scratch:</p>\n<pre><code>if (cats == 2 &amp;&amp; name == \"Boots\")\n</code></pre>\n<p>Here, the <code>&amp;&amp;</code> is the same as \"and\". If we instead wanted to say \"or\", we would say:</p>\n<pre><code>if (cats == 2 || name == \"Boots\")\n</code></pre>\n<p>Finally, let's translate loops from Scratch to Javascript. Remember, we used loops to execute the same Scratch blocks more than once. If we used a \"Forever\" loop, then the blocks inside of the loop would run... forever! That might not always be the best idea in the world, so we'll want to define some kind of stopping condition for some of the loops we write. In Javascript, we'll define some block of code that will be run over and over again until some condition is no longer true. Here's what that looks like:</p>\n<pre><code>var counter = 1;\n\nwhile (counter &lt;= 10) {\n\n    alert(counter);\n\n    counter = counter + 1;\n\n}\n</code></pre>\n<p>Woah, lots of code, let's break this down line by line. In the first line, we're creating a new variable called <code>counter</code> and setting its value equal to the number <code>1</code>. Next up is our loop: we'd like to run some block of code while the value of the <code>counter</code> variable is less than or equal to 10. Since counter starts off as <code>1</code>, we know this will be true at least once. Then, we have a pair curly braces again, and just like before, these will demarcate what code we'd like to run repeatedly. Inside of the curly braces, we have our old friend <code>alert</code>, which will display the value of the <code>counter</code> variable to the user. Finally, the last line of our loop increments the value of the <code>counter</code> variable. If <code>counter</code> had a value of <code>1</code>, it would have a value of <code>2</code> after this line. Since we're out of lines to execute within the loop, we'll jump back to the top of the loop to run everything again. After one run, or <strong>iteration</strong>, of this loop, our <code>counter</code> variable will be <code>2</code>, which is most definitely less than or equal to <code>10</code>, so it will run again. Eventually, though, our <code>counter</code> will have a value of <code>11</code>, which will cause us to break out of the loop and move on.</p>\n<p>Rather than using the <code>while</code> keyword, we can express the same exact thing with the <code>for</code> keyword and fewer lines of code:</p>\n<pre><code>for (var counter = 1; counter &lt;= 10; counter++) {\n\n    alert(counter);\n\n}\n</code></pre>\n<p>Alright, looks like we've compressed our last code snippet down quite a bit. It looks like we're still creating a <code>counter</code> variable that starts off with a value of <code>1</code>, and we're still running this loop until the value of <code>counter</code> exceeds <code>10</code>. That <code>counter++</code> bit is just a shorthand for <code>counter = counter + 1</code>, and it will be run <em>after</em> the contents of the loop. So, this <code>for</code> loop is exactly the same as the <code>while</code> loop above!</p>\n<p>Phew! That was a lot of Javascript. Now, let's take a look at how we can actually integrate Javascript into our web page. Just like we had a <code>&lt;style&gt;</code> tag in which we could write some CSS, HTML also gives us a <code>&lt;script&gt;</code> tag in which we can write some Javascript. So, if we wanted to display a pop-up on an HTML page that appeared as soon as the user opened it, we could do something like this:</p>\n<pre><code>&lt;!doctype html&gt;\n\n&lt;html&gt;\n\n    &lt;head&gt;\n\n        &lt;title&gt;Tommy's Cat Store&lt;/title&gt;\n\n        &lt;script&gt;\n\n            alert(\"We love cats!\");\n\n        &lt;/script&gt;\n\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;h1&gt;Tommy's Cat Store&lt;/h1&gt;\n\n        &lt;ul&gt;\n\n            &lt;li&gt;&lt;a href=\"index.html\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n\n            &lt;li&gt;&lt;a href=\"about.html\"&gt;About&lt;/a&gt;&lt;/li&gt;\n\n            &lt;li&gt;&lt;a href=\"cats.html\"&gt;Cats&lt;/a&gt;&lt;/li&gt;\n\n        &lt;/ul&gt;\n\n        &lt;h2&gt;We love cats.&lt;/h2&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>Of course, pop-ups are pretty annoying, so I wouldn't recommend <em>actually</em> doing that. Just like it was nice to move all of our CSS into a separate, CSS-only file, we can do the same thing with Javascript. We can also use the <code>&lt;script&gt;</code> tag to specify the location of a Javascript file like this:</p>\n<pre><code>&lt;script src=\"cats.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>Annoyingly, we can't just say <code>&lt;script /&gt;</code> here, but that's okay I guess. We'll get over it.</p>\n<p>That's all the Javascript we'll see for now! If you're interested in learning more, there are lots of resources available online. But, the main takeaway here is that the concepts we've covered in Scratch will apply to most any programming language we look at!</p>\n<p>Now go forth and make something awesome.</p>", "title": "Tonight's Programming", "id": "programming", "tags": ["Algorithms", "Javascript", "Programming", "Scratch"], "sequence": 16}}